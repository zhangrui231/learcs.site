<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>CS自学社区 Blog</title>
        <link>https://www.learncs.site/blog</link>
        <description>CS自学社区 Blog</description>
        <lastBuildDate>Tue, 25 Jun 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Andrej的成功建议]]></title>
            <link>https://www.learncs.site/blog/a-guide-by-Andrej-Karpathy</link>
            <guid>https://www.learncs.site/blog/a-guide-by-Andrej-Karpathy</guid>
            <pubDate>Tue, 25 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[如何在课程中取得好成绩]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何在课程中取得好成绩">如何在课程中取得好成绩<a href="#如何在课程中取得好成绩" class="hash-link" aria-label="Direct link to 如何在课程中取得好成绩" title="Direct link to 如何在课程中取得好成绩">​</a></h2><p>作者： Andrej Karpathy
翻译：「科技文章翻译GTPS」<a href="https://cs.stanford.edu/people/karpathy/advice.html" target="_blank" rel="noopener noreferrer">原文地址</a></p><p>以下是我给年轻学生的一些建议，帮助他们在本科课程中取得好成绩。</p><p>经过多年的考试（结果还不错），以下是一些我觉得有效的经验法则：</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="一般建议">一般建议<a href="#一般建议" class="hash-link" aria-label="Direct link to 一般建议" title="Direct link to 一般建议">​</a></h2><p><strong>熬夜不值得</strong><br>
<!-- -->充足的睡眠非常重要。对我来说，最佳的睡眠时间大约是7.5小时，最少也要睡4小时。我多次遇到过晚上卡在一个问题上，但早上却能在几分钟内解决。我感觉大脑在夜间会将不稳定的短期记忆转化为稳定的长期记忆。我尽量提前几天开始复习，即使每天只花一点时间，也能让大脑有更多时间吸收知识。</p><p><strong>参加辅导课或复习课</strong><br>
<!-- -->即使它们很无聊。关键是它们能让你思考学习内容。如果实在太无聊，你可以做些其他事情。记住，你也可以选择不同的助教去参加其他的辅导课。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="考试准备">考试准备<a href="#考试准备" class="hash-link" aria-label="Direct link to 考试准备" title="Direct link to 考试准备">​</a></h2><p><strong>组织和整体规划是关键</strong><br>
<!-- -->制定学习计划，即使你不完全遵循。对我来说，这通常包括了解所有需要学习的内容，并将它们以项目符号的形式列出来。仔细考虑每一点，并估计需要多长时间才能掌握。如果不这样做，你可能会在前面的内容上花费太多时间，而对后面的重要内容草草了事。</p><p><strong>在开始复习之前，先看看以前的考试题</strong><br>
<!-- -->尤其是如果这些考试题是同一个教授出的。这会给你很好的提示，让你知道该如何复习。每个教授的出题风格都不同。刚开始时不要尝试完成问题，但要仔细观察问题的类型。</p><p><strong>阅读和理解与实际复述不同</strong><br>
<!-- -->即使我自己也常犯这个错误：你在书中读到公式或推导，觉得完全理解。现在合上书，试着写下来。你会发现这个过程完全不同，很多时候你其实写不出来！这两者似乎使用了大脑的不同部分。确保你能真正写下最重要的部分，并且可以随时重新推导它们。费曼对此非常了解。</p><p><strong>尽量与他人合作，但要在复习的后期</strong><br>
<!-- -->先独自学习，因为在复习的早期阶段，别人只会分散你的注意力。但在复习的最后阶段与他人一起学习：他们通常会指出重要的陷阱，提出好的问题，有时还会给你机会教别人。</p><p><strong>不要只和成绩好的学生在一起</strong><br>
<!-- -->成绩稍差的学生会让你向他们解释，这会大大帮助你理解材料。</p><p><strong>期末考试前至少去找教授一次</strong><br>
<!-- -->即使你没有问题（编一个也行！）教授有时会在一对一的情况下透露更多关于考试的信息，这些信息他们不会在全班面前说。不要期望，但当这种情况发生时，帮助很大。这会给你相对于其他学生的不公平优势吗？有时会。这有点可疑:)<br>
<!-- -->但总的来说，让教授至少稍微了解你是个好主意。</p><p><strong>提前充分复习</strong><br>
<!-- -->我提过这个了吗？也许我应该再强调一次。大脑真的需要时间来吸收材料。看起来很难的东西随着时间的推移会变得更容易。<br>
<!-- -->你需要为期中考试分配大约3天，为期末考试分配大约6天。</p><p><strong>如果复习不顺利并且感到疲惫，在紧急情况下喝一罐能量饮料</strong><br>
<!-- -->它们有效。这只是化学反应。</p><p><strong>对于数学这类科目：练习比阅读更重要</strong><br>
<!-- -->最好学习到你差不多准备好开始做练习的程度，然后通过做练习填补空白，尤其是如果你有很多可用的练习题。这些练习还会让你回头阅读你不知道的东西。</p><p><strong>制作自己的复习笔记</strong><br>
<!-- -->即使你不能带进考场。写东西有助于记忆。你想要的是将整个课程浓缩到一页或几页，最终可以摊开在你面前，并自信地说“这就是我必须知道的所有内容”</p><p><strong>在其他人也在学习的地方学习，即使不是同样的内容</strong><br>
<!-- -->这会让你在自己不学习时感到难受。对我来说很有效:)<br>
<!-- -->有大量背景噪音的地方不好，对学习有负面影响。图书馆和阅览室效果最好。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="考试当天">考试当天<a href="#考试当天" class="hash-link" aria-label="Direct link to 考试当天" title="Direct link to 考试当天">​</a></h2><p><strong>最佳饮食和饮水习惯是：考试前2小时喝咖啡和吃东西</strong><br>
<!-- -->对我来说，考试前立即喝咖啡或吃东西总是不好<br>
<!-- -->在任何潜在压力情境前喝咖啡总是不好<br>
<!-- -->不喝咖啡也不好<br>
<!-- -->我意识到咖啡这一点可能对我来说是主观的，但这是值得你考虑的事情。</p><p><strong>在考试前非常紧张地学习</strong><br>
<!-- -->我看到很多人在考试前放弃并声称“休息一下”。短期记忆是美妙的，不要浪费它！在考试前尽可能紧张地学习。如果你真的觉得必须休息，在考试前大约一小时休息，但确保在考试前30-45分钟非常努力地学习。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="考试期间">考试期间<a href="#考试期间" class="hash-link" aria-label="Direct link to 考试期间" title="Direct link to 考试期间">​</a></h2><p><strong>考试总是用铅笔</strong><br>
<!-- -->你想要能够擦掉你写的错误答案</p><p><strong>考试前快速浏览所有问题</strong><br>
<!-- -->每个问题只需1-3秒的简单浏览。只要吸收所有关键词，了解整个考试的规模。</p><p><strong>考试时，先做简单的题目</strong><br>
<!-- -->不要让自己在某个问题上卡太久。稍后再回来。我经常跳过问题……有时我第一次能完成的考试只有30%。有些问题在你“热身”后变得容易得多，我无法解释。</p><p><strong>考试时尽量整洁</strong><br>
<!-- -->令人惊讶的是很少有人意识到这个明显的事实：一个人类会给你的考试打分。一个悲伤的人类会给低分。我在本科时怀疑这一点，并在当助教和实际打分时得到了强烈的证实。</p><p><strong>总是把答案圈起来</strong><br>
<!-- -->尤其是当有推导时。这让评分者能快速打钩给满分并继续。进入评分者的思维模式。</p><p><strong>绝对不要提前交卷</strong><br>
<!-- -->你犯了一个愚蠢的错误（我保证），找到它并修正。如果找不到，再努力直到时间用完。如果你非常确定没有错误，就努力使考试更易读，更容易打分。擦掉垃圾，圈出答案，添加步骤等。<br>
<!-- -->我只能这么说——提前交卷的人是愚蠢的。这是一个潜在收益完全超过成本的明确例子。</p><p><strong>与评分者沟通</strong><br>
<!-- -->向评分者展示你知道的不仅仅是你写下的内容。好吧，你不能做某个步骤，但要明确你知道如果做的话该怎么做。必要时不要害怕留笔记。信不信由你，评分者通常会试图给你</p><p>多找些分数——让他们容易做到这一点。</p><p><strong>考虑每个问题的分数</strong><br>
<!-- -->很多考试会告诉你每个问题值多少分。当你做错时，这会给你强烈的暗示。这也给了你强烈的提示哪些问题你应该重点做。当然，在值很少分数的问题上花太多时间是愚蠢的，尤其是当这些问题对你来说仍然相对困难时。</p><p><strong>如果还有不到5分钟的时间，你还在某个问题上卡住，停下来</strong><br>
<!-- -->你的时间更好地用来重新阅读所有问题，并确保你没有遗漏任何次要问题，并且你回答了所有问题。你不会相信有多少人因为这样丢掉了愚蠢的分数。</p><p>恭喜你读到这里！现在既然你在这里，我有最后一个（非常重要的建议）。这是我希望在本科时有人告诉我的。</p><p>本科生往往对他们的课程有隧道视野。他们想要取得好成绩等。重要的是要认识到，除非你的成绩很差，否则没有人会在意。例如，我总是说最聪明的学生会在所有课程中取得85%的成绩。这样，你的成绩会在4.0左右，但你不会过度学习，也不会学习不足。</p><p>你的时间是宝贵的，有限的资源。达到一个不在考试中犯错的程度，然后将注意力转向更重要的事情。它们是什么？</p><p>获得实际的，真实世界的经验，处理真实的代码库，项目或问题，而不是愚蠢的课程练习是非常重要的。教授/认识你的人并且可以给你写一封好的推荐信，说明你有主动性，激情和驱动力是非常重要的。你在考虑申请工作吗？找一个暑期实习。你在考虑攻读研究生吗？获得研究经验！报名参加你学校提供的任何项目。或者联系你喜欢的教授/研究生，要求参与他们的研究项目。如果他们认为你有动力和驱动力，这可能会奏效。不要低估这一点的重要性：一个著名教授在推荐信中写道你有驱动力，动力和独立思考的能力，会完全压倒其他一切，尤其是成绩这样的琐碎事情。如果你在申请之前发表至少一篇论文，这也会有很大帮助。你还应该知道，他们最大的烦恼是那些过于兴奋的本科生，他们报名参加一个项目，见几次面，问很多问题，然后在研究生或教授投入大量时间后突然放弃并消失。不要成为这样的人（这会损害你的声誉），也不要给出任何你可能是这样人的暗示。</p><p>除了研究项目，参与一些人的小组项目，或者更好，从头开始自己的项目。为开源做贡献，创建/改进一个库。走出去，创建（或帮助创建）一些酷的东西。记录好。写博客。这些是几年后人们会关心的事情。你的成绩？它们是你在这过程中必须处理的烦恼。好好利用你的时间，祝你好运。</p>]]></content:encoded>
            <category>Andrej</category>
            <category>给本科生的建议</category>
        </item>
        <item>
            <title><![CDATA[神经网络——从零到英雄]]></title>
            <link>https://www.learncs.site/blog/neural-networks-zero-to-hero</link>
            <guid>https://www.learncs.site/blog/neural-networks-zero-to-hero</guid>
            <pubDate>Tue, 25 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[这是Andrej Karpathy讲授的一门课程，内容是从头开始用代码构建神经网络。]]></description>
            <content:encoded><![CDATA[<div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>这是Andrej Karpathy讲授的一门课程，内容是从头开始用代码构建神经网络。</p><p>我们将从反向传播的基础知识开始，逐步构建现代深度神经网络，如GPT。在我看来，即使你的目标是最终进入其他领域（如计算机视觉），语言模型也是学习深度学习的绝佳起点，因为你学到的大部分知识都是可以直接转移的。这就是为什么我们深入研究并专注于语言模型。</p></div></div><p><strong>先决条件</strong>:</p><ul><li>熟练的Python编程能力</li><li>基础数学知识（如导数、高斯分布）</li></ul><table><thead><tr><th>课程章节</th><th>内容简介</th><th>时长</th><th>视频链接</th></tr></thead><tbody><tr><td><strong>1.神经网络与反向传播详解：构建micrograd </strong></td><td>这是对反向传播和神经网络训练最逐步详细的解释。只需具备基本的Python知识和对高中微积分的模糊记忆即可。</td><td>2h 25m</td><td><a href="https://youtu.be/VMj-3S1tku0" target="_blank" rel="noopener noreferrer">观看视频</a></td></tr><tr><td><strong>2.语言模型入门详解：构建makemore</strong></td><td>我们实现了一个二元字符级语言模型，在后续视频中我们会将其复杂化为现代的Transformer语言模型，如GPT。在这个视频中，重点是介绍torch.Tensor及其细微之处和在高效评估神经网络中的使用，以及语言建模的总体框架，包括模型训练、采样和损失评估（例如分类的负对数似然）。</td><td>1h 57m</td><td><a href="https://youtu.be/PaCmpygFfXo" target="_blank" rel="noopener noreferrer">观看视频</a></td></tr><tr><td><strong>3.构建makemore第二部分：MLP</strong></td><td>我们实现了一个多层感知器（MLP）字符级语言模型。在这个视频中，我们还介绍了许多机器学习的基础知识（例如模型训练、学习率调整、超参数、评估、训练/验证/测试拆分、欠拟合/过拟合等）。</td><td>1h 15m</td><td><a href="https://youtu.be/TCH_1BHY58I" target="_blank" rel="noopener noreferrer">观看视频</a></td></tr><tr><td><strong>4.构建makemore第三部分：Activations &amp; Gradients, BatchNorm</strong></td><td>我们深入研究了多层MLP的一些内部结构，并审查了前向传递激活、后向传递梯度的统计数据，以及当它们缩放不当时的一些陷阱。我们还查看了理解深度网络健康状况所需的典型诊断工具和可视化方法。我们了解到训练深度神经网络可能会很脆弱，并介绍了第一个使这一过程变得更容易的现代创新：批量归一化。残差连接和Adam优化器将在后续视频中介绍。</td><td>1h 55m</td><td><a href="https://youtu.be/P6sfmUTpUmc" target="_blank" rel="noopener noreferrer">观看视频</a></td></tr><tr><td><strong>5.构建makemore第四部分：Becoming a Backprop Ninja</strong></td><td>我们从前一个视频中的2层MLP（带批量归一化）开始，通过手动方式进行反向传播，而不使用PyTorch的autograd的loss.backward()函数：通过交叉熵损失、第二层线性层、tanh、批量归一化、第一层线性层和嵌入表。在此过程中，我们对梯度如何在计算图中向后流动以及在高效的Tensors级别而不仅仅是单个标量级别上有了强烈的直观理解。这有助于建立对如何优化神经网络的能力和直觉，使你能够更自信地创新和调试现代神经网络。</td><td>56m</td><td><a href="https://youtu.be/q8SA3rM6ckI" target="_blank" rel="noopener noreferrer">观看视频</a></td></tr><tr><td><strong>6.构建makemore第五部分：Building a WaveNet</strong></td><td>我们从前一个视频中的2层MLP开始，使用树状结构将其加深，形成类似于DeepMind的WaveNet（2016）中的卷积神经网络架构。在WaveNet论文中，相同的层次结构使用因果扩张卷积更有效地实现（尚未涵盖）。在此过程中，我们更好地理解了torch.nn及其工作原理，以及典型的深度学习开发过程（大量阅读文档，跟踪多维Tensor形状，在jupyter notebook和仓库代码之间移动，等等）。</td><td>56m</td><td>[观看视频][https://youtu.be/t3YJ5hKiMQ0]</td></tr><tr><td><strong>7.手把手从零开始用代码构建GPT</strong></td><td>我们构建了一个生成预训练Transformer (GPT)，遵循论文“Attention is All You Need”和OpenAI的GPT-2/GPT-3。我们讨论了与ChatGPT的联系，后者已风靡全球。我们观看了GitHub Copilot（它本身就是一个GPT）帮助我们编写GPT（元：D！）。我建议大家观看之前的makemore视频，以熟悉自回归语言建模框架和Tensors及PyTorch nn的基础知识，这些我们在本视频中都已默认掌握。</td><td>1h 56m</td><td><a href="https://www.youtube.com/watch?v=kCc8FmEb1nY" target="_blank" rel="noopener noreferrer">观看视频</a></td></tr><tr><td><strong>构建GPT分词器</strong></td><td>Tokenizer是大语言模型（LLMs）的一个必要且无处不在的组件，它在字符串和tokens（文本块）之间进行转换。Tokenizer是LLM流水线中完全独立的阶段：它们有自己的训练集、训练算法（字节对编码），训练后实现两项基本功能：从字符串编码（encode()）到tokens，以及从tokens解码（decode()）回字符串。在本讲座中，我们从头开始构建OpenAI的GPT系列中使用的Tokenizer。在此过程中，我们会看到，LLMs的许多奇怪行为和问题实际上都可以追溯到tokenization。我们将讨论这些问题的原因，为什么tokenization是罪魁祸首，以及为什么理想情况下应该有办法完全删除这个阶段。</td><td>2h 13m</td><td><a href="https://youtu.be/zduSFxRajkE" target="_blank" rel="noopener noreferrer">观看视频</a></td></tr></tbody></table><p><strong>持续更新中</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="课程代码仓库"><a href="https://github.com/karpathy/nn-zero-to-hero" target="_blank" rel="noopener noreferrer">课程代码仓库</a><a href="#课程代码仓库" class="hash-link" aria-label="Direct link to 课程代码仓库" title="Direct link to 课程代码仓库">​</a></h2>]]></content:encoded>
            <category>Andrej</category>
            <category>AI课程</category>
        </item>
    </channel>
</rss>