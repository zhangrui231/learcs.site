"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[4135],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=i,c=m["".concat(s,".").concat(h)]||m[h]||u[h]||o;return n?a.createElement(c,r(r({ref:t},d),{},{components:n})):a.createElement(c,r({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},35291:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={title:"Project 1C: Deque61B Enhancements",description:"Project 1C."},r=void 0,l={unversionedId:"curriculum-resource/cs61b/projects/proj1c/index",id:"curriculum-resource/cs61b/projects/proj1c/index",title:"Project 1C: Deque61B Enhancements",description:"Project 1C.",source:"@site/docs/curriculum-resource/cs61b/projects/proj1c/index.md",sourceDirName:"curriculum-resource/cs61b/projects/proj1c",slug:"/curriculum-resource/cs61b/projects/proj1c/",permalink:"/docs/curriculum-resource/cs61b/projects/proj1c/",draft:!1,tags:[],version:"current",frontMatter:{title:"Project 1C: Deque61B Enhancements",description:"Project 1C."},sidebar:"tutorialSidebar",previous:{title:'Coverage Tests - Project 1B Array Deque 61B"',permalink:"/docs/curriculum-resource/cs61b/projects/proj1b/flags"},next:{title:"FAQ - Project 1C Deque61B Enhancements",permalink:"/docs/curriculum-resource/cs61b/projects/proj1c/faq"}},s={},p=[{value:"Due: Tuesday, February 20th, 11:59 PM PT",id:"due-tuesday-february-20th-1159-pm-pt",level:2},{value:"FAQ",id:"faq",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Object Methods",id:"object-methods",level:3},{value:"<code>equals()</code>",id:"equals",level:4},{value:"Testing The Object Methods",id:"testing-the-object-methods",level:4},{value:"MaxArrayDeque61B",id:"maxarraydeque61b",level:2}],d={toc:p},m="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(m,(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"{: .no_toc}"),(0,i.kt)("h2",{id:"due-tuesday-february-20th-1159-pm-pt"},"Due: Tuesday, February 20th, 11:59 PM PT"),(0,i.kt)("h2",{id:"faq"},(0,i.kt)("a",{parentName:"h2",href:"/docs/curriculum-resource/cs61b/projects/proj1c/faq"},"FAQ")),(0,i.kt)("p",null,'Each assignment will have an FAQ linked at the top. You can also access it by adding "/faq" to the end of the URL. The\nFAQ for Project 1C is located\n',(0,i.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/projects/proj1c/faq"},"here"),"."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In Project 1A, we built ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," and in Project 1B, we built ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B"),". Now we'll see a different\nimplementation: ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxArrayDeque61B"),"! This part of the project will provide some enhancements to your\nprevious ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B"),", and also bring everything together into an application of your newly-built data structure."),(0,i.kt)("p",null,"By the end of Project 1C, you will complete the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Write the ",(0,i.kt)("inlineCode",{parentName:"li"},"iterator()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"equals()"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"toString()")," methods for ",(0,i.kt)("inlineCode",{parentName:"li"},"LinkedListDeque61B.java")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ArrayDeque61B.java"),"."),(0,i.kt)("li",{parentName:"ul"},"Implement ",(0,i.kt)("inlineCode",{parentName:"li"},"MaxArrayDeque61B.java"),"."),(0,i.kt)("li",{parentName:"ul"},"Finish the ",(0,i.kt)("inlineCode",{parentName:"li"},"GuitarHero")," tasks.")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"This section assumes you have watched and fully digested the lectures up till\nthe Iterators, Object Methods lecture, Lecture 11.")),(0,i.kt)("h3",{parentName:"admonition",id:"style"},"Style"),(0,i.kt)("p",{parentName:"admonition"},"As in Project 1B, ",(0,i.kt)("strong",{parentName:"p"},"we will be enforcing style"),". You must follow the\n",(0,i.kt)("a",{parentName:"p",href:"../guides/style"},"style guide"),", or you will be penalized on the\nautograder."),(0,i.kt)("p",{parentName:"admonition"},"You can and should check your style locally with the CS 61B plugin. ",(0,i.kt)("strong",{parentName:"p"},"We will\nnot remove the velocity limit for failing to check style.")),(0,i.kt)("h3",{parentName:"admonition",id:"getting-the-skeleton-files"},"Getting the Skeleton Files"),(0,i.kt)("p",{parentName:"admonition"},"Follow the instructions in the\n",(0,i.kt)("a",{parentName:"p",href:"../guides/assignment-workflow#assignment-workflow"},"Assignment Workflow guide"),"\nto get the skeleton code and open it in IntelliJ. For this project, we will be\nworking in the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"proj1c"))," directory."),(0,i.kt)("p",{parentName:"admonition"},"You see a ",(0,i.kt)("inlineCode",{parentName:"p"},"proj1c")," directory appear in your repo with the following structure:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"}," proj1c\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 deque\n\u2502   \u2502   \u251c\u2500\u2500 ArrayDeque61B.java\n\u2502   \u2502   \u251c\u2500\u2500 Deque61B.java\n\u2502   \u2502   \u2514\u2500\u2500 LinkedListDeque61B.java\n\u2502   \u2514\u2500\u2500gh2\n\u2502       \u251c\u2500\u2500 GuitarHeroLite.java\n\u2502       \u251c\u2500\u2500 GuitarPlayer.java\n\u2502       \u251c\u2500\u2500 GuitarString.java\n\u2502       \u2514\u2500\u2500 TTFAF.java\n\u2502\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 MaxArrayDeque61BTest.java\n    \u2514\u2500\u2500 TestGuitarString.java\n"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If you get some sort of error, STOP and either figure it out by carefully\nreading the ",(0,i.kt)("a",{parentName:"p",href:"../guides/git/wtfs"},"git WTFs")," or seek help at OH\nor Ed. You'll potentially save yourself a lot of trouble vs. guess-and-check\nwith git commands. If you find yourself trying to use commands recommended by\nGoogle like ",(0,i.kt)("inlineCode",{parentName:"p"},"force push"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/heathercmiller/status/526770571728531456"},"don't"),"."),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Don't use force push, even if a post you found on Stack Overflow says to do it!"))),(0,i.kt)("p",null,"You can also watch Professor Hug's ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=tABtNcN5y0A"},"demo"),"\nabout how to get started and this ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=Squ8TmG5mX0"},"video"),"\nif you encounter some git issues."),(0,i.kt)("h3",{id:"object-methods"},"Object Methods"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"If you'd like, you can follow the steps in this short ",(0,i.kt)("a",{parentName:"strong",href:"https://www.youtube.com/watch?v=slKsbcybrr8"},"video guide")," to help you get\nset up for Project 1C!")),(0,i.kt)("p",null,"In order to implement the following methods, you should start by copying and pasting your Project 1A and Project 1B\nimplementations of ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B")," into the relevant files in your ",(0,i.kt)("inlineCode",{parentName:"p"},"proj1c")," directory. "),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Please keep ",(0,i.kt)("inlineCode",{parentName:"p"},"package deque;")," at the top of both files. Otherwise, your code will not compile."),(0,i.kt)("h4",{parentName:"admonition",id:"iterator"},(0,i.kt)("inlineCode",{parentName:"h4"},"iterator()")),(0,i.kt)("p",{parentName:"admonition"},"One shortcoming of our ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B"),' interface is that it can not be iterated over. That is, the code below fails to compile with the error "foreach not applicable to type".'),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'  Deque61B<String> lld1 = new LinkedListDeque61B<>();\n\n  lld1.addLast("front");\n  lld1.addLast("middle");\n  lld1.addLast("back");\n  for (String s : lld1) {\n      System.out.println(s);\n  }\n')),(0,i.kt)("p",{parentName:"admonition"},"Similarly, if we try to write a test that our ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B"),' contains a specific set of items, we\'ll also get a compile error, in this case: "Cannot resolve method containsExactly in Subject".'),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public void addLastTestBasicWithoutToList() {\n    Deque61B<String> lld1 = new LinkedListDeque61B<>();\n\n    lld1.addLast("front"); // after this call we expect: ["front"]\n    lld1.addLast("middle"); // after this call we expect: ["front", "middle"]\n    lld1.addLast("back"); // after this call we expect: ["front", "middle", "back"]\n    assertThat(lld1).containsExactly("front", "middle", "back");\n}\n')),(0,i.kt)("p",{parentName:"admonition"},"Again the issue is that our item cannot be iterated over. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Truth")," library works by iterating over our object (as in the first example), but our ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," does not support iteration."),(0,i.kt)("p",{parentName:"admonition"},"To fix this, you should first modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," interface so that the declaration reads:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public interface Deque61B<T> extends Iterable<T> {\n")),(0,i.kt)("p",{parentName:"admonition"},"Next, implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"iterator()")," method using the techniques described in lecture 11."),(0,i.kt)("p",{parentName:"admonition"},"{: .task}"),(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Task"),": Implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"iterator()")," method in both ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B")," according to lecture."))),(0,i.kt)("p",null,"You are not allowed to call ",(0,i.kt)("inlineCode",{parentName:"p"},"toList")," here."),(0,i.kt)("h4",{id:"equals"},(0,i.kt)("inlineCode",{parentName:"h4"},"equals()")),(0,i.kt)("p",null,"Consider the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @Test\n    public void testEqualDeques61B() {\n        Deque61B<String> lld1 = new LinkedListDeque61B<>();\n        Deque61B<String> lld2 = new LinkedListDeque61B<>();\n\n        lld1.addLast("front");\n        lld1.addLast("middle");\n        lld1.addLast("back");\n\n        lld2.addLast("front");\n        lld2.addLast("middle");\n        lld2.addLast("back");\n\n        assertThat(lld1).isEqualTo(lld2);\n    }\n')),(0,i.kt)("p",null,"If we run this code, we see that we fail the test, with the following message:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"expected: [front, middle, back]\nbut was : (non-equal instance of same class with same string representation)\n")),(0,i.kt)("p",null,"The issue is that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Truth")," library is using the ",(0,i.kt)("inlineCode",{parentName:"p"},"equals")," method of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," class. The default implementation is given by the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/openjdk/jdk17/blob/master/src/java.base/share/classes/java/lang/Object.java#L162"},"code below"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"    public boolean equals(Object obj) {\n        return (this == obj);\n    }\n")),(0,i.kt)("p",null,"That is, the equals method simply checks to see if the addresses of the two objects are the same. We want to be able to check whether the two ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," objects are equal in terms of elements and order so therefore we need a different ",(0,i.kt)("inlineCode",{parentName:"p"},"equals")," method."),(0,i.kt)("p",null,"Override the equals method in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," classes. For guidance on writing an ",(0,i.kt)("inlineCode",{parentName:"p"},"equals")," method, see the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.google.com/presentation/d/1lIR4--P9NrBqRL9xqP_RQYyK1WJBrBEbriLVpatrRqk/edit#slide=id.g4f922fa56b_2_47"},"lecture slides")," or the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Berkeley-CS61B/lectureCode-sp23/blob/main/lec12_inheritance4/ArraySet.java"},"lecture code repository"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"Note: You might ask why we're implementing the same method in two classes rather than providing a ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," method in\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," interface. Interfaces are not allowed to provide ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," methods that override ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")," methods. For more\nsee ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/24595266/why-is-it-not-allowed-add-tostring-to-interface-as-default-method"},"https://stackoverflow.com/questions/24595266/why-is-it-not-allowed-add-tostring-to-interface-as-default-method"),"."),(0,i.kt)("p",{parentName:"blockquote"},"However, one workaround for this is to provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),", non-",(0,i.kt)("inlineCode",{parentName:"p"},"Object")," helper method in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," interface and have the implementing classes call it.")),(0,i.kt)("p",{parentName:"admonition"},"{: .task}\nOverride the ",(0,i.kt)("inlineCode",{parentName:"p"},"equals()")," method in the ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B")," classes.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Important: You should not use ",(0,i.kt)("inlineCode",{parentName:"p"},"getClass"),", and there's no need to do any casting in your ",(0,i.kt)("inlineCode",{parentName:"p"},"equals")," method. That is, you shouldn't be doing ",(0,i.kt)("inlineCode",{parentName:"p"},"(ArrayDeque61B) o"),". Such ",(0,i.kt)("inlineCode",{parentName:"p"},"equals")," methods are old fashioned and overly complex. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"instanceof")," instead."),(0,i.kt)("p",{parentName:"blockquote"},"Note: The ",(0,i.kt)("inlineCode",{parentName:"p"},"instanceof")," operator behaves a little strangely with generic types, for reasons beyond the scope of this course. For example, if you want to check if ",(0,i.kt)("inlineCode",{parentName:"p"},"lst")," is an instance of a ",(0,i.kt)("inlineCode",{parentName:"p"},"List<Integer>"),", you should use ",(0,i.kt)("inlineCode",{parentName:"p"},"lst instanceof List<?>")," rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"lst instanceof List<Integer>"),". Unfortunately, this is not able to check the types of the elements, but it's the best we can do.")),(0,i.kt)("admonition",{type:"danger"}),(0,i.kt)("p",null,"Important: Make sure you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Override")," tag when overriding methods. A common mistake in student code is to try to override ",(0,i.kt)("inlineCode",{parentName:"p"},"equals(ArrayList<T> other)")," rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"equals(Object other)"),". Using the optional ",(0,i.kt)("inlineCode",{parentName:"p"},"@Override")," tag will prevent your code from compiling if you make this mistake. ",(0,i.kt)("inlineCode",{parentName:"p"},"@Override")," is  a great safety net."),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"You are not allowed to call ",(0,i.kt)("inlineCode",{parentName:"p"},"toList")," here."),(0,i.kt)("h4",{parentName:"admonition",id:"tostring"},(0,i.kt)("inlineCode",{parentName:"h4"},"toString()")),(0,i.kt)("p",{parentName:"admonition"},"Consider the code below, which prints out a ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B"),"."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'Deque61B<String> lld1 = new LinkedListDeque61B<>();\n\nlld1.addLast("front");\nlld1.addLast("middle");\nlld1.addLast("back");\n\nSystem.out.println(lld1);\n')),(0,i.kt)("p",{parentName:"admonition"},"This code outputs something like ",(0,i.kt)("inlineCode",{parentName:"p"},"deque.proj1a.LinkedListDeque61B@1a04f701"),". This is because the print statement implicitly calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," ",(0,i.kt)("inlineCode",{parentName:"p"},"toString")," method. Since you didn't override this method, it uses the default, which is given by the code below (you don't need to understand how this code works)."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    public String toString() {\n        return getClass().getName() + "@" + Integer.toHexString(hashCode());\n    }\n')),(0,i.kt)("p",{parentName:"admonition"},"In turn the ",(0,i.kt)("inlineCode",{parentName:"p"},"hashCode")," method, which you have also not overridden, simply returns the address of the object, which in the example above was ",(0,i.kt)("inlineCode",{parentName:"p"},"1a04f701"),"."),(0,i.kt)("p",{parentName:"admonition"},"{: .task}\n",(0,i.kt)("strong",{parentName:"p"},"Task"),": Override the ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," method in the ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B")," classes, such that the code above prints out ",(0,i.kt)("inlineCode",{parentName:"p"},"[front, middle, back]"),".")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Hint: Java's implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," interface has a ",(0,i.kt)("inlineCode",{parentName:"p"},"toString")," method."),(0,i.kt)("p",{parentName:"blockquote"},"Hint: There is a one line solution (see hint 1)."),(0,i.kt)("p",{parentName:"blockquote"},"Hint: Your implementation for ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B")," should be exactly the same.")),(0,i.kt)("h4",{id:"testing-the-object-methods"},"Testing The Object Methods"),(0,i.kt)("p",null,"We haven't provided you with test files for these three object methods; however, we strongly encourage you to use the\ntechniques you learned from projects 1A and 1B to write your own tests. You can structure these tests however you'd like,\nsince we won't be testing them. One possible (and suggested) structure is to create two new files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"tests")," directory\ncalled ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61BTest")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61BTest"),", similar to the ones we gave you in 1A and 1B."),(0,i.kt)("h2",{id:"maxarraydeque61b"},"MaxArrayDeque61B"),(0,i.kt)("p",null,"After you've fully implemented your ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B")," and tested its correctness, you will now build the ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxArrayDeque61B"),".\n",(0,i.kt)("strong",{parentName:"p"},"A ",(0,i.kt)("inlineCode",{parentName:"strong"},"MaxArrayDeque61B")," has all the methods that an ",(0,i.kt)("inlineCode",{parentName:"strong"},"ArrayDeque61B")," has"),", but it also has 2 additional methods and a new\nconstructor:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public MaxArrayDeque61B(Comparator<T> c)"),": creates a ",(0,i.kt)("inlineCode",{parentName:"li"},"MaxArrayDeque61B")," with the given ",(0,i.kt)("inlineCode",{parentName:"li"},"Comparator"),". (You may import ",(0,i.kt)("inlineCode",{parentName:"li"},"java.util.Comparator")," for this.)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public T max()"),": returns the maximum element in the deque as governed by the previously given ",(0,i.kt)("inlineCode",{parentName:"li"},"Comparator"),". If\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"MaxArrayDeque61B")," is empty, simply return\n",(0,i.kt)("inlineCode",{parentName:"li"},"null"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public T max(Comparator<T> c)"),": returns the maximum element in the deque as governed by the parameter ",(0,i.kt)("inlineCode",{parentName:"li"},"Comparator c"),".\nIf the ",(0,i.kt)("inlineCode",{parentName:"li"},"MaxArrayDeque61B")," is empty, simply return ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxArrayDeque61B")," can either tell you the max element in itself by using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Comparator<T>")," given to it in the constructor, or an arbitrary ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparator<T>"),"\nthat is different from the one given in the constructor."),(0,i.kt)("p",null,"We do not care about the ",(0,i.kt)("inlineCode",{parentName:"p"},"equals(Object o)")," method of this class, so feel free to define it however you think is most\nappropriate. We will not test this method."),(0,i.kt)("p",null,"For testing, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparator.naturalOrder()")," in your own test files. This ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparator")," is using ",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#naturalOrder--"},"naturalOrder()"),".\nIf your generic type is ",(0,i.kt)("inlineCode",{parentName:"p"},"Integer"),", you can create your ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxArrayDeque61B")," using the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"MaxArrayDeque61B<Integer> m = new MaxArrayDeque61B<Integer>(Comparator.naturalOrder());\n")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"If you find yourself starting off by copying your entire ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B"),"\nimplementation in a ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxArrayDeque61B")," file, then you're ",(0,i.kt)("strong",{parentName:"p"},"not doing this assignment in the intended manner"),". This is an exercise in clean code, and redundancy\nis one our worst enemies when battling complexity! For a hint, re-read the second sentence of this section above.")),(0,i.kt)("p",{parentName:"admonition"},"{: .task}\n",(0,i.kt)("strong",{parentName:"p"},"Task"),": Fill out the ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxArrayDeque61B.java")," file according to the API above."),(0,i.kt)("p",{parentName:"admonition"},"There are no runtime requirements on these additional methods, we only care about the correctness of your answer.\nSometimes, there might be multiple elements in the ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxArrayDeque61B")," that are all equal and hence all the max: in in this\ncase, you can return any of them and they will be considered correct."),(0,i.kt)("p",{parentName:"admonition"},"You should write tests for this part as well! You'll\nlikely be creating multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparator<T>")," classes to test your code:\nthis is the point! To get practice using ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparator")," objects to do something useful (find the maximum element) and to\nget practice writing your own\n",(0,i.kt)("inlineCode",{parentName:"p"},"Comparator")," classes. You will not be turning in these tests, but we still highly suggest making them for your sake."),(0,i.kt)("p",{parentName:"admonition"},"You will not use the ",(0,i.kt)("inlineCode",{parentName:"p"},"MaxArrayDeque61B")," you made for the next part; it'll be in an isolated exercise."),(0,i.kt)("h2",{parentName:"admonition",id:"guitar-hero"},"Guitar Hero"),(0,i.kt)("p",{parentName:"admonition"},"In this part of the project, we will create another package for generating synthesized musical instruments using\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"deque")," package we just made. We'll get the opportunity to use our data structure for implementing an algorithm that\nallows us to simulate the plucking of a guitar string."),(0,i.kt)("h3",{parentName:"admonition",id:"the-gh2-package"},"The GH2 Package"),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"gh2")," package has just one primary component that you will edit:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GuitarString"),", a class which uses an ",(0,i.kt)("inlineCode",{parentName:"li"},"Deque61B<Double>")," to implement the\n",(0,i.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Karplus%E2%80%93Strong_string_synthesis"},"Karplus-Strong algorithm"),"\nto synthesize a guitar string sound.")),(0,i.kt)("p",{parentName:"admonition"},"We've provided you with skeleton code for ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarString")," which is where you will use your ",(0,i.kt)("inlineCode",{parentName:"p"},"deque")," package that you made\nin the first part of this project."),(0,i.kt)("h3",{parentName:"admonition",id:"guitarstring"},(0,i.kt)("inlineCode",{parentName:"h3"},"GuitarString")),(0,i.kt)("p",{parentName:"admonition"},"We want to finish the ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarString")," file, which should use the ",(0,i.kt)("inlineCode",{parentName:"p"},"deque"),' package to replicate the sound of a plucked\nstring. Note that this file uses the word "buffer", which is a synonym for "deque" in this context.'),(0,i.kt)("p",{parentName:"admonition"},"We'll be using the Karplus-Strong algorithm, which is quite easy to implement with a ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B"),". It is simply the following three steps:"),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},"Replace every item in a ",(0,i.kt)("inlineCode",{parentName:"li"},"Deque61B")," with random noise (",(0,i.kt)("inlineCode",{parentName:"li"},"double")," values between -0.5 and 0.5)."),(0,i.kt)("li",{parentName:"ol"},"Play the ",(0,i.kt)("inlineCode",{parentName:"li"},"double")," at the front of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Deque61B"),"."),(0,i.kt)("li",{parentName:"ol"},"Remove the front ",(0,i.kt)("inlineCode",{parentName:"li"},"double")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"Deque61B")," and average it with the next ",(0,i.kt)("inlineCode",{parentName:"li"},"double")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"Deque61B")," (hint: use ",(0,i.kt)("inlineCode",{parentName:"li"},"removeFirst)"),"\nand ",(0,i.kt)("inlineCode",{parentName:"li"},"get()"),") multiplied by an energy decay factor of 0.996 (we'll call this entire quantity\n",(0,i.kt)("inlineCode",{parentName:"li"},"newDouble"),"). Then, add ",(0,i.kt)("inlineCode",{parentName:"li"},"newDouble")," to the back of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Deque61B"),". Go back to step 2 (and repeat forever).")),(0,i.kt)("p",{parentName:"admonition"},"Or visually, if the ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," is as shown on the top, we'd play the 0.2, remove it, combine it with the 0.4 to form 0.2988, and add the\n0.2988."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{alt:"karplus-strong",src:n(20554).Z,width:"636",height:"195"})),(0,i.kt)("p",{parentName:"admonition"},"You can play a ",(0,i.kt)("inlineCode",{parentName:"p"},"double")," value with the ",(0,i.kt)("inlineCode",{parentName:"p"},"StdAudio.play")," method. For example\n",(0,i.kt)("inlineCode",{parentName:"p"},"StdAudio.play(0.333)")," will tell the diaphragm of your speaker to extend itself to 1/3rd of its total\nreach, ",(0,i.kt)("inlineCode",{parentName:"p"},"StdAudio.play(-0.9)")," will tell it to stretch its little heart backwards almost as far as it can reach. Movement\nof the speaker diaphragm displaces air, and if you displace air in nice patterns, these disruptions will be interpreted\nby your consciousness as pleasing thanks to billions of years of evolution.\nSee ",(0,i.kt)("a",{parentName:"p",href:"http://electronics.howstuffworks.com/speaker6.htm"},"this page")," for more. If you simply do ",(0,i.kt)("inlineCode",{parentName:"p"},"StdAudio.play(0.9)")," and\nnever play anything again, the diaphragm shown in the image would just be sitting still 9/10ths of the way forwards."),(0,i.kt)("p",{parentName:"admonition"},"Complete ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarString.java")," so that it implements the Karplus-Strong algorithm. Note that you will\nhave to fill your ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," buffer with zeros in the ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarString")," constructor. Part of the process will be handled by the client of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarString")," class. You are only required to complete the tasks labeled with ",(0,i.kt)("inlineCode",{parentName:"p"},"TODO"),".")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Do not call ",(0,i.kt)("inlineCode",{parentName:"p"},"StdAudio.play")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarString.java"),". This will cause the\nautograder to break. ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarPlayer.java")," does this for you already.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Make sure to add the libraries, as usual, otherwise IntelliJ won't be able to find ",(0,i.kt)("inlineCode",{parentName:"p"},"StdAudio"),"."),(0,i.kt)("p",{parentName:"admonition"},"For example, the provided ",(0,i.kt)("inlineCode",{parentName:"p"},"TestGuitarString")," class provides a sample test\n",(0,i.kt)("inlineCode",{parentName:"p"},"testPluckTheAString")," that attempts to play an A-note on a guitar string. If you run the test should hear an A-note when\nyou run this test. If you don't, you should try the\n",(0,i.kt)("inlineCode",{parentName:"p"},"testTic")," method and debug from there. Consider adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"print")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"toString"),"\nmethod to ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarString.java")," that will help you see what's going on between tics."),(0,i.kt)("p",{parentName:"admonition"},"Note: we've said ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," here, but not specified which ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," implementation to use. That is because we only need those\noperations ",(0,i.kt)("inlineCode",{parentName:"p"},"addLast"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"removeFirst"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," and we know that classes that implement ",(0,i.kt)("inlineCode",{parentName:"p"},"Deque61B")," have them. So you are\nfree to choose either the ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedListDeque61B")," for the actual implementation, or the ",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayDeque61B"),". For an optional (but\nhighly suggested) exercise, think about the tradeoffs with using one vs the other and discuss with your friends what you\nthink the better choice is, or if they're both equally fine choices."),(0,i.kt)("h3",{parentName:"admonition",id:"why-it-works"},"Why It Works"),(0,i.kt)("p",{parentName:"admonition"},"The two primary components that make the Karplus-Strong algorithm work are the ring buffer feedback mechanism and the\naveraging operation."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"The ring buffer feedback mechanism"),". The ring buffer models the medium (a string tied down at both ends) in which\nthe energy travels back and forth. The length of the ring buffer determines the fundamental frequency of the resulting\nsound. Sonically, the feedback mechanism reinforces only the fundamental frequency and its harmonics (frequencies at\ninteger multiples of the fundamental). The energy decay factor (.996 in this case) models the slight dissipation in\nenergy as the wave makes a round trip through the string."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"The averaging operation"),". The averaging operation serves as a gentle low-pass filter (which removes higher\nfrequencies while allowing lower frequencies to pass, hence the name). Because it is in the path of the feedback, this\nhas the effect of gradually attenuating the higher harmonics while keeping the lower ones, which corresponds closely\nwith how a plucked guitar string sounds.")),(0,i.kt)("h3",{parentName:"admonition",id:"guitarherolite"},(0,i.kt)("inlineCode",{parentName:"h3"},"GuitarHeroLite")),(0,i.kt)("p",{parentName:"admonition"},"You should now also be able to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarHeroLite")," class. Running it will provide a graphical interface, allowing\nthe user (you!) to interactively play sounds using the ",(0,i.kt)("inlineCode",{parentName:"p"},"gh2")," package's ",(0,i.kt)("inlineCode",{parentName:"p"},"GuitarString")," class."),(0,i.kt)("h3",{parentName:"admonition",id:"submission"},"Submission"),(0,i.kt)("p",{parentName:"admonition"},"To submit the project, add and commit your files, then push to your remote repository. Then, go to the relevant\nassignment on Gradescope and submit there."),(0,i.kt)("p",{parentName:"admonition"},"The autograder for this assignment will have the following velocity limiting scheme:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"From the release of the project to the due date, you will have 4 tokens; each of\nthese tokens will refresh every 24 hours.")),(0,i.kt)("h3",{parentName:"admonition",id:"scoring"},"Scoring"),(0,i.kt)("p",{parentName:"admonition"},"This project, similar to Project 0, is divided into individual components, each\nof which you must implement ",(0,i.kt)("em",{parentName:"p"},"completely correctly")," to receive credit."),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"LinkedListDeque61B")," Object Methods (20%)"),": Correctly implement ",(0,i.kt)("inlineCode",{parentName:"li"},"iterator"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"equals"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"toString")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"LinkedListDeque61B"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ArrayDeque61B")," Object Methods (20%)"),": Correctly implement ",(0,i.kt)("inlineCode",{parentName:"li"},"iterator"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"equals"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"toString")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"ArrayDeque61B"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"MaxArrayDeque61B")," Functionality (5%)"),": Ensure your ",(0,i.kt)("inlineCode",{parentName:"li"},"MaxArrayDeque61B")," correctly runs all the methods in the ",(0,i.kt)("inlineCode",{parentName:"li"},"Deque61B")," interface."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"MaxArrayDeque61B")," Max (35%)"),": Correctly implement ",(0,i.kt)("inlineCode",{parentName:"li"},"max")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"MaxArrayDeque61B"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GuitarString")," (20%)"),": Correctly implement the ",(0,i.kt)("inlineCode",{parentName:"li"},"GuitarString")," client class.")),(0,i.kt)("p",{parentName:"admonition"},"In total, Project 1c is worth 10 points."),(0,i.kt)("h3",{parentName:"admonition",id:"credits"},"Credits"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Ring buffer figures from ",(0,i.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Circular_buffer"},"Wikipedia"),"."),(0,i.kt)("li",{parentName:"ul"},"This assignment adapted from\n",(0,i.kt)("a",{parentName:"li",href:"http://nifty.stanford.edu/2012/wayne-guitar-heroine/"},"Kevin Wayne's Guitar Heroine")," assignment."))))}u.isMDXComponent=!0},20554:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/karplus-strong-5f2dff4c0cab1767dc0a3cc6e8035379.png"}}]);