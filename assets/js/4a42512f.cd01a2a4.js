"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[76250],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(n),d=o,m=h["".concat(l,".").concat(d)]||h[d]||c[d]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49029:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={title:"09-dictionaries"},i="Dictionaries",s={unversionedId:"curriculum-resource/py4e/book/09",id:"curriculum-resource/py4e/book/09",title:"09-dictionaries",description:"A dictionary is like a list, but more general. In a list,",source:"@site/docs/curriculum-resource/py4e/book/09.md",sourceDirName:"curriculum-resource/py4e/book",slug:"/curriculum-resource/py4e/book/09",permalink:"/docs/curriculum-resource/py4e/book/09",draft:!1,tags:[],version:"current",frontMatter:{title:"09-dictionaries"},sidebar:"tutorialSidebar",previous:{title:"08-list",permalink:"/docs/curriculum-resource/py4e/book/08"},next:{title:"10-tuples",permalink:"/docs/curriculum-resource/py4e/book/10"}},l={},p=[{value:"Dictionary as a set of counters",id:"dictionary-as-a-set-of-counters",level:2},{value:"Dictionaries and files",id:"dictionaries-and-files",level:2},{value:"Looping and dictionaries",id:"looping-and-dictionaries",level:2},{value:"Advanced text parsing",id:"advanced-text-parsing",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Exercises",id:"exercises",level:2}],u={toc:p},h="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dictionaries"},"Dictionaries"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"dictionary")," is like a list, but more general. In a list,\nthe index positions have to be integers; in a dictionary, the indices\ncan be (almost) any type."),(0,o.kt)("p",null,"You can think of a dictionary as a mapping between a set of indices\n(which are called ",(0,o.kt)("em",{parentName:"p"},"keys"),") and a set of values. Each key maps to a\nvalue. The association of a key and a value is called a ",(0,o.kt)("em",{parentName:"p"},"key-value"),"\n",(0,o.kt)("em",{parentName:"p"},"pair")," or sometimes an ",(0,o.kt)("em",{parentName:"p"},"item"),"."),(0,o.kt)("p",null,"As an example, we\u2019ll build a dictionary that maps from English to\nSpanish words, so the keys and the values are all strings."),(0,o.kt)("p",null,"The function ",(0,o.kt)("inlineCode",{parentName:"p"},"dict")," creates a new dictionary with no\nitems. Because ",(0,o.kt)("inlineCode",{parentName:"p"},"dict")," is the name of a built-in function, you\nshould avoid using it as a variable name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> eng2sp = dict()\n>>> print(eng2sp)\n{}\n")),(0,o.kt)("p",null,"The curly brackets, ",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),", represent an empty dictionary.\nTo add items to the dictionary, you can use square brackets:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> eng2sp['one'] = 'uno'\n")),(0,o.kt)("p",null,"This line creates an item that maps from the key ",(0,o.kt)("inlineCode",{parentName:"p"},"'one'"),"\nto the value \u201cuno\u201d. If we print the dictionary again, we see a key-value\npair with a colon between the key and value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print(eng2sp)\n{'one': 'uno'}\n")),(0,o.kt)("p",null,"This output format is also an input format. For example, you can\ncreate a new dictionary with three items."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> eng2sp = {'one': 'uno', 'two': 'dos', 'three': 'tres'}\n>>> print(eng2sp)\n{'one': 'uno', 'two': 'dos', 'three': 'tres'}\n")),(0,o.kt)("p",null,"Since Python 3.7x the order of key-value pairs is the same as their\ninput order, i.e.\xa0dictionaries are now ordered structures."),(0,o.kt)("p",null,"But that doesn\u2019t really matter because the elements of a dictionary\nare never indexed with integer indices. Instead, you use the keys to\nlook up the corresponding values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print(eng2sp['two'])\n'dos'\n")),(0,o.kt)("p",null,"The key ",(0,o.kt)("inlineCode",{parentName:"p"},"'two'")," always maps to the value \u201cdos\u201d so the\norder of the items doesn\u2019t matter."),(0,o.kt)("p",null,"If the key isn\u2019t in the dictionary, you get an exception:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print(eng2sp['four'])\nKeyError: 'four'\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"len")," function works on dictionaries; it returns the\nnumber of key-value pairs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> len(eng2sp)\n3\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"in")," operator works on dictionaries; it tells you\nwhether something appears as a ",(0,o.kt)("em",{parentName:"p"},"key")," in the dictionary (appearing\nas a value is not good enough)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> 'one' in eng2sp\nTrue\n>>> 'uno' in eng2sp\nFalse\n")),(0,o.kt)("p",null,"To see whether something appears as a value in a dictionary, you can\nuse the method ",(0,o.kt)("inlineCode",{parentName:"p"},"values"),", which returns the values as a type\nthat can be converted to a list, and then use the ",(0,o.kt)("inlineCode",{parentName:"p"},"in"),"\noperator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> vals = list(eng2sp.values())\n>>> 'uno' in vals\nTrue\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"in")," operator uses different algorithms for lists and\ndictionaries. For lists, it uses a linear search algorithm. As the list\ngets longer, the search time gets longer in direct proportion to the\nlength of the list. For dictionaries, Python uses an algorithm called a\n",(0,o.kt)("em",{parentName:"p"},"hash table")," that has a remarkable property: the ",(0,o.kt)("inlineCode",{parentName:"p"},"in"),"\noperator takes about the same amount of time no matter how many items\nthere are in a dictionary. I won\u2019t explain why hash functions are so\nmagical, but you can read more about it at ",(0,o.kt)("a",{parentName:"p",href:"https://wikipedia.org/wiki/Hash_table"},"wikipedia.org/wiki/Hash","_","table"),". ",(0,o.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/09-dictionaries#fn1"},"1")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 1:")," Download a copy of the file"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.py4e.com/code3/words.txt"},"www.py4e.com/code3/words.txt")),(0,o.kt)("p",null,"Write a program that reads the words in ",(0,o.kt)("em",{parentName:"p"},"words.txt")," and stores\nthem as keys in a dictionary. It doesn\u2019t matter what the values are.\nThen you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"in")," operator as a fast way to check\nwhether a string is in the dictionary."),(0,o.kt)("h2",{id:"dictionary-as-a-set-of-counters"},"Dictionary as a set of counters"),(0,o.kt)("p",null,"Suppose you are given a string and you want to count how many times\neach letter appears. There are several ways you could do it:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"You could create 26 variables, one for each letter of the\nalphabet. Then you could traverse the string and, for each character,\nincrement the corresponding counter, probably using a chained\nconditional.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"You could create a list with 26 elements. Then you could convert\neach character to a number (using the built-in function\n",(0,o.kt)("inlineCode",{parentName:"p"},"ord"),"), use the number as an index into the list, and\nincrement the appropriate counter.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"You could create a dictionary with characters as keys and\ncounters as the corresponding values. The first time you see a\ncharacter, you would add an item to the dictionary. After that you would\nincrement the value of an existing item."))),(0,o.kt)("p",null,"Each of these options performs the same computation, but each of them\nimplements that computation in a different way."),(0,o.kt)("p",null,"An ",(0,o.kt)("em",{parentName:"p"},"implementation")," is a way of performing a computation; some\nimplementations are better than others. For example, an advantage of the\ndictionary implementation is that we don\u2019t have to know ahead of time\nwhich letters appear in the string and we only have to make room for the\nletters that do appear."),(0,o.kt)("p",null,"Here is what the code might look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"word = 'brontosaurus'\nd = dict()\nfor c in word:\n    if c not in d:\n        d[c] = 1\n    else:\n        d[c] = d[c] + 1\nprint(d)\n")),(0,o.kt)("p",null,"We are effectively computing a ",(0,o.kt)("em",{parentName:"p"},"histogram"),", which is a\nstatistical term for a set of counters (or frequencies)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop traverses the string. Each time through the\nloop, if the character ",(0,o.kt)("inlineCode",{parentName:"p"},"c")," is not in the dictionary, we\ncreate a new item with key ",(0,o.kt)("inlineCode",{parentName:"p"},"c")," and the initial value 1 (since\nwe have seen this letter once). If ",(0,o.kt)("inlineCode",{parentName:"p"},"c")," is already in the\ndictionary we increment ",(0,o.kt)("inlineCode",{parentName:"p"},"d['c']"),"."),(0,o.kt)("p",null,"Here\u2019s the output of the program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{'b': 1, 'r': 2, 'o': 2, 'n': 1, 't': 1, 's': 2, 'a': 1, 'u': 2}\n")),(0,o.kt)("p",null,"The histogram indicates that the letters \u201ca\u201d and \u201cb\u201d appear once; \u201co\u201d\nappears twice, and so on."),(0,o.kt)("p",null,"Dictionaries have a method called ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," that takes a key\nand a default value. If the key appears in the dictionary,\n",(0,o.kt)("inlineCode",{parentName:"p"},"get")," returns the corresponding value; otherwise it returns\nthe default value. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}\n>>> print(counts.get('jan', 0))\n100\n>>> print(counts.get('tim', 0))\n0\n")),(0,o.kt)("p",null,"We can use ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," to write our histogram loop more\nconcisely. Because the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method automatically handles the\ncase where a key is not in a dictionary, we can reduce four lines down\nto one and eliminate the ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statement."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"word = 'brontosaurus'\nd = dict()\nfor c in word:\n    d[c] = d.get(c,0) + 1\nprint(d)\n")),(0,o.kt)("p",null,"The use of the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method to simplify this counting loop\nends up being a very commonly used \u201cidiom\u201d in Python and we will use it\nmany times in the rest of the book. So you should take a moment and\ncompare the loop using the ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," statement and ",(0,o.kt)("inlineCode",{parentName:"p"},"in"),"\noperator with the loop using the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method. They do\nexactly the same thing, but one is more succinct."),(0,o.kt)("h2",{id:"dictionaries-and-files"},"Dictionaries and files"),(0,o.kt)("p",null,"One of the common uses of a dictionary is to count the occurrence of\nwords in a file with some written text. Let\u2019s start with a very simple\nfile of words taken from the text of ",(0,o.kt)("em",{parentName:"p"},"Romeo and Juliet"),"."),(0,o.kt)("p",null,"For the first set of examples, we will use a shortened and simplified\nversion of the text with no punctuation. Later we will work with the\ntext of the scene with punctuation included."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"But soft what light through yonder window breaks\nIt is the east and Juliet is the sun\nArise fair sun and kill the envious moon\nWho is already sick and pale with grief\n")),(0,o.kt)("p",null,"We will write a Python program to read through the lines of the file,\nbreak each line into a list of words, and then loop through each of the\nwords in the line and count each word using a dictionary."),(0,o.kt)("p",null,"You will see that we have two ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loops. The outer loop\nis reading the lines of the file and the inner loop is iterating through\neach of the words on that particular line. This is an example of a\npattern called ",(0,o.kt)("em",{parentName:"p"},"nested loops")," because one of the loops is the\n",(0,o.kt)("em",{parentName:"p"},"outer")," loop and the other loop is the ",(0,o.kt)("em",{parentName:"p"},"inner")," loop."),(0,o.kt)("p",null,"Because the inner loop executes all of its iterations each time the\nouter loop makes a single iteration, we think of the inner loop as\niterating \u201cmore quickly\u201d and the outer loop as iterating more\nslowly."),(0,o.kt)("p",null,"The combination of the two nested loops ensures that we will count\nevery word on every line of the input file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"fname = input('Enter the file name: ')\ntry:\n    fhand = open(fname)\nexcept:\n    print('File cannot be opened:', fname)\n    exit()\n\ncounts = dict()\nfor line in fhand:\n    words = line.split()\n    for word in words:\n        if word not in counts:\n            counts[word] = 1\n        else:\n            counts[word] += 1\n\nprint(counts)\n\n# Code: https://www.py4e.com/code3/count1.py\n")),(0,o.kt)("p",null,"In our ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," statement, we use the more compact\nalternative for incrementing a variable. ",(0,o.kt)("inlineCode",{parentName:"p"},"counts[word] += 1"),"\nis equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"counts[word] = counts[word] + 1"),". Either\nmethod can be used to change the value of a variable by any desired\namount. Similar alternatives exist for ",(0,o.kt)("inlineCode",{parentName:"p"},"-="),", ",(0,o.kt)("inlineCode",{parentName:"p"},"*="),",\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"/="),"."),(0,o.kt)("p",null,"When we run the program, we see a raw dump of all of the counts in\nunsorted hash order. (the ",(0,o.kt)("em",{parentName:"p"},"romeo.txt")," file is available at ",(0,o.kt)("a",{parentName:"p",href:"https://www.py4e.com/code3/romeo.txt"},"www.py4e.com/code3/romeo.txt"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python count1.py\nEnter the file name: romeo.txt\n{'But': 1, 'soft': 1, 'what': 1, 'light': 1, 'through': 1, 'yonder': 1,\n'window': 1, 'breaks': 1, 'It': 1, 'is': 3, 'the': 3, 'east': 1, 'and': 3,\n'Juliet': 1, 'sun': 2, 'Arise': 1, 'fair': 1, 'kill': 1, 'envious': 1,\n'moon': 1, 'Who': 1, 'already': 1, 'sick': 1, 'pale': 1, 'with': 1,\n'grief': 1}\n")),(0,o.kt)("p",null,"It is a bit inconvenient to look through the dictionary to find the\nmost common words and their counts, so we need to add some more Python\ncode to get us the output that will be more helpful."),(0,o.kt)("h2",{id:"looping-and-dictionaries"},"Looping and dictionaries"),(0,o.kt)("p",null,"If you use a dictionary as the sequence in a ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),"\nstatement, it traverses the keys of the dictionary. This loop prints\neach key and the corresponding value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}\nfor key in counts:\n    print(key, counts[key])\n")),(0,o.kt)("p",null,"Here\u2019s what the output looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chuck 1\nannie 42\njan 100\n")),(0,o.kt)("p",null,"Again, the keys are ordered."),(0,o.kt)("p",null,"We can use this pattern to implement the various loop idioms that we\nhave described earlier. For example if we wanted to find all the entries\nin a dictionary with a value above ten, we could write the following\ncode:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}\nfor key in counts:\n    if counts[key] > 10 :\n        print(key, counts[key])\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop iterates through the ",(0,o.kt)("em",{parentName:"p"},"keys")," of the\ndictionary, so we must use the index operator to retrieve the\ncorresponding ",(0,o.kt)("em",{parentName:"p"},"value")," for each key. Here\u2019s what the output looks\nlike:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"annie 42\njan 100\n")),(0,o.kt)("p",null,"We see only the entries with a value above 10."),(0,o.kt)("p",null,"If you want to print the keys in alphabetical order, you first make a\nlist of the keys in the dictionary using the ",(0,o.kt)("inlineCode",{parentName:"p"},"keys")," method\navailable in dictionary objects, and then sort that list and loop\nthrough the sorted list, looking up each key and printing out key-value\npairs in sorted order as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}\nlst = list(counts.keys())\nprint(lst)\nlst.sort()\nprint(lst)\nfor key in lst:\n    print(key, counts[key])\n")),(0,o.kt)("p",null,"Here\u2019s what the output looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"['chuck', 'annie', 'jan']\n['annie', 'chuck', 'jan']\nannie 42\nchuck 1\njan 100\n")),(0,o.kt)("p",null,"First you see the list of keys in non-alphabetical order that we get\nfrom the ",(0,o.kt)("inlineCode",{parentName:"p"},"keys")," method. Then we see the key-value pairs in\nalphabetical order from the ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop."),(0,o.kt)("h2",{id:"advanced-text-parsing"},"Advanced text parsing"),(0,o.kt)("p",null,"In the above example using the file ",(0,o.kt)("em",{parentName:"p"},"romeo.txt"),", we made the\nfile as simple as possible by removing all punctuation by hand. The\nactual text has lots of punctuation, as shown below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"But, soft! what light through yonder window breaks?\nIt is the east, and Juliet is the sun.\nArise, fair sun, and kill the envious moon,\nWho is already sick and pale with grief,\n")),(0,o.kt)("p",null,"Since the Python ",(0,o.kt)("inlineCode",{parentName:"p"},"split")," function looks for spaces and\ntreats words as tokens separated by spaces, we would treat the words\n\u201csoft!\u201d and \u201csoft\u201d as ",(0,o.kt)("em",{parentName:"p"},"different")," words and create a separate\ndictionary entry for each word."),(0,o.kt)("p",null,"Also since the file has capitalization, we would treat \u201cwho\u201d and\n\u201cWho\u201d as different words with different counts."),(0,o.kt)("p",null,"We can solve both these problems by using the string methods\n",(0,o.kt)("inlineCode",{parentName:"p"},"lower"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"punctuation"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"translate"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"translate")," is the most subtle of\nthe methods. Here is the documentation for ",(0,o.kt)("inlineCode",{parentName:"p"},"translate"),":"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"line.translate(str.maketrans(fromstr, tostr, deletestr))")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Replace the characters in ",(0,o.kt)("inlineCode",{parentName:"em"},"fromstr")," with the character"),"\n",(0,o.kt)("em",{parentName:"p"},"in the same position in ",(0,o.kt)("inlineCode",{parentName:"em"},"tostr")," and delete all characters"),"\n",(0,o.kt)("em",{parentName:"p"},"that are in ",(0,o.kt)("inlineCode",{parentName:"em"},"deletestr"),". The ",(0,o.kt)("inlineCode",{parentName:"em"},"fromstr")," and"),"\n",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"tostr")," can be empty strings and the ",(0,o.kt)("inlineCode",{parentName:"em"},"deletestr")),"\n",(0,o.kt)("em",{parentName:"p"},"parameter can be omitted.")),(0,o.kt)("p",null,"We will not specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"tostr")," but we will use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"deletestr")," parameter to delete all of the punctuation. We\nwill even let Python tell us the list of characters that it considers\n\u201cpunctuation\u201d:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> import string\n>>> string.punctuation\n'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n")),(0,o.kt)("p",null,"The parameters used by ",(0,o.kt)("inlineCode",{parentName:"p"},"translate")," were different in\nPython 2.0."),(0,o.kt)("p",null,"We make the following modifications to our program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"import string\n\nfname = input('Enter the file name: ')\ntry:\n    fhand = open(fname)\nexcept:\n    print('File cannot be opened:', fname)\n    exit()\n\ncounts = dict()\nfor line in fhand:\n    line = line.rstrip()\n    # First two parameters are empty strings\n    line = line.translate(line.maketrans(\"\", \"\", string.punctuation))\n    line = line.lower()\n    words = line.split()\n    for word in words:\n        if word not in counts:\n            counts[word] = 1\n        else:\n            counts[word] += 1\n\nprint(counts)\n\n# Code: https://www.py4e.com/code3/count2.py\n")),(0,o.kt)("p",null,"Part of learning the \u201cArt of Python\u201d or \u201cThinking Pythonically\u201d is\nrealizing that Python often has built-in capabilities for many common\ndata analysis problems. Over time, you will see enough example code and\nread enough of the documentation to know where to look to see if someone\nhas already written something that makes your job much easier."),(0,o.kt)("p",null,"The following is an abbreviated version of the output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter the file name: romeo-full.txt\n{'romeo': 40, 'and': 42, 'juliet': 32, 'act': 1, '2': 2, 'scene': 2,\n'ii': 1, 'capulets': 1, 'orchard': 2, 'enter': 1, 'he': 5, 'jests': 1,\n'at': 9, 'scars': 1, 'that': 30, 'never': 2, 'felt': 1, 'a': 24,\n'wound': 1, 'appears': 1, 'above': 6, 'window': 2, 'but': 18,\n'soft': 1, 'what': 11, 'light': 5, 'through': 2, 'yonder': 2,\n'breaks': 1, ...}\n")),(0,o.kt)("p",null,"Looking through this output is still unwieldy and we can use Python\nto give us exactly what we are looking for, but to do so, we need to\nlearn about Python ",(0,o.kt)("em",{parentName:"p"},"tuples"),". We will pick up this example once we\nlearn about tuples."),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"As you work with bigger datasets it can become unwieldy to debug by\nprinting and checking data by hand. Here are some suggestions for\ndebugging large datasets:"),(0,o.kt)("p",null,"Scale down the input"),(0,o.kt)("p",null,"If possible, reduce the size of the dataset. For example if the\nprogram reads a text file, start with just the first 10 lines, or with\nthe smallest example you can find. You can either edit the files\nthemselves, or (better) modify the program so it reads only the first\n",(0,o.kt)("inlineCode",{parentName:"p"},"n")," lines."),(0,o.kt)("p",null,"If there is an error, you can reduce ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," to the smallest\nvalue that manifests the error, and then increase it gradually as you\nfind and correct errors."),(0,o.kt)("p",null,"Check summaries and types"),(0,o.kt)("p",null,"Instead of printing and checking the entire dataset, consider\nprinting summaries of the data: for example, the number of items in a\ndictionary or the total of a list of numbers."),(0,o.kt)("p",null,"A common cause of runtime errors is a value that is not the right\ntype. For debugging this kind of error, it is often enough to print the\ntype of a value."),(0,o.kt)("p",null,"Write self-checks"),(0,o.kt)("p",null,"Sometimes you can write code to check for errors automatically. For\nexample, if you are computing the average of a list of numbers, you\ncould check that the result is not greater than the largest element in\nthe list or less than the smallest. This is called a \u201csanity check\u201d\nbecause it detects results that are \u201ccompletely illogical\u201d."),(0,o.kt)("p",null,"Another kind of check compares the results of two different\ncomputations to see if they are consistent. This is called a\n\u201cconsistency check\u201d."),(0,o.kt)("p",null,"Pretty print the output\nFormatting debugging output can make it easier to spot an error."),(0,o.kt)("p",null,"Again, time you spend building scaffolding can reduce the time you\nspend debugging."),(0,o.kt)("h2",{id:"glossary"},"Glossary"),(0,o.kt)("p",null,"dictionary\nA mapping from a set of keys to their corresponding values.\nhashtable\nThe algorithm used to implement Python dictionaries.\nhash function\nA function used by a hashtable to compute the location for a key.\nhistogram\nA set of counters.\nimplementation\nA way of performing a computation.\nitem\nAnother name for a key-value pair.\nkey\nAn object that appears in a dictionary as the first part of a key-value\npair.\nkey-value pair\nThe representation of the mapping from a key to a value.\nlookup\nA dictionary operation that takes a key and finds the corresponding\nvalue.\nnested loops\nWhen there are one or more loops \u201cinside\u201d of another loop. The inner\nloop runs to completion each time the outer loop runs once.\nvalue\nAn object that appears in a dictionary as the second part of a key-value\npair. This is more specific than our previous use of the word \u201cvalue\u201d."),(0,o.kt)("h2",{id:"exercises"},"Exercises"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 2:")," Write a program that categorizes each\nmail message by which day of the week the commit was done. To do this\nlook for lines that start with \u201cFrom\u201d, then look for the third word and\nkeep a running count of each of the days of the week. At the end of the\nprogram print out the contents of your dictionary (order does not\nmatter)."),(0,o.kt)("p",null,"Sample Line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n")),(0,o.kt)("p",null,"Sample Execution:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python dow.py\nEnter a file name: mbox-short.txt\n{'Fri': 20, 'Thu': 6, 'Sat': 1}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 3:")," Write a program to read through a mail\nlog, build a histogram using a dictionary to count how many messages\nhave come from each email address, and print the dictionary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter file name: mbox-short.txt\n{'gopal.ramasammycook@gmail.com': 1, 'louis@media.berkeley.edu': 3,\n'cwen@iupui.edu': 5, 'antranig@caret.cam.ac.uk': 1,\n'rjlowe@iupui.edu': 2, 'gsilver@umich.edu': 3,\n'david.horwitz@uct.ac.za': 4, 'wagnermr@iupui.edu': 1,\n'zqian@umich.edu': 4, 'stephen.marquard@uct.ac.za': 2,\n'ray@media.berkeley.edu': 1}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 4:")," Add code to the above program to figure\nout who has the most messages in the file. After all the data has been\nread and the dictionary has been created, look through the dictionary\nusing a maximum loop (see Chapter 5: Maximum and minimum loops) to find\nwho has the most messages and print how many messages the person\nhas."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter a file name: mbox-short.txt\ncwen@iupui.edu 5\n\nEnter a file name: mbox.txt\nzqian@umich.edu 195\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 5:")," This program records the domain name\n(instead of the address) where the message was sent from instead of who\nthe mail came from (i.e., the whole email address). At the end of the\nprogram, print out the contents of your dictionary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python schoolcount.py\nEnter a file name: mbox-short.txt\n{'media.berkeley.edu': 4, 'uct.ac.za': 6, 'umich.edu': 7,\n'gmail.com': 1, 'caret.cam.ac.uk': 1, 'iupui.edu': 8}\n")),(0,o.kt)("hr",null),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"If you do want to learn more about hash tables, there is\na course at ",(0,o.kt)("a",{parentName:"li",href:"https://www.cc4e.com"},"https://www.cc4e.com")," that explores how the programming\nlanguage C implements a Python dictionary. ",(0,o.kt)("a",{parentName:"li",href:"https://www.py4e.com/html3/09-dictionaries#fnref1"},"\u21a9\ufe0e"))),(0,o.kt)("hr",null),(0,o.kt)("p",null,"If you find a mistake in this book, feel free to send me a fix using\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/csev/py4e/tree/master/book3"},"Github"),"."))}c.isMDXComponent=!0}}]);