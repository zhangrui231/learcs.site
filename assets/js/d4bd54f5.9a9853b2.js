"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[3575],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},82739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),i=(n(67294),n(3905));const o={title:"Discussion 4 Tree Recursion"},a="Discussion 4 | CS 61A Spring 2024",s={unversionedId:"curriculum-resource/cs61a/dis/disc04",id:"curriculum-resource/cs61a/dis/disc04",title:"Discussion 4 Tree Recursion",description:"Discussion 4: Tree Recursion",source:"@site/docs/curriculum-resource/cs61a/dis/disc04.md",sourceDirName:"curriculum-resource/cs61a/dis",slug:"/curriculum-resource/cs61a/dis/disc04",permalink:"/docs/curriculum-resource/cs61a/dis/disc04",draft:!1,tags:[],version:"current",frontMatter:{title:"Discussion 4 Tree Recursion"},sidebar:"tutorialSidebar",previous:{title:"Discussion 3 Recursion",permalink:"/docs/curriculum-resource/cs61a/dis/disc03"},next:{title:"Discussion 5 Trees",permalink:"/docs/curriculum-resource/cs61a/dis/disc05"}},l={},u=[{value:"Discussion 4: Tree Recursion",id:"discussion-4-tree-recursion",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Tree Recursion",id:"tree-recursion",level:2},{value:"Q1: Insect Combinatorics",id:"q1-insect-combinatorics",level:3},{value:"Tree Recursion with Lists",id:"tree-recursion-with-lists",level:2},{value:"Q2: Max Product",id:"q2-max-product",level:3},{value:"Q3: Sum Fun",id:"q3-sum-fun",level:3},{value:"Document the Occasion",id:"document-the-occasion",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(c,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"discussion-4--cs-61a-spring-2024"},"Discussion 4 | CS 61A Spring 2024"),(0,i.kt)("h2",{id:"discussion-4-tree-recursion"},"Discussion 4: Tree Recursion"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{target:"_blank",href:n(87210).Z},"disc04.pdf"))),(0,i.kt)("p",null,"Pick someone in your group to ",(0,i.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/discord"},"join Discord"),". It's fine if multiple people join, but one is enough."),(0,i.kt)("p",null,"Now switch to Pensieve:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Everyone"),": Go to ",(0,i.kt)("a",{parentName:"li",href:"http://discuss.pensieve.co/"},"discuss.pensieve.co")," and log in with your @berkeley.edu email, then enter your group number. (Your group number is the number of your Discord channel.)")),(0,i.kt)("p",null,"Once you're on Pensieve, you don't need to return to this page; Pensieve has all the same content (but more features). If for some reason Penseive doesn't work, return to this page and continue with the discussion."),(0,i.kt)("p",null,"Post in the ",(0,i.kt)("inlineCode",{parentName:"p"},"#help")," channel on ",(0,i.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/discord/"},"Discord")," if you have trouble."),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"Say your name and your favorite tree (a particular tree or a kind of tree) in honor of today's topic: tree recursion. (Tree recursive functions are functions that call themselves more than once.)"),(0,i.kt)("p",null,"In this discussion, don't use a Python interpreter to run code until you are confident your solution is correct. Figure things out and check your work by ",(0,i.kt)("em",{parentName:"p"},"thinking")," about what your code will do. Not sure? Talk to your group!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"[","New","]")," If you have fewer than 4 people in your group, you can merge with another group in the room with you."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"[","New","]")," Recursion takes practice. Please don't get discouraged if you're struggling to write recursive functions. Instead, every time you do solve one (even with help or in a group), make note of what you had to realize to make progress. Students improve through practice and reflection."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"[","For Fun","]")," This emoticon of a guy in a cowboy hat is valid Python: ",(0,i.kt)("inlineCode",{parentName:"p"},"o[:-D]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},">>> o = [2, 0, 2, 4]\n>>> [ o[:-D] for D in range(1,4) ]\n[[2, 0, 2], [2, 0], [2]]\n")),(0,i.kt)("p",null,"\ud83e\udd20"),(0,i.kt)("h2",{id:"tree-recursion"},"Tree Recursion"),(0,i.kt)("p",null,"For the following questions, don't start trying to write code right away. Instead, start by describing the recursive case in words. Some examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"fib")," from lecture, the recursive case is to add together the previous two Fibonacci numbers."),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"double_eights")," from lab, the recursive case is to check for double eights in the rest of the number."),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"count_partitions")," from lecture, the recursive case is to partition ",(0,i.kt)("inlineCode",{parentName:"li"},"n-m")," using parts up to size ",(0,i.kt)("inlineCode",{parentName:"li"},"m")," ",(0,i.kt)("strong",{parentName:"li"},"and")," to partition ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," using parts up to size ",(0,i.kt)("inlineCode",{parentName:"li"},"m-1"),".")),(0,i.kt)("h3",{id:"q1-insect-combinatorics"},"Q1: Insect Combinatorics"),(0,i.kt)("p",null,"An insect is inside an ",(0,i.kt)("inlineCode",{parentName:"p"},"m")," by ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," grid. The insect starts at the bottom-left corner ",(0,i.kt)("inlineCode",{parentName:"p"},"(1, 1)")," and wants to end up at the top-right corner ",(0,i.kt)("inlineCode",{parentName:"p"},"(m, n)"),". The insect can only move up or to the right. Write a function ",(0,i.kt)("inlineCode",{parentName:"p"},"paths")," that takes the height and width of a grid and returns the number of paths the insect can take from the start to the end. (There is a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Closed-form_expression"},"closed-form solution")," to this problem, but try to answer it with recursion.)"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Insect grids.",src:n(37838).Z,width:"473",height:"248"})),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," by ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," grid, the insect has two paths from the start to the end. In the ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," by ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," grid, the insect has six paths (only three are shown above)."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Hint:")," What happens if the insect hits the upper or rightmost edge of the grid?")),(0,i.kt)("p",null,"Run in 61A Code"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Presentation Time:")," Once your group has converged on a solution, it's time to practice your ability to describe why your recursive case is correct. Pick a presenter, then send a message to the discuss-queue channel with the @discuss tag, your discussion group number, and the message \"Here's the path!\" and a member of the course staff will join your voice channel to hear your description and give feedback."),(0,i.kt)("h2",{id:"tree-recursion-with-lists"},"Tree Recursion with Lists"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"[","New","]")," Some of you already know list operations that we haven't covered yet, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"append"),". Don't use those today. All you need are list literals (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"[1, 2, 3]"),"), item selection (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"s[0]"),"), list addition (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"[1] + [2, 3]"),"), ",(0,i.kt)("inlineCode",{parentName:"p"},"len")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"len(s)"),"), and slicing (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"s[1:]"),"). Use those! There will be plenty of time for other list operations when we introduce them next week."),(0,i.kt)("p",null,"The most important thing to remember about lists is that a non-empty list ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," can be split into its first element ",(0,i.kt)("inlineCode",{parentName:"p"},"s[0]")," and the rest of the list ",(0,i.kt)("inlineCode",{parentName:"p"},"s[1:]"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},">>> s = [2, 3, 6, 4]\n>>> s[0]\n2\n>>> s[1:]\n[3, 6, 4]\n")),(0,i.kt)("h3",{id:"q2-max-product"},"Q2: Max Product"),(0,i.kt)("p",null,"Implement ",(0,i.kt)("inlineCode",{parentName:"p"},"max_product"),", which takes a list of numbers and returns the maximum product that can be formed by multiplying together non-consecutive elements of the list. Assume that all numbers in the input list are greater than or equal to 1."),(0,i.kt)("p",null,"Run in 61A Code"),(0,i.kt)("p",null,"First try multiplying the first element by the ",(0,i.kt)("inlineCode",{parentName:"p"},"max_product")," of everything after the first two elements (skipping the second element because it is consecutive with the first), then try skipping the first element and finding the ",(0,i.kt)("inlineCode",{parentName:"p"},"max_product")," of the rest. To find which of these options is better, use ",(0,i.kt)("inlineCode",{parentName:"p"},"max"),"."),(0,i.kt)("p",null,"A great way to get help is to talk to the course staff!"),(0,i.kt)("p",null,"Complete this sentence together and type your answer into your group's ",(0,i.kt)("a",{parentName:"p",href:"https://support.discord.com/hc/en-us/articles/4412085582359-Text-Channels-Text-Chat-In-Voice-Channels#h_01FMJT412WBX1MR4HDYNR8E95X"},"channel's text chat"),'. "The recursive case is to choose the larger of ... and ..."'),(0,i.kt)("h3",{id:"q3-sum-fun"},"Q3: Sum Fun"),(0,i.kt)("p",null,"Implement ",(0,i.kt)("inlineCode",{parentName:"p"},"sums(n, m)"),", which takes a total ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," and maximum ",(0,i.kt)("inlineCode",{parentName:"p"},"m"),". It returns a list of all lists:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"that sum to ",(0,i.kt)("inlineCode",{parentName:"li"},"n"),","),(0,i.kt)("li",{parentName:"ol"},"that contain only positive numbers up to ",(0,i.kt)("inlineCode",{parentName:"li"},"m"),", and"),(0,i.kt)("li",{parentName:"ol"},"in which no two adjacent numbers are the same.")),(0,i.kt)("p",null,"Two lists with the same numbers in a different order should both be returned."),(0,i.kt)("p",null,"Here's a recursive approach that matches the template below: build up the ",(0,i.kt)("inlineCode",{parentName:"p"},"result")," list by building all lists that sum to ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," and start with ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),", for each ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," from 1 to ",(0,i.kt)("inlineCode",{parentName:"p"},"m"),". For example, the result of ",(0,i.kt)("inlineCode",{parentName:"p"},"sums(5, 3)")," is made up of three lists:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[[1, 3, 1]]")," starts with 1,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[[2, 1, 2], [2, 3]]")," start with 2, and"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[[3, 2]]")," starts with 3.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hint:")," Use ",(0,i.kt)("inlineCode",{parentName:"p"},"[k] + s")," for a number ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," and list ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," to build a list that starts with ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," and then has all the elements of ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},">>> k = 2\n>>> s = [4, 3, 1]\n>>> [k] + s\n[2, 4, 3, 1]\n")),(0,i.kt)("p",null,"Run in 61A Code"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"k")," is the first number in a list that sums to ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"rest")," is the rest of that list, so build a list that sums to ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"sums")," to build all of the lists that sum to ",(0,i.kt)("inlineCode",{parentName:"p"},"n-k")," so that they can be used to construct lists that sum to ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," by putting a ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," on the front."),(0,i.kt)("p",null,'Here is where you ensure that "no two adjacent numbers are the same." Since ',(0,i.kt)("inlineCode",{parentName:"p"},"k")," will be the first number in the list you're building, it must not be equal to the first element of ",(0,i.kt)("inlineCode",{parentName:"p"},"rest")," (which will be the second number in the list you're building)."),(0,i.kt)("p",null,"If you get stuck and want to talk with the staff, post on Discord!"),(0,i.kt)("h2",{id:"document-the-occasion"},"Document the Occasion"),(0,i.kt)("p",null,"Please all fill out the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.google.com/forms/d/e/1FAIpQLSeqlK8l6WkScGr-RHR-kM4p5bnR9cllYrG95fDqPJspSlll7A/viewform"},"attendance form")," (one submission per person per week)."))}d.isMDXComponent=!0},87210:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/disc04-8fcabd16db80d61c0d210604b6028dea.pdf"},37838:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/grid-b3ad3b8384cd4cef168b8070828e50d3.jpg"}}]);