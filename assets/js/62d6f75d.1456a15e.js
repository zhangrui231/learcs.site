"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[8866],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=i,h=u["".concat(p,".").concat(d)]||u[d]||c[d]||r;return t?a.createElement(h,o(o({ref:n},m),{},{components:t})):a.createElement(h,o({ref:n},m))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5982:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:1,description:"lecture6 python Notes | \u8bfe\u7a0b\u7b14\u8bb0",title:"Notes"},o="Lecture 6 - CS50x 2023",l={unversionedId:"curriculum-resource/cs50x/lecture7/notes",id:"curriculum-resource/cs50x/lecture7/notes",title:"Notes",description:"lecture6 python Notes | \u8bfe\u7a0b\u7b14\u8bb0",source:"@site/docs/curriculum-resource/cs50x/lecture7/notes.md",sourceDirName:"curriculum-resource/cs50x/lecture7",slug:"/curriculum-resource/cs50x/lecture7/notes",permalink:"/docs/curriculum-resource/cs50x/lecture7/notes",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"lecture6 python Notes | \u8bfe\u7a0b\u7b14\u8bb0",title:"Notes"},sidebar:"tutorialSidebar",previous:{title:"Scratch",permalink:"/docs/curriculum-resource/cs50x/lecture7/"},next:{title:"Problem Set",permalink:"/docs/curriculum-resource/cs50x/lecture7/problem set/"}},p={},s=[{value:"Welcome!",id:"welcome",level:2},{value:"Python",id:"python",level:2},{value:"Hello",id:"hello",level:2},{value:"Types",id:"types",level:2},{value:"Speller",id:"speller",level:2},{value:"Image Recognition",id:"image-recognition",level:2},{value:"CS50 Library",id:"cs50-library",level:2},{value:"Conditionals",id:"conditionals",level:2},{value:"Variables",id:"variables",level:2},{value:"Loops",id:"loops",level:2},{value:"Calculator",id:"calculator",level:2},{value:"Compare",id:"compare",level:2},{value:"Object-Oriented Programming",id:"object-oriented-programming",level:2},{value:"Meow",id:"meow",level:2},{value:"Mario",id:"mario",level:2},{value:"Scores",id:"scores",level:2},{value:"Uppercase",id:"uppercase",level:2},{value:"Greet",id:"greet",level:2},{value:"Exit Status",id:"exit-status",level:2},{value:"Search",id:"search",level:2},{value:"Phonebook",id:"phonebook",level:2},{value:"Comparison",id:"comparison",level:2},{value:"Swap",id:"swap",level:2},{value:"CSV",id:"csv",level:2},{value:"Speech",id:"speech",level:2},{value:"Summing Up",id:"summing-up",level:2}],m={toc:s},u="wrapper";function c(e){let{components:n,...r}=e;return(0,i.kt)(u,(0,a.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lecture-6---cs50x-2023"},"Lecture 6 - CS50x 2023"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#welcome"},"Welcome!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#python"},"Python")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#hello"},"Hello")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#types"},"Types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#speller"},"Speller")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#image-recognition"},"Image Recognition")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cs50-library"},"CS50 Library")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#conditionals"},"Conditionals")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#variables"},"Variables")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#loops"},"Loops")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#calculator"},"Calculator")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#compare"},"Compare")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#object-oriented-programming"},"Object-Oriented Programming")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#meow"},"Meow")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#mario"},"Mario")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#scores"},"Scores")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#uppercase"},"Uppercase")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#greet"},"Greet")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#exit-status"},"Exit Status")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#search"},"Search")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#phonebook"},"Phonebook")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#comparison"},"Comparison")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#swap"},"Swap")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#csv"},"CSV")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#speech"},"Speech")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#summing-up"},"Summing Up"))),(0,i.kt)("h2",{id:"welcome"},"Welcome!"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In previous weeks, you were introduced to the fundamental building blocks of programming."),(0,i.kt)("li",{parentName:"ul"},"You learned about programming in a lower-level programming language called C."),(0,i.kt)("li",{parentName:"ul"},"Today, we are going to work with a higher-level programming language called ",(0,i.kt)("em",{parentName:"li"},"Python"),"."),(0,i.kt)("li",{parentName:"ul"},"As you learn this new language, you\u2019re going to find that you are going to be more able to teach yourself new programming languages.")),(0,i.kt)("h2",{id:"python"},"Python"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Humans, over the decades, have seen how previous design decisions could be improved upon."),(0,i.kt)("li",{parentName:"ul"},"Python is a programming language that builds upon what you have already learned in C.")),(0,i.kt)("h2",{id:"hello"},"Hello"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Up until this point, the code has looked like this:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'// A program that says hello to the world\n\n#include <stdio.h>\n\nint main(void)\n{\n    printf("hello, world\\n");\n}\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Today, you\u2019ll find that the process of writing and compiling code has been simplified.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, the above code will be rendered in Python as:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# A program that says hello to the world\n\nprint("hello, world")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that the semicolon is gone.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In C, you might remember this code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'// get_string and printf with %s\n\n#include <cs50.h>\n#include <stdio.h>\n\nint main(void)\n{\n    string answer = get_string("What\'s your name? ");\n    printf("hello, %s\\n", answer);\n}\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This code is transformed in Python to:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# get_string and print, with concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string("What\'s your name? ")\nprint("hello, " + answer)\n\n')),(0,i.kt)("p",{parentName:"li"},"You can write this code by executing ",(0,i.kt)("inlineCode",{parentName:"p"},"code hello.py")," in the terminal window. Then, you can execute this code by running ",(0,i.kt)("inlineCode",{parentName:"p"},"python hello.py"),". Notice how the ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," sign concatenates ",(0,i.kt)("inlineCode",{parentName:"p"},'"hello, "')," and ",(0,i.kt)("inlineCode",{parentName:"p"},"answer"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similarly, you could implement the above code as:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# get_string and print, with format strings\n\nfrom cs50 import get_string\n\nanswer = get_string("What\'s your name? ")\nprint(f"hello, {answer}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how the curly braces allow for the ",(0,i.kt)("inlineCode",{parentName:"p"},"print")," function to interpolate the ",(0,i.kt)("inlineCode",{parentName:"p"},"answer")," such that ",(0,i.kt)("inlineCode",{parentName:"p"},"answer")," appears within."))),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Data types in Python do not need to be explicitly declared. For example, you saw how ",(0,i.kt)("inlineCode",{parentName:"p"},"answer")," above is a string, but we did not have to tell the interpreter this was the case: It knew on its own.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In Python, commonly used types include:"),(0,i.kt)("p",{parentName:"li"},"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"long")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"double")," are missing. Python will handle what data type should be used for larger and smaller numbers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Some other data types in Python include:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  range\n  list\n  tuple\n  dict\n  set\n\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Each of these data types can be implemented in C, but in Python they can be implemented more simply."))),(0,i.kt)("h2",{id:"speller"},"Speller"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To illustrate this simplicity, let\u2019s type \u2018code dictionary.py\u2019 in the terminal window and write code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# Words in dictionary\nwords = set()\n")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'def check(word):\n    """Return true if word is in dictionary else false"""\n    if word.lower() in words:\n        return True\n    else:\n        return False\n\n\ndef load(dictionary):\n    """Load dictionary into memory, returning true if successful else false"""\n    file = open(dictionary, "r")\n    for line in file:\n        word = line.rstrip()\n        words.add(word)\n    file.close()\n    return True\n\n\ndef size():\n    """Returns number of words in dictionary if loaded else 0 if not yet loaded"""\n    return len(words)\n\n\ndef unload():\n    """Unloads dictionary from memory, returning true if successful else false"""\n    return True\n\n```\n\nNotice that there are four functions above. In the `check` function, if a `word` is in `words`, it returns `True`. So much easier than an implementation in C! Similarly, in the `load` function the dictionary file is opened. For each line in that file, we add that line to `words`. Using `rstrip`, the trailing new line is removed from the added word. `size` simply returns the `len` or length of `words`. `unload` only needs to return `True` because Python handles memory management on its own.\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The above code illustrates why higher-level languages exist: To simplify and allow you to write code more easily."),(0,i.kt)("li",{parentName:"ul"},"However, speed is a tradeoff. Because C allows you, the programmer, to make decisions about memory management, it may run faster than Python \u2013 depending on your code. While C only runs your lines of code, Python runs all the code that comes under the hood with it when you call Python\u2019s built-in functions."),(0,i.kt)("li",{parentName:"ul"},"You can learn more about functions in the ",(0,i.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/functions.html"},"Python documentation"))),(0,i.kt)("h2",{id:"image-recognition"},"Image Recognition"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Numerous libraries have been written by contributors to Python."),(0,i.kt)("li",{parentName:"ul"},"You can utilize these libraries in your own code."),(0,i.kt)("li",{parentName:"ul"},"For example, you could simply import facial recognition utilizing a Python library like ",(0,i.kt)("inlineCode",{parentName:"li"},"PIL"),"."),(0,i.kt)("li",{parentName:"ul"},"David provided a demo of facial recognition utilizing Python and third-party libraries.")),(0,i.kt)("h2",{id:"cs50-library"},"CS50 Library"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"As with C, the CS50 library can be utilized within Python.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The following functions will be of particular use:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  get_float\n  get_int\n  get_string\n\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You also have the option of importing only specific functions from the CS50 library as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"from cs50 import get_float, get_int, get_string\n\n")))),(0,i.kt)("h2",{id:"conditionals"},"Conditionals"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In C, you might remember a program like this:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'// Conditionals, Boolean expressions, relational operators\n\n#include <cs50.h>\n#include <stdio.h>\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int("What\'s x? ");\n    int y = get_int("What\'s y? ");\n\n    // Compare integers\n    if (x < y)\n    {\n        printf("x is less than y\\n");\n    }\n    else if (x > y)\n    {\n        printf("x is greater than y\\n");\n    }\n    else\n    {\n        printf("x is equal to y\\n");\n    }\n}\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In Python, it would appear as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Conditionals, Boolean expressions, relational operators\n\nfrom cs50 import get_int\n\n# Prompt user for integers\nx = get_int("What\'s x? ")\ny = get_int("What\'s y? ")\n\n# Compare integers\nif x < y:\n    print("x is less than y")\nelif x > y:\n    print("x is greater than y")\nelse:\n    print("x is equal to y")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that there are no more curly braces. Instead, indentations are utilized. Second, a colon is utilized in the ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," statement. Further, ",(0,i.kt)("inlineCode",{parentName:"p"},"elif")," replaces ",(0,i.kt)("inlineCode",{parentName:"p"},"else if"),". Parentheses are also no longer required in the ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"elif")," statements."))),(0,i.kt)("h2",{id:"variables"},"Variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Variable declaration is simplified too. In C, you might have ",(0,i.kt)("inlineCode",{parentName:"li"},"int counter = 1;"),". In Python, this same line would read ",(0,i.kt)("inlineCode",{parentName:"li"},"counter = 1"),". You need not declare the type of the variable."),(0,i.kt)("li",{parentName:"ul"},"Python favors ",(0,i.kt)("inlineCode",{parentName:"li"},"counter += 1")," to increment by one, losing the ability found in C to type ",(0,i.kt)("inlineCode",{parentName:"li"},"counter++"),".")),(0,i.kt)("h2",{id:"loops"},"Loops"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Loops in Python are very similar to C. You may recall the following code in C:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'// Demonstrates while loop\n\n#include <stdio.h>\n\nint main(void)\n{\n    int i = 0;\n    while (i < 3)\n    {\n        printf("meow\\n");\n        i++;\n    }\n}\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In Python, this code appears as:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Demonstrates while loop\n\ni = 0\nwhile i < 3:\n    print("meow")\n    i += 1\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"for")," loops can be implemented in Python as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Better design\n\nfor i in range(3):\n    print("meow")\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similarly, one could express the above code as:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# Abstraction with parameterization\n\ndef main():\n    meow(3)\n")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# Meow some number of times\ndef meow(n):\n    for i in range(n):\n        print("meow")\n\n\nmain()\n\n```\n\nNotice that a function is utilized to abstract away the meowing.\n')),(0,i.kt)("h2",{id:"calculator"},"Calculator"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can implement a simple calculator just as we did within C. Type ",(0,i.kt)("inlineCode",{parentName:"p"},"code calculator.py")," into the terminal window and write code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Addition with int [using get_int]\n\nfrom cs50 import get_int\n\n# Prompt user for x\nx = get_int("x: ")\n\n# Prompt user for y\ny = get_int("y: ")\n\n# Perform addition\nprint(x + y)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how the CS50 library is imported. Then, ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),"\xa0are gathered from the user. Finally, the result is printed. Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function that would have been seen in a C program is gone entirely! While one could utilize a ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function, it is not required.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It\u2019s possible for one to remove the training wheels of the CS50 library. Modify your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Addition with int [using input]\n\n# Prompt user for x\nx = input("x: ")\n\n# Prompt user for y\ny = input("y: ")\n\n# Perform addition\nprint(x + y)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how executing the above code results in strange program behavior. Why might this be so?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You may have guessed that the interpreter understood ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," to be strings. You can fix your code by employing the ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," function as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Addition with int [using input]\n\n# Prompt user for x\nx = int(input("x: "))\n\n# Prompt user for y\ny = int(input("y: "))\n\n# Perform addition\nprint(x + y)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how the input for ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," is passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," function which converts it to an integer.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can expand the abilities of our calculator. Modify your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Division with integers, demonstration lack of truncation\n\n# Prompt user for x\nx = int(input("x: "))\n\n# Prompt user for y\ny = int(input("y: "))\n\n# Divide x by y\nz = x / y\nprint(z)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that executing this code results in a value, but that if you were to see more digits after ",(0,i.kt)("inlineCode",{parentName:"p"},".333333")," you\u2019d see that we are faced with ",(0,i.kt)("em",{parentName:"p"},"floating-point imprecision"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can reveal this imprecision by modifying our codes slightly:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Floating-point imprecision\n\n# Prompt user for x\nx = int(input("x: "))\n\n# Prompt user for y\ny = int(input("y: "))\n\n# Divide x by y\nz = x / y\nprint(f"{z:.50f}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that this code reveals the imprecision. Python still faces this issue, just as C does."))),(0,i.kt)("h2",{id:"compare"},"Compare"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In C, we faced challenges when we wanted to compare two values. Consider the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'// Conditionals, Boolean expressions, relational operators\n\n#include <cs50.h>\n#include <stdio.h>\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int("What\'s x? ");\n    int y = get_int("What\'s y? ");\n\n    // Compare integers\n    if (x < y)\n    {\n        printf("x is less than y\\n");\n    }\n    else if (x > y)\n    {\n        printf("x is greater than y\\n");\n    }\n    else\n    {\n        printf("x is equal to y\\n");\n    }\n}\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In Python, we can execute the above as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Conditionals, Boolean expressions, relational operators\n\nfrom cs50 import get_int\n\n# Prompt user for integers\nx = get_int("What\'s x? ")\ny = get_int("What\'s y? ")\n\n# Compare integers\nif x < y:\n    print("x is less than y")\nelif x > y:\n    print("x is greater than y")\nelse:\n    print("x is equal to y")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that the CS50 library is imported. Further, minor changes exist in the ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," statement.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Further looking at comparisons, consider the following code in C:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"// Logical operators\n\n#include <cs50.h>\n#include <stdio.h>\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The above can be implemented as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Logical operators\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string("Do you agree? ")\n\n# Check whether agreed\nif s == "Y" or s == "y":\n    print("Agreed.")\nelif s == "N" or s == "n":\n    print("Not agreed.")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that the two vertical bars utilized in C is replaced with ",(0,i.kt)("inlineCode",{parentName:"p"},"or"),". Indeed, people often enjoy Python because it is more readable by humans. Also, notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"char")," does not exist in Python. Instead, ",(0,i.kt)("inlineCode",{parentName:"p"},"str"),"s are utilized.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Another approach to this same code could be as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Logical operators, using lists\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string("Do you agree? ")\n\n# Check whether agreed\nif s in ["y", "yes"]:\n    print("Agreed.")\nelif s in ["n", "no"]:\n    print("Not agreed.")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how we are able to express multiple keywords like ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"yes"),"."))),(0,i.kt)("h2",{id:"object-oriented-programming"},"Object-Oriented Programming"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Up until this point, our programs in this course have been linear: sequential.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It\u2019s possible to have certain types of values not only have properties or attributes inside of them but have functions as well. In Python, these values are known as ",(0,i.kt)("em",{parentName:"p"},"objects"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In C, we could create a ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," where you could associate multiple variables inside a single self-created data type. In Python, we can do this and also include functions in a self-created data type. When a function belongs to a specific ",(0,i.kt)("em",{parentName:"p"},"object"),", it is known as a ",(0,i.kt)("em",{parentName:"p"},"method"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"strs")," in Python have a built-in ",(0,i.kt)("em",{parentName:"p"},"methods"),". Therefore, you could modify your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Logical operators, using lists\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string("Do you agree? ")\n\n# Check whether agreed\nif s.lower() in ["y", "yes"]:\n    print("Agreed.")\nelif s.lower() in ["n", "no"]:\n    print("Not agreed.")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how we are able to express multiple keywords like ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"yes")," and convert any user input to lowercase.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This could be further simplified as:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Logical operators, using lists\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string("Do you agree? ")\n\ns = s.lower()\n\n# Check whether agreed\nif s in ["y", "yes"]:\n    print("Agreed.")\nelif s in ["n", "no"]:\n    print("Not agreed.")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how the old value of ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," is overwritten with the result of ",(0,i.kt)("inlineCode",{parentName:"p"},"s.lower()"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In this class, we will only scratch the surface of Python. Therefore, the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/"},"Python documentation")," will be of particular importance as you continue.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can learn more about string methods in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#string-methods"},"Python documentation")))),(0,i.kt)("h2",{id:"meow"},"Meow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Returning to ",(0,i.kt)("inlineCode",{parentName:"p"},"meow.c")," from weeks earlier, recall the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'// Demonstrates while loop\n\n#include <stdio.h>\n\nint main(void)\n{\n    int i = 0;\n    while (i < 3)\n    {\n        printf("meow\\n");\n        i++;\n    }\n}\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The above can be implemented within Python as:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Demonstrates while loop\n\ni = 0\nwhile i < 3:\n    print("meow")\n    i += 1\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similarly, using a ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loop, we can write code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Better design\n\nfor i in range(3):\n    print("meow")\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"As we hinted at earlier today, you can further improve upon this code using functions. Modify your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Abstraction\n\ndef main():\n    for i in range(3):\n        meow()\n\n# Meow once\ndef meow():\n    print("meow")\n')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"main()\n\n```\n\nNotice that the `meow` function abstracts away the `print` statement. Further, notice that the `main` function appears at the top of the file. At the bottom of the file, the `main` function is called. By convention, it\u2019s expected that you create a `main` function in Python.\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Indeed, we can pass variables between our functions as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# Abstraction with parameterization\n\ndef main():\n    meow(3)\n")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# Meow some number of times\ndef meow(n):\n    for i in range(n):\n        print("meow")\n\n\nmain()\n\n```\n\nNotice how `meow` now takes a variable `n`. In the `main` function, you can call `meow` and pass a value like `3` to it. Then, `meow` utilizes the value of `n` in the `for` loop.\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reading the above code, notice how you, as a C programmer, are able to quite easily make sense of the above code. While some conventions are different, the building blocks you previously learned are very apparent in this new programming language.")),(0,i.kt)("h2",{id:"mario"},"Mario"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Recall a few weeks ago our challenge of building three blocks on top of one another, like in Mario."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"three vertical blocks",src:t(7449).Z,title:"mario blocks",width:"960",height:"540"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In Python, we can implement something akin to this as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Prints a column of 3 bricks with a loop\n\nfor i in range(3):\n    print("#")\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In C, we had the advantage of a ",(0,i.kt)("inlineCode",{parentName:"p"},"do-while")," loop. However, in Python it is convention to utilize a ",(0,i.kt)("inlineCode",{parentName:"p"},"while")," loop, as Python does not have a ",(0,i.kt)("inlineCode",{parentName:"p"},"do while")," loop. You can write code as follows in a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"mario.py"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# Prints a column of bricks, using a helper function to get input\n\nfrom cs50 import get_int\n")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'def main():\n    height = get_height()\n    for i in range(height):\n        print("#")\n\n\ndef get_height():\n    while True:\n        n = get_int("Height: ")\n        if n > 0:\n            return n\n\n\nmain()\n\n```\n\nNotice how the scope of `n` is everywhere in the `get_height` function once it is assigned a value. Further notice that by convention, there are double spaces between functions.\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can take away the training wheels of the CS50 library as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Prints a column of bricks, catching exceptions\n\ndef main():\n    height = get_height()\n    for i in range(height):\n        print("#")\n')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'def get_height():\n    while True:\n        try:\n            n = int(input("Height: "))\n            if n > 0:\n                return n\n        except ValueError:\n            print("Not an integer")\n\n\nmain()\n\n```\n\nNotice that `try` is utilized to attempt to convert `n` to an integer. If it cannot do so, an error is outputted.\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Consider the following image:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"four horizontal question blocks",src:t(4496).Z,title:"mario blocks",width:"960",height:"540"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In Python, we could implement by modifying your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Prints a row of 4 question marks with a loop\n\nfor i in range(4):\n    print("?", end="")\nprint()\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that you can override the behavior of the ",(0,i.kt)("inlineCode",{parentName:"p"},"print")," function to stay on the same line as the previous print.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similar in spirit to previous iterations, we can further simplify this program:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Prints a row of 4 question marks without a loop\n\nprint("?" * 4)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that we can utilize ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," to multiply the print statement to repeat ",(0,i.kt)("inlineCode",{parentName:"p"},"4")," times.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"What about a large block of bricks?"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"three by three block of mario blocks",src:t(2353).Z,title:"mario blocks",width:"2124",height:"1194"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To implement the above, you can modify your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Prints a 3-by-3 grid of bricks with loops\n\nfor i in range(3):\n    for j in range(3):\n        print("#", end="")\n    print()\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how one ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loop exists inside another. The ",(0,i.kt)("inlineCode",{parentName:"p"},"print")," statement adds a new line at the end of each row of bricks.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can learn more about the ",(0,i.kt)("inlineCode",{parentName:"p"},"print")," function in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/functions.html#print"},"Python documentation")))),(0,i.kt)("h2",{id:"scores"},"Scores"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"list"),"s are a data structure within Python.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"list"),"s have built in methods or functions within them.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, consider the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Averages three numbers using a list and a loop\n\nfrom cs50 import get_int\n\n# Get scores\nscores = []\nfor i in range(3):\n    score = get_int("Score: ")\n    scores.append(score)\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f"Average: {average}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that you can use the built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"append")," method, whereby you can ",(0,i.kt)("inlineCode",{parentName:"p"},"append")," the score to the list. Also notice that we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sum")," function to add all elements in the list.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can even ultilize the following syntax:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Averages three numbers using a list and a loop with + operator\n\nfrom cs50 import get_int\n\n# Get scores\nscores = []\nfor i in range(3):\n    score = get_int("Score: ")\n    scores += [score]\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f"Average: {average}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"+=")," is utilized to append the score to the list. In this case we place square brackets around ",(0,i.kt)("inlineCode",{parentName:"p"},"score")," because only a ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," can be added to another ",(0,i.kt)("inlineCode",{parentName:"p"},"list")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"+="),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can learn more about lists in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range"},"Python documentation"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can also learn more about ",(0,i.kt)("inlineCode",{parentName:"p"},"len")," in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/functions.html#len"},"Python documentation")))),(0,i.kt)("h2",{id:"uppercase"},"Uppercase"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similarly, consider the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Uppercases string one character at a time\n\nbefore = input("Before: ")\nprint("After:  ", end="")\nfor c in before:\n    print(c.upper(), end="")\nprint()\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that each character is uppercased one at a time.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Python has a built-in method for ",(0,i.kt)("inlineCode",{parentName:"p"},"str"),"s. You could modify your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Uppercases string all at once\n\nbefore = input("Before: ")\nafter = before.upper()\nprint(f"After:  {after}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice the ",(0,i.kt)("inlineCode",{parentName:"p"},"upper")," method is utilized to uppercase the entire string at once."))),(0,i.kt)("h2",{id:"greet"},"Greet"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"As with C, you can also utilize command-line arguments. Consider the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Prints a command-line argument\n\nfrom sys import argv\n\nif len(argv) == 2:\n    print(f"hello, {argv[1]}")\nelse:\n    print("hello, world")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"argv[1]")," is printed using a ",(0,i.kt)("em",{parentName:"p"},"formatted string"),", noted by the ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," present in the ",(0,i.kt)("inlineCode",{parentName:"p"},"print")," statement.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can print all the arguments in ",(0,i.kt)("inlineCode",{parentName:"p"},"argv")," as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# Printing command-line arguments, indexing into argv\n\nfrom sys import argv\n\nfor i in range(len(argv)):\n    print(argv[i])\n\n")),(0,i.kt)("p",{parentName:"li"},"Notice that the above will not present the word ",(0,i.kt)("inlineCode",{parentName:"p"},"python")," if executed, and the first argument will be the name of the file you are running. You can think of the word ",(0,i.kt)("inlineCode",{parentName:"p"},"python")," as being analogous to ",(0,i.kt)("inlineCode",{parentName:"p"},"./")," when we were running programs in C.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can slice pieces of lists away. Consider the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"# Printing command-line arguments using a slice\n\nfrom sys import argv\n\nfor arg in argv[1:]:\n    print(arg)\n\n")),(0,i.kt)("p",{parentName:"li"},"Notice that executing this code will result in the name of the file you are running being sliced away.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can learn more about the ",(0,i.kt)("inlineCode",{parentName:"p"},"sys")," library in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/sys.html"},"Python documentation")))),(0,i.kt)("h2",{id:"exit-status"},"Exit Status"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sys")," library also has built-in methods. We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"sys.exit(i)")," to exit the program with a specific exit code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Exits with explicit value, importing sys\n\nimport sys\n\nif len(sys.argv) != 2:\n    print("Missing command-line argument")\n    sys.exit(1)\n\nprint(f"hello, {sys.argv[1]}")\nsys.exit(0)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that dot-notation is used to utilize the built-in functions of ",(0,i.kt)("inlineCode",{parentName:"p"},"sys"),"."))),(0,i.kt)("h2",{id:"search"},"Search"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Python can also be utilized to search. In your terminal window, type ",(0,i.kt)("inlineCode",{parentName:"p"},"code names.py")," and write code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Implements linear search for names\n\nimport sys\n\n# A list of names\nnames = ["Bill", "Charlie", "Fred", "George", "Ginny", "Percy", "Ron"]\n\n# Ask for name\nname = input("Name: ")\n\n# Search for name\nfor n in names:\n    if n == name:\n        print("Found")\n        sys.exit(0)\n\nprint("Not found")\nsys.exit(1)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that this code functions. Indeed, it implements a linear search.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can utilize the built-in abilities of Python as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Implements linear search for names using `in`\n\nimport sys\n\n# A list of names\nnames = ["Bill", "Charlie", "Fred", "George", "Ginny", "Percy", "Ron"]\n\n# Ask for name\nname = input("Name: ")\n\n# Search for name\nif name in names:\n    print("Found")\n    sys.exit(0)\n\nprint("Not found")\nsys.exit(1)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"in")," preposition is utilized. Python understands how to implement the lower-level code to do a linear search."))),(0,i.kt)("h2",{id:"phonebook"},"Phonebook"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Recall that a ",(0,i.kt)("em",{parentName:"p"},"dictionary")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"dict")," is a collection of ",(0,i.kt)("em",{parentName:"p"},"key")," and ",(0,i.kt)("em",{parentName:"p"},"value")," pairs.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can implement a dictionary in Python as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Implements a phone book\n\nfrom cs50 import get_string\n\npeople = {\n    "Carter": "+1-617-495-1000",\n    "David": "+1-949-468-2750"\n}\n\n# Search for name\nname = get_string("Name: ")\nif name in people:\n    print(f"Number: {people[name]}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that the dictionary is implemented using curly braces. Then, the statement ",(0,i.kt)("inlineCode",{parentName:"p"},"if name in people")," searches to see if the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," is in the ",(0,i.kt)("inlineCode",{parentName:"p"},"people")," dictionary. Further, notice how, in the ",(0,i.kt)("inlineCode",{parentName:"p"},"print")," statement, we can index into the people dictionary using the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),". Very useful!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Python has done their best to get to ",(0,i.kt)("em",{parentName:"p"},"constant time")," using their built-in searches."))),(0,i.kt)("h2",{id:"comparison"},"Comparison"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can implement comparisons as follows in Python:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Compares two strings\n\n# Get two strings\ns = input("s: ")\nt = input("t: ")\n\n# Compare strings\nif s == t:\n    print("Same")\nelse:\n    print("Different")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how Python utilizes the ",(0,i.kt)("inlineCode",{parentName:"p"},"==")," to be able to compare two variables. Further, notice that Python allows you to compare two strings without examining strings character by character using pointers as in C."))),(0,i.kt)("h2",{id:"swap"},"Swap"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Further, we can implement a program that swaps values as we did in C. Consider the following code in Python:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Swaps two integers\n\nx = 1\ny = 2\n\nprint(f"x is {x}, y is {y}")\nx, y = y, x\nprint(f"x is {x}, y is {y}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that each value is swapped, using some very ",(0,i.kt)("em",{parentName:"p"},"Pythonic")," syntax ",(0,i.kt)("inlineCode",{parentName:"p"},"x, y = y, x"),"."))),(0,i.kt)("h2",{id:"csv"},"CSV"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can also utilize Python to engage with CSV files. Consider the following program called ",(0,i.kt)("inlineCode",{parentName:"p"},"phonebook.py"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Saves names and numbers to a CSV file\n\nimport csv\n\n# Get name and number\nname = input("Name: ")\nnumber = input("Number: ")\n\n# Open CSV file\nwith open("phonebook.csv", "a") as file:\n\n    # Print to file\n    writer = csv.writer(file)\n    writer.writerow([name, number])\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that utilizing the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," block of code, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"writer")," and its work happening below it indented, prevents us from needing to ",(0,i.kt)("inlineCode",{parentName:"p"},"close")," our file once finished.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Commonly, CSV files have columns that carry specific names. A ",(0,i.kt)("inlineCode",{parentName:"p"},"DictWriter")," can used to create the CSV file and assign specific names to each column. Consider the following modification to our code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Saves names and numbers to a CSV file using a DictWriter\n\nimport csv\n\n# Get name and number\nname = input("Name: ")\nnumber = input("Number: ")\n\n# Open CSV file\nwith open("phonebook.csv", "a") as file:\n\n    # Print to file\n    writer = csv.DictWriter(file, fieldnames=["name", "number"])\n    writer.writerow({"name": name, "number": number})\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," columns are defined in the penultimate row of code, and values are added in the final line.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can learn more about the CSV files in Python in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/csv.html"},"Python documentation")))),(0,i.kt)("h2",{id:"speech"},"Speech"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Using a third-party library, Python can do text-to-speech."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Says hello to someone\n\nimport pyttsx3\n\nengine = pyttsx3.init()\nname = input("What\'s your name? ")\nengine.say(f"hello, {name}")\nengine.runAndWait()\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Further, you can run the following code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Says "This was CS50"\n\nimport pyttsx3\n\nengine = pyttsx3.init()\nengine.say("This was CS50")\nengine.runAndWait()\n\n')))),(0,i.kt)("h2",{id:"summing-up"},"Summing Up"),(0,i.kt)("p",null,"In this lesson, you learned how the building blocks of programming from prior lessons can be implemented within Python. Further, you learned about how Python allowed for more simplified code. Also, you learned how to utilize various Python libraries. In the end, you learned that your skills as a programmer are not limited to a single programming language. Already, you are seeing how you are discovering a new way of learning through this course that could serve you in any programming language \u2013 and, perhaps, in nearly any avenue of learning! Specifically, we discussed\u2026"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Python"),(0,i.kt)("li",{parentName:"ul"},"Variables"),(0,i.kt)("li",{parentName:"ul"},"Conditionals"),(0,i.kt)("li",{parentName:"ul"},"Loops"),(0,i.kt)("li",{parentName:"ul"},"Types"),(0,i.kt)("li",{parentName:"ul"},"Libraries"),(0,i.kt)("li",{parentName:"ul"},"Dictionaries"),(0,i.kt)("li",{parentName:"ul"},"Command-line arguments"),(0,i.kt)("li",{parentName:"ul"},"Regular expressions")),(0,i.kt)("p",null,"See you next time!"))}c.isMDXComponent=!0},7449:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/cs50Week6Slide073-f53c8a16a9957e8935315e5dd899ecb0.png"},4496:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/cs50Week6Slide075-2552e7162b8a8e8efe34d35b534ef93a.png"},2353:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/cs50Week6Slide078-839222ad7dff10412a251795f881af17.png"}}]);