"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[9962],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>k});var a=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=a.createContext({}),m=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=m(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=m(r),p=o,k=u["".concat(i,".").concat(p)]||u[p]||c[p]||n;return r?a.createElement(k,l(l({ref:t},d),{},{components:r})):a.createElement(k,l({ref:t},d))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,l=new Array(n);l[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var m=2;m<n;m++)l[m]=r[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},49001:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>n,metadata:()=>s,toc:()=>m});var a=r(87462),o=(r(67294),r(3905));const n={title:"Coverage Tests - Project 1A Linked List Deque 61B",description:"Project 1 Flags."},l=void 0,s={unversionedId:"curriculum-resource/cs61b/projects/proj1a/flags",id:"curriculum-resource/cs61b/projects/proj1a/flags",title:"Coverage Tests - Project 1A Linked List Deque 61B",description:"Project 1 Flags.",source:"@site/docs/curriculum-resource/cs61b/projects/proj1a/flags.md",sourceDirName:"curriculum-resource/cs61b/projects/proj1a",slug:"/curriculum-resource/cs61b/projects/proj1a/flags",permalink:"/docs/curriculum-resource/cs61b/projects/proj1a/flags",draft:!1,tags:[],version:"current",frontMatter:{title:"Coverage Tests - Project 1A Linked List Deque 61B",description:"Project 1 Flags."},sidebar:"tutorialSidebar",previous:{title:"FAQ - Project 1A Linked List Deque 61B",permalink:"/docs/curriculum-resource/cs61b/projects/proj1a/faq"},next:{title:"Project 1B ArrayDeque61B",permalink:"/docs/curriculum-resource/cs61b/projects/proj1b/"}},i={},m=[{value:"Flags for add tests",id:"flags-for-add-tests",level:3},{value:"Flags for add after remove tests",id:"flags-for-add-after-remove-tests",level:3},{value:"Flags for remove tests",id:"flags-for-remove-tests",level:3},{value:"Flags for get tests",id:"flags-for-get-tests",level:3},{value:"Flags for size tests",id:"flags-for-size-tests",level:3},{value:"Flags for isEmpty tests",id:"flags-for-isempty-tests",level:3},{value:"Flags for toList tests",id:"flags-for-tolist-tests",level:3}],d={toc:m},u="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"flags-for-add-tests"},"Flags for add tests"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"add_first_from_empty": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"addFirst")," works on an empty deque."),(0,o.kt)("li",{parentName:"ul"},'"add_last_from_empty": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"addLast")," works on an empty deque."),(0,o.kt)("li",{parentName:"ul"},'"add_first_nonempty": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"addFirst")," works on a non-empty deque."),(0,o.kt)("li",{parentName:"ul"},'"add_last_nonempty": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"addLast")," works on a non-empty deque.")),(0,o.kt)("h3",{id:"flags-for-add-after-remove-tests"},"Flags for add after remove tests"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"add_first_after_remove_to_empty": Add some elements to a deque and remove them all, then check that ',(0,o.kt)("inlineCode",{parentName:"li"},"addFirst")," still works."),(0,o.kt)("li",{parentName:"ul"},'"add_last_after_remove_to_empty": Add some elements to a deque and remove them all, then check that ',(0,o.kt)("inlineCode",{parentName:"li"},"addLast")," still works.")),(0,o.kt)("h3",{id:"flags-for-remove-tests"},"Flags for remove tests"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"remove_first": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"removeFirst")," works."),(0,o.kt)("li",{parentName:"ul"},'"remove_last": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"removeLast")," works."),(0,o.kt)("li",{parentName:"ul"},'"remove_first_to_empty": Add some elements to a deque and remove almost all of them. Check that removing the last element with ',(0,o.kt)("inlineCode",{parentName:"li"},"removeFirst")," works."),(0,o.kt)("li",{parentName:"ul"},'"remove_last_to_empty": Add some elements to a deque and remove almost all of them. Check that removing the last element with ',(0,o.kt)("inlineCode",{parentName:"li"},"removeLast")," works."),(0,o.kt)("li",{parentName:"ul"},'"remove_first_to_one": Add some elements to a deque and remove almost all of them. Check that removing the second to last element with ',(0,o.kt)("inlineCode",{parentName:"li"},"removeFirst")," works."),(0,o.kt)("li",{parentName:"ul"},'"remove_last_to_one": Add some elements to a deque and remove almost all of them. Check that removing the second to last element with ',(0,o.kt)("inlineCode",{parentName:"li"},"removeLast")," works.")),(0,o.kt)("h3",{id:"flags-for-get-tests"},"Flags for get tests"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"get_valid": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"get")," works on a valid index."),(0,o.kt)("li",{parentName:"ul"},'"get_oob_large": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"get")," works on a large, out of bounds index."),(0,o.kt)("li",{parentName:"ul"},'"get_oob_neg": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"get")," works on a negative index."),(0,o.kt)("li",{parentName:"ul"},'"get_recursive_valid": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"getRecursive")," works on a valid index."),(0,o.kt)("li",{parentName:"ul"},'"get_recursive_oob_large": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"getRecursive")," works on a large, out of bounds index."),(0,o.kt)("li",{parentName:"ul"},'"get_recursive_oob_neg": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"getRecursive")," works on a negative index.")),(0,o.kt)("h3",{id:"flags-for-size-tests"},"Flags for size tests"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"size": Check that ',(0,o.kt)("inlineCode",{parentName:"li"},"size")," works."),(0,o.kt)("li",{parentName:"ul"},'"size_after_remove_to_empty": Add some elements to a deque and remove them all, then check that ',(0,o.kt)("inlineCode",{parentName:"li"},"size")," still works."),(0,o.kt)("li",{parentName:"ul"},'"size_after_remove_from_empty": Remove from an empty deque, then check that ',(0,o.kt)("inlineCode",{parentName:"li"},"size")," still works.")),(0,o.kt)("h3",{id:"flags-for-isempty-tests"},"Flags for isEmpty tests"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"is_empty_true": Check that isEmpty works on an empty deque.'),(0,o.kt)("li",{parentName:"ul"},'"is_empty_false": Check that isEmpty works on a non-empty deque.')),(0,o.kt)("h3",{id:"flags-for-tolist-tests"},"Flags for toList tests"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"to_list_empty": Check that toList works with empty LinkedListDeque61B.'),(0,o.kt)("li",{parentName:"ul"},'"to_list_nonempty": Check that toList works with non-empty LinkedListDeque61B.')))}c.isMDXComponent=!0}}]);