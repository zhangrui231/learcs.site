"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[3604],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>c});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},h=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),d=p(a),m=i,c=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return a?n.createElement(c,r(r({ref:t},h),{},{components:a})):n.createElement(c,r({ref:t},h))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7339:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const l={sidebar_position:1,description:"cs50x problem set less",title:"less"},r="Filter - CS50x 2023",o={unversionedId:"curriculum-resource/cs50x/cs50x_en/lecture5/problem set/less",id:"curriculum-resource/cs50x/cs50x_en/lecture5/problem set/less",title:"less",description:"cs50x problem set less",source:"@site/docs/curriculum-resource/cs50x/cs50x_en/lecture5/problem set/less.md",sourceDirName:"curriculum-resource/cs50x/cs50x_en/lecture5/problem set",slug:"/curriculum-resource/cs50x/cs50x_en/lecture5/problem set/less",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture5/problem set/less",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"cs50x problem set less",title:"less"},sidebar:"tutorialSidebar",previous:{title:"Problem Set",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture5/problem set/"},next:{title:"more",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture5/problem set/more"}},s={},p=[{value:"Background",id:"background",level:2},{value:"Bitmaps",id:"bitmaps",level:3},{value:"A Bit(map) More Technical",id:"a-bitmap-more-technical",level:3},{value:"Image Filtering",id:"image-filtering",level:3},{value:"Grayscale",id:"grayscale",level:4},{value:"Sepia",id:"sepia",level:4},{value:"Reflection",id:"reflection",level:4},{value:"Blur",id:"blur",level:4},{value:"Getting Started",id:"getting-started",level:2},{value:"Understanding",id:"understanding",level:2},{value:"<code>bmp.h</code>",id:"bmph",level:3},{value:"<code>filter.c</code>",id:"filterc",level:3},{value:"<code>helpers.h</code>",id:"helpersh",level:3},{value:"<code>helpers.c</code>",id:"helpersc",level:3},{value:"<code>Makefile</code>",id:"makefile",level:3},{value:"Specification",id:"specification",level:2},{value:"Walkthrough",id:"walkthrough",level:2},{value:"Usage",id:"usage",level:2},{value:"Hints",id:"hints",level:2},{value:"Testing",id:"testing",level:2},{value:"How to Submit",id:"how-to-submit",level:2}],h={toc:p},d="wrapper";function u(e){let{components:t,...l}=e;return(0,i.kt)(d,(0,n.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"filter---cs50x-2023"},"Filter - CS50x 2023"),(0,i.kt)("p",null,"Implement a program that applies filters to BMPs, per the below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ./filter -r IMAGE.bmp REFLECTED.bmp\n\n")),(0,i.kt)("p",null,"where ",(0,i.kt)("inlineCode",{parentName:"p"},"IMAGE.bmp")," is the name of an image file and ",(0,i.kt)("inlineCode",{parentName:"p"},"REFLECTED.bmp")," is the name given to an output image file, now reflected."),(0,i.kt)("h2",{id:"background"},(0,i.kt)("a",{parentName:"h2",href:"#background"},"Background")),(0,i.kt)("h3",{id:"bitmaps"},(0,i.kt)("a",{parentName:"h3",href:"#bitmaps"},"Bitmaps")),(0,i.kt)("p",null,"Perhaps the simplest way to represent an image is with a grid of pixels (i.e., dots), each of which can be of a different color. For black-and-white images, we thus need 1 bit per pixel, as 0 could represent black and 1 could represent white, as in the below."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"a simple bitmap",src:a(73504).Z,width:"600",height:"278"})),(0,i.kt)("p",null,"In this sense, then, is an image just a bitmap (i.e., a map of bits). For more colorful images, you simply need more bits per pixel. A file format (like ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/BMP_file_format"},"BMP"),", ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/JPEG"},"JPEG"),", or ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Portable_Network_Graphics"},"PNG"),") that supports \u201c24-bit color\u201d uses 24 bits per pixel. (BMP actually supports 1-, 4-, 8-, 16-, 24-, and 32-bit color.)"),(0,i.kt)("p",null,"A 24-bit BMP uses 8 bits to signify the amount of red in a pixel\u2019s color, 8 bits to signify the amount of green in a pixel\u2019s color, and 8 bits to signify the amount of blue in a pixel\u2019s color. If you\u2019ve ever heard of RGB color, well, there you have it: red, green, blue."),(0,i.kt)("p",null,"If the R, G, and B values of some pixel in a BMP are, say, ",(0,i.kt)("inlineCode",{parentName:"p"},"0xff"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00")," in hexadecimal, that pixel is purely red, as ",(0,i.kt)("inlineCode",{parentName:"p"},"0xff")," (otherwise known as ",(0,i.kt)("inlineCode",{parentName:"p"},"255")," in decimal) implies \u201ca lot of red,\u201d while ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00")," imply \u201cno green\u201d and \u201cno blue,\u201d respectively."),(0,i.kt)("h3",{id:"a-bitmap-more-technical"},(0,i.kt)("a",{parentName:"h3",href:"#a-bitmap-more-technical"},"A Bit(map) More Technical")),(0,i.kt)("p",null,"Recall that a file is just a sequence of bits, arranged in some fashion. A 24-bit BMP file, then, is essentially just a sequence of bits, (almost) every 24 of which happen to represent some pixel\u2019s color. But a BMP file also contains some \u201cmetadata,\u201d information like an image\u2019s height and width. That metadata is stored at the beginning of the file in the form of two data structures generally referred to as \u201cheaders,\u201d not to be confused with C\u2019s header files. (Incidentally, these headers have evolved over time. This problem uses the latest version of Microsoft\u2019s BMP format, 4.0, which debuted with Windows 95.)"),(0,i.kt)("p",null,"The first of these headers, called ",(0,i.kt)("inlineCode",{parentName:"p"},"BITMAPFILEHEADER"),", is 14 bytes long. (Recall that 1 byte equals 8 bits.) The second of these headers, called ",(0,i.kt)("inlineCode",{parentName:"p"},"BITMAPINFOHEADER"),", is 40 bytes long. Immediately following these headers is the actual bitmap: an array of bytes, triples of which represent a pixel\u2019s color. However, BMP stores these triples backwards (i.e., as BGR), with 8 bits for blue, followed by 8 bits for green, followed by 8 bits for red. (Some BMPs also store the entire bitmap backwards, with an image\u2019s top row at the end of the BMP file. But we\u2019ve stored this problem set\u2019s BMPs as described herein, with each bitmap\u2019s top row first and bottom row last.) In other words, were we to convert the 1-bit smiley above to a 24-bit smiley, substituting red for black, a 24-bit BMP would store this bitmap as follows, where ",(0,i.kt)("inlineCode",{parentName:"p"},"0000ff")," signifies red and ",(0,i.kt)("inlineCode",{parentName:"p"},"ffffff")," signifies white; we\u2019ve highlighted in red all instances of ",(0,i.kt)("inlineCode",{parentName:"p"},"0000ff"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"red smile",src:a(97074).Z,width:"600",height:"306"})),(0,i.kt)("p",null,"Because we\u2019ve presented these bits from left to right, top to bottom, in 8 columns, you can actually see the red smiley if you take a step back."),(0,i.kt)("p",null,"To be clear, recall that a hexadecimal digit represents 4 bits. Accordingly, ",(0,i.kt)("inlineCode",{parentName:"p"},"ffffff")," in hexadecimal actually signifies ",(0,i.kt)("inlineCode",{parentName:"p"},"111111111111111111111111")," in binary."),(0,i.kt)("p",null,"Notice that you could represent a bitmap as a 2-dimensional array of pixels: where the image is an array of rows, each row is an array of pixels. Indeed, that\u2019s how we\u2019ve chosen to represent bitmap images in this problem."),(0,i.kt)("h3",{id:"image-filtering"},(0,i.kt)("a",{parentName:"h3",href:"#image-filtering"},"Image Filtering")),(0,i.kt)("p",null,"What does it even mean to filter an image? You can think of filtering an image as taking the pixels of some original image, and modifying each pixel in such a way that a particular effect is apparent in the resulting image."),(0,i.kt)("h4",{id:"grayscale"},(0,i.kt)("a",{parentName:"h4",href:"#grayscale"},"Grayscale")),(0,i.kt)("p",null,"One common filter is the \u201cgrayscale\u201d filter, where we take an image and want to convert it to black-and-white. How does that work?"),(0,i.kt)("p",null,"Recall that if the red, green, and blue values are all set to ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00")," (hexadecimal for ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"), then the pixel is black. And if all values are set to ",(0,i.kt)("inlineCode",{parentName:"p"},"0xff")," (hexadecimal for ",(0,i.kt)("inlineCode",{parentName:"p"},"255"),"), then the pixel is white. So long as the red, green, and blue values are all equal, the result will be varying shades of gray along the black-white spectrum, with higher values meaning lighter shades (closer to white) and lower values meaning darker shades (closer to black)."),(0,i.kt)("p",null,"So to convert a pixel to grayscale, we just need to make sure the red, green, and blue values are all the same value. But how do we know what value to make them? Well, it\u2019s probably reasonable to expect that if the original red, green, and blue values were all pretty high, then the new value should also be pretty high. And if the original values were all low, then the new value should also be low."),(0,i.kt)("p",null,"In fact, to ensure each pixel of the new image still has the same general brightness or darkness as the old image, we can take the average of the red, green, and blue values to determine what shade of grey to make the new pixel."),(0,i.kt)("p",null,"If you apply that to each pixel in the image, the result will be an image converted to grayscale."),(0,i.kt)("h4",{id:"sepia"},(0,i.kt)("a",{parentName:"h4",href:"#sepia"},"Sepia")),(0,i.kt)("p",null,"Most image editing programs support a \u201csepia\u201d filter, which gives images an old-timey feel by making the whole image look a bit reddish-brown."),(0,i.kt)("p",null,"An image can be converted to sepia by taking each pixel, and computing new red, green, and blue values based on the original values of the three."),(0,i.kt)("p",null,"There are a number of algorithms for converting an image to sepia, but for this problem, we\u2019ll ask you to use the following algorithm. For each pixel, the sepia color values should be calculated based on the original color values per the below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  sepiaRed = .393 * originalRed + .769 * originalGreen + .189 * originalBlue\n  sepiaGreen = .349 * originalRed + .686 * originalGreen + .168 * originalBlue\n  sepiaBlue = .272 * originalRed + .534 * originalGreen + .131 * originalBlue\n\n")),(0,i.kt)("p",null,"Of course, the result of each of these formulas may not be an integer, but each value could be rounded to the nearest integer. It\u2019s also possible that the result of the formula is a number greater than 255, the maximum value for an 8-bit color value. In that case, the red, green, and blue values should be capped at 255. As a result, we can guarantee that the resulting red, green, and blue values will be whole numbers between 0 and 255, inclusive."),(0,i.kt)("h4",{id:"reflection"},(0,i.kt)("a",{parentName:"h4",href:"#reflection"},"Reflection")),(0,i.kt)("p",null,"Some filters might also move pixels around. Reflecting an image, for example, is a filter where the resulting image is what you would get by placing the original image in front of a mirror. So any pixels on the left side of the image should end up on the right, and vice versa."),(0,i.kt)("p",null,"Note that all of the original pixels of the original image will still be present in the reflected image, it\u2019s just that those pixels may have rearranged to be in a different place in the image."),(0,i.kt)("h4",{id:"blur"},(0,i.kt)("a",{parentName:"h4",href:"#blur"},"Blur")),(0,i.kt)("p",null,"There are a number of ways to create the effect of blurring or softening an image. For this problem, we\u2019ll use the \u201cbox blur,\u201d which works by taking each pixel and, for each color value, giving it a new value by averaging the color values of neighboring pixels."),(0,i.kt)("p",null,"Consider the following grid of pixels, where we\u2019ve numbered each pixel."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"a grid of pixels",src:a(7572).Z,width:"378",height:"378"})),(0,i.kt)("p",null,"The new value of each pixel would be the average of the values of all of the pixels that are within 1 row and column of the original pixel (forming a 3x3 box). For example, each of the color values for pixel 6 would be obtained by averaging the original color values of pixels 1, 2, 3, 5, 6, 7, 9, 10, and 11 (note that pixel 6 itself is included in the average). Likewise, the color values for pixel 11 would be be obtained by averaging the color values of pixels 6, 7, 8, 10, 11, 12, 14, 15 and 16."),(0,i.kt)("p",null,"For a pixel along the edge or corner, like pixel 15, we would still look for all pixels within 1 row and column: in this case, pixels 10, 11, 12, 14, 15, and 16."),(0,i.kt)("h2",{id:"getting-started"},(0,i.kt)("a",{parentName:"h2",href:"#getting-started"},"Getting Started")),(0,i.kt)("p",null,"Log into ",(0,i.kt)("a",{parentName:"p",href:"https://cs50.dev/"},"cs50.dev"),", click on your terminal window, and execute ",(0,i.kt)("inlineCode",{parentName:"p"},"cd")," by itself. You should find that your terminal window\u2019s prompt resembles the below:"),(0,i.kt)("p",null,"Next execute"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"wget https://cdn.cs50.net/2022/fall/psets/4/filter-less.zip\n\n")),(0,i.kt)("p",null,"in order to download a ZIP called ",(0,i.kt)("inlineCode",{parentName:"p"},"filter-less.zip")," into your codespace."),(0,i.kt)("p",null,"Then execute"),(0,i.kt)("p",null,"to create a folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"filter-less"),". You no longer need the ZIP file, so you can execute"),(0,i.kt)("p",null,"and respond with \u201cy\u201d followed by Enter at the prompt to remove the ZIP file you downloaded."),(0,i.kt)("p",null,"Now type"),(0,i.kt)("p",null,"followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below."),(0,i.kt)("p",null,"Execute ",(0,i.kt)("inlineCode",{parentName:"p"},"ls")," by itself, and you should see a few files: ",(0,i.kt)("inlineCode",{parentName:"p"},"bmp.h"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"filter.c"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"helpers.h"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"helpers.c"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Makefile"),". You should also see a folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"images")," with four BMP files. If you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"),(0,i.kt)("h2",{id:"understanding"},(0,i.kt)("a",{parentName:"h2",href:"#understanding"},"Understanding")),(0,i.kt)("p",null,"Let\u2019s now take a look at some of the files provided to you as distribution code to get an understanding for what\u2019s inside of them."),(0,i.kt)("h3",{id:"bmph"},(0,i.kt)("a",{parentName:"h3",href:"#bmph"},(0,i.kt)("inlineCode",{parentName:"a"},"bmp.h"))),(0,i.kt)("p",null,"Open up ",(0,i.kt)("inlineCode",{parentName:"p"},"bmp.h")," (as by double-clicking on it in the file browser) and have a look."),(0,i.kt)("p",null,"You\u2019ll see definitions of the headers we\u2019ve mentioned (",(0,i.kt)("inlineCode",{parentName:"p"},"BITMAPINFOHEADER")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"BITMAPFILEHEADER"),"). In addition, that file defines ",(0,i.kt)("inlineCode",{parentName:"p"},"BYTE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DWORD"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LONG"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"WORD"),", data types normally found in the world of Windows programming. Notice how they\u2019re just aliases for primitives with which you are (hopefully) already familiar. It appears that ",(0,i.kt)("inlineCode",{parentName:"p"},"BITMAPFILEHEADER")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"BITMAPINFOHEADER")," make use of these types."),(0,i.kt)("p",null,"Perhaps most importantly for you, this file also defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"RGBTRIPLE")," that, quite simply, \u201cencapsulates\u201d three bytes: one blue, one green, and one red (the order, recall, in which we expect to find RGB triples actually on disk)."),(0,i.kt)("p",null,"Why are these ",(0,i.kt)("inlineCode",{parentName:"p"},"struct"),"s useful? Well, recall that a file is just a sequence of bytes (or, ultimately, bits) on disk. But those bytes are generally ordered in such a way that the first few represent something, the next few represent something else, and so on. \u201cFile formats\u201d exist because the world has standardized what bytes mean what. Now, we could just read a file from disk into RAM as one big array of bytes. And we could just remember that the byte at ",(0,i.kt)("inlineCode",{parentName:"p"},"array[i]")," represents one thing, while the byte at ",(0,i.kt)("inlineCode",{parentName:"p"},"array[j]")," represents another. But why not give some of those bytes names so that we can retrieve them from memory more easily? That\u2019s precisely what the structs in ",(0,i.kt)("inlineCode",{parentName:"p"},"bmp.h")," allow us to do. Rather than think of some file as one long sequence of bytes, we can instead think of it as a sequence of ",(0,i.kt)("inlineCode",{parentName:"p"},"struct"),"s."),(0,i.kt)("h3",{id:"filterc"},(0,i.kt)("a",{parentName:"h3",href:"#filterc"},(0,i.kt)("inlineCode",{parentName:"a"},"filter.c"))),(0,i.kt)("p",null,"Now, let\u2019s open up ",(0,i.kt)("inlineCode",{parentName:"p"},"filter.c"),". This file has been written already for you, but there are a couple important points worth noting here."),(0,i.kt)("p",null,"First, notice the definition of ",(0,i.kt)("inlineCode",{parentName:"p"},"filters")," on line 10. That string tells the program what the allowable command-line arguments to the program are: ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"g"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"r"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),". Each of them specifies a different filter that we might apply to our images: blur, grayscale, reflection, and sepia."),(0,i.kt)("p",null,"The next several lines open up an image file, make sure it\u2019s indeed a BMP file, and read all of the pixel information into a 2D array called ",(0,i.kt)("inlineCode",{parentName:"p"},"image"),"."),(0,i.kt)("p",null,"Scroll down to the ",(0,i.kt)("inlineCode",{parentName:"p"},"switch")," statement that begins on line 101. Notice that, depending on what ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," we\u2019ve chosen, a different function is called: if the user chooses filter ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),", the program calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"blur")," function; if ",(0,i.kt)("inlineCode",{parentName:"p"},"g"),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"grayscale")," is called; if ",(0,i.kt)("inlineCode",{parentName:"p"},"r"),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"reflect")," is called; and if ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"sepia")," is called. Notice, too, that each of these functions take as arguments the height of the image, the width of the image, and the 2D array of pixels."),(0,i.kt)("p",null,"These are the functions you\u2019ll (soon!) implement. As you might imagine, the goal is for each of these functions to edit the 2D array of pixels in such a way that the desired filter is applied to the image."),(0,i.kt)("p",null,"The remaining lines of the program take the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"image")," and write them out to a new image file."),(0,i.kt)("h3",{id:"helpersh"},(0,i.kt)("a",{parentName:"h3",href:"#helpersh"},(0,i.kt)("inlineCode",{parentName:"a"},"helpers.h"))),(0,i.kt)("p",null,"Next, take a look at ",(0,i.kt)("inlineCode",{parentName:"p"},"helpers.h"),". This file is quite short, and just provides the function prototypes for the functions you saw earlier."),(0,i.kt)("p",null,"Here, take note of the fact that each function takes a 2D array called ",(0,i.kt)("inlineCode",{parentName:"p"},"image")," as an argument, where ",(0,i.kt)("inlineCode",{parentName:"p"},"image")," is an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," many rows, and each row is itself another array of ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," many ",(0,i.kt)("inlineCode",{parentName:"p"},"RGBTRIPLE"),"s. So if ",(0,i.kt)("inlineCode",{parentName:"p"},"image")," represents the whole picture, then ",(0,i.kt)("inlineCode",{parentName:"p"},"image[0]")," represents the first row, and ",(0,i.kt)("inlineCode",{parentName:"p"},"image[0][0]")," represents the pixel in the upper-left corner of the image."),(0,i.kt)("h3",{id:"helpersc"},(0,i.kt)("a",{parentName:"h3",href:"#helpersc"},(0,i.kt)("inlineCode",{parentName:"a"},"helpers.c"))),(0,i.kt)("p",null,"Now, open up ",(0,i.kt)("inlineCode",{parentName:"p"},"helpers.c"),". Here\u2019s where the implementation of the functions declared in ",(0,i.kt)("inlineCode",{parentName:"p"},"helpers.h")," belong. But note that, right now, the implementations are missing! This part is up to you."),(0,i.kt)("h3",{id:"makefile"},(0,i.kt)("a",{parentName:"h3",href:"#makefile"},(0,i.kt)("inlineCode",{parentName:"a"},"Makefile"))),(0,i.kt)("p",null,"Finally, let\u2019s look at ",(0,i.kt)("inlineCode",{parentName:"p"},"Makefile"),". This file specifies what should happen when we run a terminal command like ",(0,i.kt)("inlineCode",{parentName:"p"},"make filter"),". Whereas programs you may have written before were confined to just one file, ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," seems to use multiple files: ",(0,i.kt)("inlineCode",{parentName:"p"},"filter.c")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"helpers.c"),". So we\u2019ll need to tell ",(0,i.kt)("inlineCode",{parentName:"p"},"make")," how to compile this file."),(0,i.kt)("p",null,"Try compiling ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," for yourself by going to your terminal and running"),(0,i.kt)("p",null,"Then, you can run the program by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ./filter -g images/yard.bmp out.bmp\n\n")),(0,i.kt)("p",null,"which takes the image at ",(0,i.kt)("inlineCode",{parentName:"p"},"images/yard.bmp"),", and generates a new image called ",(0,i.kt)("inlineCode",{parentName:"p"},"out.bmp")," after running the pixels through the ",(0,i.kt)("inlineCode",{parentName:"p"},"grayscale")," function. ",(0,i.kt)("inlineCode",{parentName:"p"},"grayscale")," doesn\u2019t do anything just yet, though, so the output image should look the same as the original yard."),(0,i.kt)("h2",{id:"specification"},(0,i.kt)("a",{parentName:"h2",href:"#specification"},"Specification")),(0,i.kt)("p",null,"Implement the functions in ",(0,i.kt)("inlineCode",{parentName:"p"},"helpers.c")," such that a user can apply grayscale, sepia, reflection, or blur filters to their images."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The function ",(0,i.kt)("inlineCode",{parentName:"li"},"grayscale")," should take an image and turn it into a black-and-white version of the same image."),(0,i.kt)("li",{parentName:"ul"},"The function ",(0,i.kt)("inlineCode",{parentName:"li"},"sepia")," should take an image and turn it into a sepia version of the same image."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"reflect")," function should take an image and reflect it horizontally."),(0,i.kt)("li",{parentName:"ul"},"Finally, the ",(0,i.kt)("inlineCode",{parentName:"li"},"blur")," function should take an image and turn it into a box-blurred version of the same image.")),(0,i.kt)("p",null,"You should not modify any of the function signatures, nor should you modify any other files other than ",(0,i.kt)("inlineCode",{parentName:"p"},"helpers.c"),"."),(0,i.kt)("h2",{id:"walkthrough"},(0,i.kt)("a",{parentName:"h2",href:"#walkthrough"},"Walkthrough")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Please note that there are 5 videos in this playlist.")),(0,i.kt)("h2",{id:"usage"},(0,i.kt)("a",{parentName:"h2",href:"#usage"},"Usage")),(0,i.kt)("p",null,"Your program should behave per the examples below. ",(0,i.kt)("inlineCode",{parentName:"p"},"INFILE.bmp")," is the name of the input image and ",(0,i.kt)("inlineCode",{parentName:"p"},"OUTFILE.bmp")," is the name of the resulting image after a filter has been applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ./filter -g INFILE.bmp OUTFILE.bmp\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ./filter -s INFILE.bmp OUTFILE.bmp\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ./filter -r INFILE.bmp OUTFILE.bmp\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ ./filter -b INFILE.bmp OUTFILE.bmp\n\n")),(0,i.kt)("h2",{id:"hints"},(0,i.kt)("a",{parentName:"h2",href:"#hints"},"Hints")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The values of a pixel\u2019s ",(0,i.kt)("inlineCode",{parentName:"li"},"rgbtRed"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"rgbtGreen"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"rgbtBlue")," components are all integers, so be sure to round any floating-point numbers to the nearest integer when assigning them to a pixel value!"),(0,i.kt)("li",{parentName:"ul"},"When implementing the ",(0,i.kt)("inlineCode",{parentName:"li"},"grayscale")," function, you\u2019ll need to average the values of 3 integers. Why might you want to divide the sum of these integers by 3.0 and not 3?"),(0,i.kt)("li",{parentName:"ul"},"In the ",(0,i.kt)("inlineCode",{parentName:"li"},"reflect")," function, you\u2019ll need to swap the values of pixels on opposite sides of a row. Recall from lecture how we implemented swapping two values with a temporary variable. No need to use a separate function for swapping unless you would like to!"),(0,i.kt)("li",{parentName:"ul"},"How might a function that returns the lesser of two integers come in handy while implementing ",(0,i.kt)("inlineCode",{parentName:"li"},"sepia"),", particularly when you need to make sure a color\u2019s value is no higher than 255?"),(0,i.kt)("li",{parentName:"ul"},"When implementing the ",(0,i.kt)("inlineCode",{parentName:"li"},"blur")," function, you might find that blurring one pixel ends up affecting the blur of another pixel. Perhaps create a copy of ",(0,i.kt)("inlineCode",{parentName:"li"},"image")," (the function\u2019s third argument) by declaring a new (two-dimensional) array with code like ",(0,i.kt)("inlineCode",{parentName:"li"},"RGBTRIPLE copy[height][width];")," and copying ",(0,i.kt)("inlineCode",{parentName:"li"},"image")," into ",(0,i.kt)("inlineCode",{parentName:"li"},"copy"),", pixel by pixel, with nested ",(0,i.kt)("inlineCode",{parentName:"li"},"for")," loops? And then read pixels\u2019 colors from ",(0,i.kt)("inlineCode",{parentName:"li"},"copy")," but write (i.e., change) pixels\u2019 colors in ",(0,i.kt)("inlineCode",{parentName:"li"},"image"),"?")),(0,i.kt)("h2",{id:"testing"},(0,i.kt)("a",{parentName:"h2",href:"#testing"},"Testing")),(0,i.kt)("p",null,"Be sure to test all of your filters on the sample bitmap files provided!"),(0,i.kt)("p",null,"Execute the below to evaluate the correctness of your code using ",(0,i.kt)("inlineCode",{parentName:"p"},"check50"),". But be sure to compile and test it yourself as well!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"check50 cs50/problems/2023/x/filter/less\n\n")),(0,i.kt)("p",null,"Execute the below to evaluate the style of your code using ",(0,i.kt)("inlineCode",{parentName:"p"},"style50"),"."),(0,i.kt)("h2",{id:"how-to-submit"},(0,i.kt)("a",{parentName:"h2",href:"#how-to-submit"},"How to Submit")),(0,i.kt)("p",null,"In your terminal, execute the below to submit your work."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"submit50 cs50/problems/2023/x/filter/less\n\n")))}u.isMDXComponent=!0},73504:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/bitmap-15476bd2f43024a198ecbe847bca7abc.png"},7572:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/grid-24c5bb0cf2948b2c5374f8dc67a20438.png"},97074:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/red_smile-579a5e7bde6f21d25523bd81d5a8de71.png"}}]);