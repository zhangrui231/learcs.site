"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[6998],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(t),h=r,c=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return t?a.createElement(c,i(i({ref:n},m),{},{components:t})):a.createElement(c,i({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},23455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={title:"02-variables"},i="Variables, expressions, and statements",s={unversionedId:"curriculum-resource/py4e/book/02",id:"curriculum-resource/py4e/book/02",title:"02-variables",description:"Values and types",source:"@site/docs/curriculum-resource/py4e/book/02.md",sourceDirName:"curriculum-resource/py4e/book",slug:"/curriculum-resource/py4e/book/02",permalink:"/docs/curriculum-resource/py4e/book/02",draft:!1,tags:[],version:"current",frontMatter:{title:"02-variables"},sidebar:"tutorialSidebar",previous:{title:"01-intro",permalink:"/docs/curriculum-resource/py4e/book/01"},next:{title:"02-conditional",permalink:"/docs/curriculum-resource/py4e/book/03"}},l={},p=[{value:"Values and types",id:"values-and-types",level:2},{value:"Variables",id:"variables",level:2},{value:"Variable names and keywords",id:"variable-names-and-keywords",level:2},{value:"Statements",id:"statements",level:2},{value:"Operators and operands",id:"operators-and-operands",level:2},{value:"Expressions",id:"expressions",level:2},{value:"Order of operations",id:"order-of-operations",level:2},{value:"Modulus operator",id:"modulus-operator",level:2},{value:"String operations",id:"string-operations",level:2},{value:"Asking the user for input",id:"asking-the-user-for-input",level:2},{value:"Comments",id:"comments",level:2},{value:"Choosing mnemonic variable names",id:"choosing-mnemonic-variable-names",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Exercises",id:"exercises",level:2}],m={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"variables-expressions-and-statements"},"Variables, expressions, and statements"),(0,r.kt)("h2",{id:"values-and-types"},"Values and types"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"value")," is one of the basic things a program works with,\nlike a letter or a number. The values we have seen so far are 1, 2, and\n\u201cHello, World!\u201d"),(0,r.kt)("p",null,"These values belong to different ",(0,r.kt)("em",{parentName:"p"},"types"),": 2 is an integer, and\n\u201cHello, World!\u201d is a ",(0,r.kt)("em",{parentName:"p"},"string"),", so called because it contains a\n\u201cstring\u201d of letters. You (and the interpreter) can identify strings\nbecause they are enclosed in quotation marks."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"print")," statement also works for integers. We use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"python")," command to start the interpreter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python\n>>> print(4)\n4\n")),(0,r.kt)("p",null,"If you are not sure what type a value has, the interpreter can tell\nyou."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> type('Hello, World!')\n<class 'str'>\n>>> type(17)\n<class 'int'>\n")),(0,r.kt)("p",null,"Not surprisingly, strings belong to the type ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," and\nintegers belong to the type ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),". Less obviously, numbers\nwith a decimal point belong to a type called ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),", because\nthese numbers are represented in a format called ",(0,r.kt)("em",{parentName:"p"},"floating"),"\n",(0,r.kt)("em",{parentName:"p"},"point"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> type(3.2)\n<class 'float'>\n")),(0,r.kt)("p",null,"What about values like \u201c17\u201d and \u201c3.2\u201d? They look like numbers, but\nthey are in quotation marks like strings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> type('17')\n<class 'str'>\n>>> type('3.2')\n<class 'str'>\n")),(0,r.kt)("p",null,"They\u2019re strings."),(0,r.kt)("p",null,"When you type a large integer, you might be tempted to use commas\nbetween groups of three digits, as in 1,000,000. This is not a legal\ninteger in Python, but it is legal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> print(1,000,000)\n1 0 0\n")),(0,r.kt)("p",null,"Well, that\u2019s not what we expected at all! Python interprets 1,000,000\nas a comma-separated sequence of integers, which it prints with spaces\nbetween."),(0,r.kt)("p",null,"This is the first example we have seen of a semantic error: the code\nruns without producing an error message, but it doesn\u2019t do the \u201cright\u201d\nthing."),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("p",null,"One of the most powerful features of a programming language is the\nability to manipulate ",(0,r.kt)("em",{parentName:"p"},"variables"),". A variable is a name that\nrefers to a value."),(0,r.kt)("p",null,"An ",(0,r.kt)("em",{parentName:"p"},"assignment statement")," creates new variables and gives them\nvalues:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> message = 'And now for something completely different'\n>>> n = 17\n>>> pi = 3.1415926535897931\n")),(0,r.kt)("p",null,"This example makes three assignments. The first assigns a string to a\nnew variable named ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"; the second assigns the integer\n17 to ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),"; the third assigns the (approximate) value of ",(0,r.kt)("em",{parentName:"p"},"\u03c0")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"pi"),"."),(0,r.kt)("p",null,"To display the value of a variable, you can use a print\nstatement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> print(n)\n17\n>>> print(pi)\n3.141592653589793\n")),(0,r.kt)("p",null,"The type of a variable is the type of the value it refers to."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> type(message)\n<class 'str'>\n>>> type(n)\n<class 'int'>\n>>> type(pi)\n<class 'float'>\n")),(0,r.kt)("h2",{id:"variable-names-and-keywords"},"Variable names and keywords"),(0,r.kt)("p",null,"Programmers generally choose names for their variables that are\nmeaningful and document what the variable is used for."),(0,r.kt)("p",null,"Variable names can be arbitrarily long. They can contain both letters\nand numbers, but they cannot start with a number. It is legal to use\nuppercase letters, but it is a good idea to begin variable names with a\nlowercase letter (you\u2019ll see why later)."),(0,r.kt)("p",null,"The underscore character ( ","_"," ) can appear in a name. It is often used\nin names with multiple words, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"my_name")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"airspeed_of_unladen_swallow"),". Variable names can start with\nan underscore character, but we generally avoid doing this unless we are\nwriting library code for others to use."),(0,r.kt)("p",null,"If you give a variable an illegal name, you get a syntax error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> 76trombones = 'big parade'\nSyntaxError: invalid syntax\n>>> more@ = 1000000\nSyntaxError: invalid syntax\n>>> class = 'Advanced Theoretical Zymurgy'\nSyntaxError: invalid syntax\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"76trombones")," is illegal because it begins with a number.\n",(0,r.kt)("inlineCode",{parentName:"p"},"more@")," is illegal because it contains an illegal character,\n@. But what\u2019s wrong with ",(0,r.kt)("inlineCode",{parentName:"p"},"class"),"?"),(0,r.kt)("p",null,"It turns out that ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," is one of Python\u2019s\n",(0,r.kt)("em",{parentName:"p"},"keywords"),". The interpreter uses keywords to recognize the\nstructure of the program, and they cannot be used as variable names."),(0,r.kt)("p",null,"Python reserves 35 keywords:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"False      await      else       import     pass\nNone       break      except     in         raise\nTrue       class      finally    is         return\nand        continue   for        lambda     try\nas         def        from       nonlocal   while\nassert     del        global     not        with\nasync      elif       if         or         yield\n")),(0,r.kt)("p",null,"You might want to keep this list handy. If the interpreter complains\nabout one of your variable names and you don\u2019t know why, see if it is on\nthis list."),(0,r.kt)("h2",{id:"statements"},"Statements"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"statement")," is a unit of code that the Python interpreter\ncan execute. We have seen two kinds of statements: print being an\nexpression statement and assignment."),(0,r.kt)("p",null,"When you type a statement in interactive mode, the interpreter\nexecutes it and displays the result, if there is one."),(0,r.kt)("p",null,"A script usually contains a sequence of statements. If there is more\nthan one statement, the results appear one at a time as the statements\nexecute."),(0,r.kt)("p",null,"For example, the script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"print(1)\nx = 2\nprint(x)\n")),(0,r.kt)("p",null,"produces the output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1\n2\n")),(0,r.kt)("p",null,"The assignment statement produces no output."),(0,r.kt)("h2",{id:"operators-and-operands"},"Operators and operands"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Operators")," are special symbols that represent computations\nlike addition and multiplication. The values the operator is applied to\nare called ",(0,r.kt)("em",{parentName:"p"},"operands"),"."),(0,r.kt)("p",null,"The operators ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"/"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"**")," perform addition, subtraction,\nmultiplication, division, and exponentiation, as in the following\nexamples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"20+32\nhour-1\nhour*60+minute\nminute/60\n5**2\n(5+9)*(15-7)\n")),(0,r.kt)("p",null,"There has been a change in the division operator between Python 2 and\nPython 3. In Python 3, the result of this division is a floating point\nresult:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> minute = 59\n>>> minute/60\n0.9833333333333333\n")),(0,r.kt)("p",null,"The division operator in Python 2 would divide two integers and\ntruncate the result to an integer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> minute = 59\n>>> minute/60\n0\n")),(0,r.kt)("p",null,"To obtain the same answer in Python 3 use floored ( ",(0,r.kt)("inlineCode",{parentName:"p"},"//"),"\ninteger) division."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> minute = 59\n>>> minute//60\n0\n")),(0,r.kt)("p",null,"In Python 3 integer division functions much more as you would expect\nif you entered the expression on a calculator."),(0,r.kt)("h2",{id:"expressions"},"Expressions"),(0,r.kt)("p",null,"An ",(0,r.kt)("em",{parentName:"p"},"expression")," is a combination of values, variables, and\noperators. A value all by itself is considered an expression, and so is\na variable, so the following are all legal expressions (assuming that\nthe variable ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," has been assigned a value):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"17\nx\nx + 17\n")),(0,r.kt)("p",null,"If you type an expression in interactive mode, the interpreter\n",(0,r.kt)("em",{parentName:"p"},"evaluates")," it and displays the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> 1 + 1\n2\n")),(0,r.kt)("p",null,"But in a script, an expression all by itself doesn\u2019t do anything!\nThis is a common source of confusion for beginners."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise 1:")," Type the following statements in the\nPython interpreter to see what they do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"5\nx = 5\nx + 1\n")),(0,r.kt)("h2",{id:"order-of-operations"},"Order of operations"),(0,r.kt)("p",null,"When more than one operator appears in an expression, the order of\nevaluation depends on the ",(0,r.kt)("em",{parentName:"p"},"rules of precedence"),". For mathematical\noperators, Python follows mathematical convention. The acronym\n",(0,r.kt)("em",{parentName:"p"},"PEMDAS")," is a useful way to remember the rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"P")," arentheses have the highest precedence and can be used\nto force an expression to evaluate in the order you want. Since\nexpressions in parentheses are evaluated first,\n",(0,r.kt)("inlineCode",{parentName:"p"},"2 *     (3-1)")," is 4, and ",(0,r.kt)("inlineCode",{parentName:"p"},"(1+1)**(5-2)")," is 8. You\ncan also use parentheses to make an expression easier to read, as in\n",(0,r.kt)("inlineCode",{parentName:"p"},"(minute * 100) / 60"),", even if it doesn\u2019t change the\nresult.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"E")," xponentiation has the next highest precedence, so\n",(0,r.kt)("inlineCode",{parentName:"p"},"2**1+1")," is 3, not 4, and ",(0,r.kt)("inlineCode",{parentName:"p"},"3*1**3")," is 3, not"))),(0,r.kt)("ol",{start:27},(0,r.kt)("li",{parentName:"ol"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"M")," ultiplication and ",(0,r.kt)("em",{parentName:"li"},"D")," ivision have the same\nprecedence, which is higher than ",(0,r.kt)("em",{parentName:"li"},"A")," ddition and\n",(0,r.kt)("em",{parentName:"li"},"S")," ubtraction, which also have the same precedence. So\n",(0,r.kt)("inlineCode",{parentName:"li"},"2*3-1")," is 5, not 4, and ",(0,r.kt)("inlineCode",{parentName:"li"},"6+4/2")," is 8, not")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Operators with the same precedence are evaluated from left to\nright. So the expression ",(0,r.kt)("inlineCode",{parentName:"li"},"5-3-1")," is 1, not 3, because the\n",(0,r.kt)("inlineCode",{parentName:"li"},"5-3")," happens first and then ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," is subtracted\nfrom 2.")),(0,r.kt)("p",null,"When in doubt, always put parentheses in your expressions to make\nsure the computations are performed in the order you intend."),(0,r.kt)("h2",{id:"modulus-operator"},"Modulus operator"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"modulus operator")," works on integers and yields the\nremainder when the first operand is divided by the second. In Python,\nthe modulus operator is a percent sign ( ",(0,r.kt)("inlineCode",{parentName:"p"},"%"),"). The syntax is\nthe same as for other operators:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> quotient = 7 // 3\n>>> print(quotient)\n2\n>>> remainder = 7 % 3\n>>> print(remainder)\n1\n")),(0,r.kt)("p",null,"So 7 divided by 3 is 2 with 1 left over."),(0,r.kt)("p",null,"The modulus operator turns out to be surprisingly useful. For\nexample, you can check whether one number is divisible by another: if\n",(0,r.kt)("inlineCode",{parentName:"p"},"x % y")," is zero, then ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is divisible by\n",(0,r.kt)("inlineCode",{parentName:"p"},"y"),"."),(0,r.kt)("p",null,"You can also extract the right-most digit or digits from a number.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"p"},"x % 10")," yields the right-most digit of\n",(0,r.kt)("inlineCode",{parentName:"p"},"x")," (in base 10). Similarly, ",(0,r.kt)("inlineCode",{parentName:"p"},"x % 100")," yields the\nlast two digits."),(0,r.kt)("h2",{id:"string-operations"},"String operations"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," operator works with strings, but it is not\naddition in the mathematical sense. Instead it performs\n",(0,r.kt)("em",{parentName:"p"},"concatenation"),", which means joining the strings by linking them\nend to end. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> first = 10\n>>> second = 15\n>>> print(first+second)\n25\n>>> first = '100'\n>>> second = '150'\n>>> print(first + second)\n100150\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," operator also works with strings by multiplying\nthe content of a string by an integer. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> first = 'Test '\n>>> second = 3\n>>> print(first * second)\nTest Test Test\n")),(0,r.kt)("h2",{id:"asking-the-user-for-input"},"Asking the user for input"),(0,r.kt)("p",null,"Sometimes we would like to take the value for a variable from the\nuser via their keyboard. Python provides a built-in function called\n",(0,r.kt)("inlineCode",{parentName:"p"},"input")," that gets input from the keyboard ",(0,r.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/02-variables#fn1"},"1"),".\nWhen this function is called, the program stops and waits for the user\nto type something. When the user presses ",(0,r.kt)("inlineCode",{parentName:"p"},"Return")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"Enter"),", the program resumes and ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," returns\nwhat the user typed as a string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> inp = input()\nSome silly stuff\n>>> print(inp)\nSome silly stuff\n")),(0,r.kt)("p",null,"Before getting input from the user, it is a good idea to print a\nprompt telling the user what to input. You can pass a string to\n",(0,r.kt)("inlineCode",{parentName:"p"},"input")," to be displayed to the user before pausing for\ninput:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> name = input('What is your name?\\n')\nWhat is your name?\nChuck\n>>> print(name)\nChuck\n")),(0,r.kt)("p",null,"The sequence ",(0,r.kt)("inlineCode",{parentName:"p"},"\\n")," at the end of the prompt represents a\n",(0,r.kt)("em",{parentName:"p"},"newline"),", which is a special character that causes a line break.\nThat\u2019s why the user\u2019s input appears below the prompt."),(0,r.kt)("p",null,"If you expect the user to type an integer, you can try to convert the\nreturn value to ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"int()"),"\nfunction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> prompt = 'What...is the airspeed velocity of an unladen swallow?\\n'\n>>> speed = input(prompt)\nWhat...is the airspeed velocity of an unladen swallow?\n17\n>>> int(speed)\n17\n>>> int(speed) + 5\n22\n")),(0,r.kt)("p",null,"But if the user types something other than a string of digits, you\nget an error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> speed = input(prompt)\nWhat...is the airspeed velocity of an unladen swallow?\nWhat do you mean, an African or a European swallow?\n>>> int(speed)\nValueError: invalid literal for int() with\nbase 10: 'What do you mean, an African or a European swallow?'\n")),(0,r.kt)("p",null,"We will see how to handle this kind of error later."),(0,r.kt)("h2",{id:"comments"},"Comments"),(0,r.kt)("p",null,"As programs get bigger and more complicated, they get more difficult\nto read. Formal languages are dense, and it is often difficult to look\nat a piece of code and figure out what it is doing, or why."),(0,r.kt)("p",null,"For this reason, it is a good idea to add notes to your programs to\nexplain in natural language what the program is doing. These notes are\ncalled ",(0,r.kt)("em",{parentName:"p"},"comments"),", and in Python they start with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"#")," symbol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# compute the percentage of the hour that has elapsed\npercentage = (minute * 100) / 60\n")),(0,r.kt)("p",null,"In this case, the comment appears on a line by itself. You can also\nput comments at the end of a line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"percentage = (minute * 100) / 60     # percentage of an hour\n")),(0,r.kt)("p",null,"Everything from the ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," to the end of the line is ignored;\nit has no effect on the program."),(0,r.kt)("p",null,"Comments are most useful when they document non-obvious features of\nthe code. It is reasonable to assume that the reader can figure out\n",(0,r.kt)("em",{parentName:"p"},"what")," the code does; it is much more useful to explain\n",(0,r.kt)("em",{parentName:"p"},"why"),"."),(0,r.kt)("p",null,"This comment is redundant with the code and useless:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"v = 5     # assign 5 to v\n")),(0,r.kt)("p",null,"This comment contains useful information that is not in the code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"v = 5     # velocity in meters/second.\n")),(0,r.kt)("p",null,"Good variable names can reduce the need for comments, but long names\ncan make complex expressions hard to read, so there is a trade-off."),(0,r.kt)("h2",{id:"choosing-mnemonic-variable-names"},"Choosing mnemonic variable names"),(0,r.kt)("p",null,"As long as you follow the simple rules of variable naming, and avoid\nreserved words, you have a lot of choice when you name your variables.\nIn the beginning, this choice can be confusing both when you read a\nprogram and when you write your own programs. For example, the following\nthree programs are identical in terms of what they accomplish, but very\ndifferent when you read them and try to understand them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"a = 35.0\nb = 12.50\nc = a * b\nprint(c)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hours = 35.0\nrate = 12.50\npay = hours * rate\nprint(pay)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"x1q3z9ahd = 35.0\nx1q3z9afd = 12.50\nx1q3p9afd = x1q3z9ahd * x1q3z9afd\nprint(x1q3p9afd)\n")),(0,r.kt)("p",null,"The Python interpreter sees all three of these programs as\n",(0,r.kt)("em",{parentName:"p"},"exactly the same")," but humans see and understand these programs\nquite differently. Humans will most quickly understand the\n",(0,r.kt)("em",{parentName:"p"},"intent")," of the second program because the programmer has chosen\nvariable names that reflect their intent regarding what data will be\nstored in each variable."),(0,r.kt)("p",null,"We call these wisely chosen variable names \u201cmnemonic variable names\u201d.\nThe word ",(0,r.kt)("em",{parentName:"p"},"mnemonic")," ",(0,r.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/02-variables#fn2"},"2")," means \u201cmemory aid\u201d. We\nchoose mnemonic variable names to help us remember why we created the\nvariable in the first place."),(0,r.kt)("p",null,"While this all sounds great, and it is a very good idea to use\nmnemonic variable names, mnemonic variable names can get in the way of a\nbeginning programmer\u2019s ability to parse and understand code. This is\nbecause beginning programmers have not yet memorized the reserved words\n(there are only 35 of them) and sometimes variables with names that are\ntoo descriptive start to look like part of the language and not just\nwell-chosen variable names."),(0,r.kt)("p",null,"Take a quick look at the following Python sample code which loops\nthrough some data. We will cover loops soon, but for now try to just\npuzzle through what this means:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"for word in words:\n    print(word)\n")),(0,r.kt)("p",null,"What is happening here? Which of the tokens (for, word, in, etc.) are\nreserved words and which are just variable names? Does Python understand\nat a fundamental level the notion of words? Beginning programmers have\ntrouble separating what parts of the code ",(0,r.kt)("em",{parentName:"p"},"must")," be the same as\nthis example and what parts of the code are simply choices made by the\nprogrammer."),(0,r.kt)("p",null,"The following code is equivalent to the above code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"for slice in pizza:\n    print(slice)\n")),(0,r.kt)("p",null,"It is easier for the beginning programmer to look at this code and\nknow which parts are reserved words defined by Python and which parts\nare simply variable names chosen by the programmer. It is pretty clear\nthat Python has no fundamental understanding of pizza and slices and the\nfact that a pizza consists of a set of one or more slices."),(0,r.kt)("p",null,"But if our program is truly about reading data and looking for words\nin the data, ",(0,r.kt)("inlineCode",{parentName:"p"},"pizza")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"slice")," are very\nun-mnemonic variable names. Choosing them as variable names distracts\nfrom the meaning of the program."),(0,r.kt)("p",null,"After a pretty short period of time, you will know the most common\nreserved words and you will start to see the reserved words jumping out\nat you:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"for word in words:\n    print(word)\n\n")),(0,r.kt)("p",null,"The parts of the code that are defined by Python ( ",(0,r.kt)("inlineCode",{parentName:"p"},"for"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"in"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"print"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},":"),") are in bold and\nthe programmer-chosen variables ( ",(0,r.kt)("inlineCode",{parentName:"p"},"word")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"words"),") are not in bold. Many text editors are aware of\nPython syntax and will color reserved words differently to give you\nclues to keep your variables and reserved words separate. After a while\nyou will begin to read Python and quickly determine what is a variable\nand what is a reserved word."),(0,r.kt)("h2",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,"At this point, the syntax error you are most likely to make is an\nillegal variable name, like ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"yield"),",\nwhich are keywords, or ",(0,r.kt)("inlineCode",{parentName:"p"},"odd~job")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"US$"),", which\ncontain illegal characters."),(0,r.kt)("p",null,"If you put a space in a variable name, Python thinks it is two\noperands without an operator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> bad name = 5\nSyntaxError: invalid syntax\n")),(0,r.kt)("p",null,"For syntax errors, the error messages don\u2019t help much. The most\ncommon messages are ",(0,r.kt)("inlineCode",{parentName:"p"},"SyntaxError: invalid syntax")," which is\nnot very informative."),(0,r.kt)("p",null,"The runtime error you are most likely to make is a \u201cuse before def;\u201d\nthat is, trying to use a variable before you have assigned a value. This\ncan happen if you spell a variable name wrong:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> principal = 327.68\n>>> interest = principle * rate\nNameError: name 'principle' is not defined\n")),(0,r.kt)("p",null,"Variables names are case sensitive, so ",(0,r.kt)("inlineCode",{parentName:"p"},"LaTeX")," is not the\nsame as ",(0,r.kt)("inlineCode",{parentName:"p"},"latex"),"."),(0,r.kt)("p",null,"At this point, the most likely cause of a semantic error is the order\nof operations. For example, to evaluate 1/2 ",(0,r.kt)("em",{parentName:"p"},"\u03c0"),", you might be tempted to\nwrite"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> 1.0 / 2.0 * pi\n")),(0,r.kt)("p",null,"But the division happens first, so you would get ",(0,r.kt)("em",{parentName:"p"},"\u03c0"),"/2, which is not the same thing!\nThere is no way for Python to know what you meant to write, so in this\ncase you don\u2019t get an error message; you just get the wrong answer."),(0,r.kt)("h2",{id:"glossary"},"Glossary"),(0,r.kt)("p",null,"assignment\nA statement that assigns a value to a variable.\nconcatenate\nTo join two operands end to end.\ncomment\nInformation in a program that is meant for other programmers (or anyone\nreading the source code) and has no effect on the execution of the\nprogram.\nevaluate\nTo simplify an expression by performing the operations in order to yield\na single value.\nexpression\nA combination of variables, operators, and values that represents a\nsingle result value.\nfloating point\nA type that represents numbers with fractional parts.\ninteger\nA type that represents whole numbers.\nkeyword\nA reserved word that is used by the compiler to parse a program; you\ncannot use keywords like ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"def"),", and\n",(0,r.kt)("inlineCode",{parentName:"p"},"while")," as variable names.\nmnemonic\nA memory aid. We often give variables mnemonic names to help us remember\nwhat is stored in the variable.\nmodulus operator\nAn operator, denoted with a percent sign ( ",(0,r.kt)("inlineCode",{parentName:"p"},"%"),"), that works on\nintegers and yields the remainder when one number is divided by another.\noperand\nOne of the values on which an operator operates.\noperator\nA special symbol that represents a simple computation like addition,\nmultiplication, or string concatenation.\nrules of precedence\nThe set of rules governing the order in which expressions involving\nmultiple operators and operands are evaluated.\nstatement\nA section of code that represents a command or action. So far, the\nstatements we have seen are assignments and print expression statement.\nstring\nA type that represents sequences of characters.\ntype\nA category of values. The types we have seen so far are integers (type\n",(0,r.kt)("inlineCode",{parentName:"p"},"int"),"), floating-point numbers (type ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),"), and\nstrings (type ",(0,r.kt)("inlineCode",{parentName:"p"},"str"),").\nvalue\nOne of the basic units of data, like a number or string, that a program\nmanipulates.\nvariable\nA name that refers to a value."),(0,r.kt)("h2",{id:"exercises"},"Exercises"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise 2:")," Write a program that uses\n",(0,r.kt)("inlineCode",{parentName:"p"},"input")," to prompt a user for their name and then welcomes\nthem."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Enter your name: Chuck\nHello Chuck\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise 3:")," Write a program to prompt the user for\nhours and rate per hour to compute gross pay."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Enter Hours: 35\nEnter Rate: 2.75\nPay: 96.25\n")),(0,r.kt)("p",null,"We won\u2019t worry about making sure our pay has exactly two digits after\nthe decimal place for now. If you want, you can play with the built-in\nPython ",(0,r.kt)("inlineCode",{parentName:"p"},"round")," function to properly round the resulting pay\nto two decimal places."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise 4:")," Assume that we execute the following\nassignment statements:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"width = 17\nheight = 12.0\n")),(0,r.kt)("p",null,"For each of the following expressions, write the value of the\nexpression and the type (of the value of the expression)."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"width//2"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"width/2.0"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"height/3"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"1 + 2 * 5")))),(0,r.kt)("p",null,"Use the Python interpreter to check your answers."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise 5:")," Write a program which prompts the user\nfor a Celsius temperature, convert the temperature to Fahrenheit, and\nprint out the converted temperature."),(0,r.kt)("hr",null),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In Python 2, this function was named\n",(0,r.kt)("inlineCode",{parentName:"p"},"raw_input"),". ",(0,r.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/02-variables#fnref1"},"\u21a9\ufe0e"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"See ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Mnemonic"},"https://en.wikipedia.org/wiki/Mnemonic")," for an extended\ndescription of the word \u201cmnemonic\u201d. ",(0,r.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/02-variables#fnref2"},"\u21a9\ufe0e")))),(0,r.kt)("hr",null),(0,r.kt)("p",null,"If you find a mistake in this book, feel free to send me a fix using\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/csev/py4e/tree/master/book3"},"Github"),"."))}d.isMDXComponent=!0}}]);