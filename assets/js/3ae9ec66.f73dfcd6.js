"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[86316],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,c=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(c,r(r({ref:t},h),{},{components:n})):a.createElement(c,r({ref:t},h))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},17754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const i={title:"05-iterations"},r="Iteration",l={unversionedId:"curriculum-resource/py4e/book/05",id:"curriculum-resource/py4e/book/05",title:"05-iterations",description:"Updating variables",source:"@site/docs/curriculum-resource/py4e/book/05.md",sourceDirName:"curriculum-resource/py4e/book",slug:"/curriculum-resource/py4e/book/05",permalink:"/docs/curriculum-resource/py4e/book/05",draft:!1,tags:[],version:"current",frontMatter:{title:"05-iterations"},sidebar:"tutorialSidebar",previous:{title:"04-functions",permalink:"/docs/curriculum-resource/py4e/book/04"},next:{title:"06-strings",permalink:"/docs/curriculum-resource/py4e/book/06"}},s={},p=[{value:"Updating variables",id:"updating-variables",level:2},{value:"The <code>while</code> statement",id:"the-while-statement",level:2},{value:"Infinite loops",id:"infinite-loops",level:2},{value:"Finishing iterations with <code>continue</code>",id:"finishing-iterations-with-continue",level:2},{value:"Definite loops using <code>for</code>",id:"definite-loops-using-for",level:2},{value:"Loop patterns",id:"loop-patterns",level:2},{value:"Counting and summing loops",id:"counting-and-summing-loops",level:3},{value:"Maximum and minimum loops",id:"maximum-and-minimum-loops",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Exercises",id:"exercises",level:2}],h={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"iteration"},"Iteration"),(0,o.kt)("h2",{id:"updating-variables"},"Updating variables"),(0,o.kt)("p",null,"A common pattern in assignment statements is an assignment statement\nthat updates a variable, where the new value of the variable depends on\nthe old."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x = x + 1\n")),(0,o.kt)("p",null,"This means \u201cget the current value of ",(0,o.kt)("inlineCode",{parentName:"p"},"x"),", add 1, and then\nupdate ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," with the new value.\u201d"),(0,o.kt)("p",null,"If you try to update a variable that doesn\u2019t exist, you get an error,\nbecause Python evaluates the right side before it assigns a value to\n",(0,o.kt)("inlineCode",{parentName:"p"},"x"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> x = x + 1\nNameError: name 'x' is not defined\n")),(0,o.kt)("p",null,"Before you can update a variable, you have to ",(0,o.kt)("em",{parentName:"p"},"initialize")," it,\nusually with a simple assignment:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> x = 0\n>>> x = x + 1\n")),(0,o.kt)("p",null,"Updating a variable by adding 1 is called an ",(0,o.kt)("em",{parentName:"p"},"increment"),";\nsubtracting 1 is called a ",(0,o.kt)("em",{parentName:"p"},"decrement"),"."),(0,o.kt)("h2",{id:"the-while-statement"},"The ",(0,o.kt)("inlineCode",{parentName:"h2"},"while")," statement"),(0,o.kt)("p",null,"Computers are often used to automate repetitive tasks. Repeating\nidentical or similar tasks without making errors is something that\ncomputers do well and people do poorly. Because iteration is so common,\nPython provides several language features to make it easier."),(0,o.kt)("p",null,"One form of iteration in Python is the ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," statement.\nHere is a simple program that counts down from five and then says\n\u201cBlastoff!\u201d."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"n = 5\nwhile n > 0:\n    print(n)\n    n = n - 1\nprint('Blastoff!')\n")),(0,o.kt)("p",null,"You can almost read the ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," statement as if it were\nEnglish. It means, \u201cWhile ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," is greater than 0, display the\nvalue of ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," and then reduce the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," by\n1","."," When you get to 0, exit the ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," statement and display\nthe word ",(0,o.kt)("inlineCode",{parentName:"p"},"Blastoff!"),"\u201d"),(0,o.kt)("p",null,"More formally, here is the flow of execution for a ",(0,o.kt)("inlineCode",{parentName:"p"},"while"),"\nstatement:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Evaluate the condition, yielding ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," or\n",(0,o.kt)("inlineCode",{parentName:"p"},"False"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the condition is false, exit the ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," statement\nand continue execution at the next statement.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the condition is true, execute the body and then go back to\nstep 1."))),(0,o.kt)("p",null,"This type of flow is called a ",(0,o.kt)("em",{parentName:"p"},"loop")," because the third step\nloops back around to the top. We call each time we execute the body of\nthe loop an ",(0,o.kt)("em",{parentName:"p"},"iteration"),". For the above loop, we would say, \u201cIt\nhad five iterations\u201d, which means that the body of the loop was executed\nfive times."),(0,o.kt)("p",null,"The body of the loop should change the value of one or more variables\nso that eventually the condition becomes false and the loop terminates.\nWe call the variable that changes each time the loop executes and\ncontrols when the loop finishes the ",(0,o.kt)("em",{parentName:"p"},"iteration variable"),". If\nthere is no iteration variable, the loop will repeat forever, resulting\nin an ",(0,o.kt)("em",{parentName:"p"},"infinite loop"),"."),(0,o.kt)("h2",{id:"infinite-loops"},"Infinite loops"),(0,o.kt)("p",null,"An endless source of amusement for programmers is the observation\nthat the directions on shampoo, \u201cLather, rinse, repeat,\u201d are an infinite\nloop because there is no ",(0,o.kt)("em",{parentName:"p"},"iteration variable")," telling you how\nmany times to execute the loop."),(0,o.kt)("p",null,"In the case of ",(0,o.kt)("inlineCode",{parentName:"p"},"countdown"),", we can prove that the loop\nterminates because we know that the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," is finite,\nand we can see that the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," gets smaller each time\nthrough the loop, so eventually we have to get to 0. Other times a loop\nis obviously infinite because it has no iteration variable at all."),(0,o.kt)("p",null,"Sometimes you don\u2019t know it\u2019s time to end a loop until you get half\nway through the body. In that case you can write an infinite loop on\npurpose and then use the ",(0,o.kt)("inlineCode",{parentName:"p"},"break")," statement to jump out of the\nloop."),(0,o.kt)("p",null,"This loop is obviously an ",(0,o.kt)("em",{parentName:"p"},"infinite loop")," because the logical\nexpression on the ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," statement is simply the logical\nconstant ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"n = 10\nwhile True:\n    print(n, end=' ')\n    n = n - 1\nprint('Done!')\n")),(0,o.kt)("p",null,"If you make the mistake and run this code, you will learn quickly how\nto stop a runaway Python process on your system or find where the\npower-off button is on your computer. This program will run forever or\nuntil your battery runs out because the logical expression at the top of\nthe loop is always true by virtue of the fact that the expression is the\nconstant value ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,o.kt)("p",null,"While this is a dysfunctional infinite loop, we can still use this\npattern to build useful loops as long as we carefully add code to the\nbody of the loop to explicitly exit the loop using ",(0,o.kt)("inlineCode",{parentName:"p"},"break"),"\nwhen we have reached the exit condition."),(0,o.kt)("p",null,"For example, suppose you want to take input from the user until they\ntype ",(0,o.kt)("inlineCode",{parentName:"p"},"done"),". You could write:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"while True:\n    line = input('> ')\n    if line == 'done':\n        break\n    print(line)\nprint('Done!')\n\n# Code: https://www.py4e.com/code3/copytildone1.py\n")),(0,o.kt)("p",null,"The loop condition is ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),", which is always true, so the\nloop runs repeatedly until it hits the break statement."),(0,o.kt)("p",null,"Each time through, it prompts the user with an angle bracket. If the\nuser types ",(0,o.kt)("inlineCode",{parentName:"p"},"done"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"break")," statement exits the\nloop. Otherwise the program echoes whatever the user types and goes back\nto the top of the loop. Here\u2019s a sample run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"> hello there\nhello there\n> finished\nfinished\n> done\nDone!\n")),(0,o.kt)("p",null,"This way of writing ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," loops is common because you\ncan check the condition anywhere in the loop (not just at the top) and\nyou can express the stop condition affirmatively (\u201cstop when this\nhappens\u201d) rather than negatively (\u201ckeep going until that happens.\u201d)."),(0,o.kt)("h2",{id:"finishing-iterations-with-continue"},"Finishing iterations with ",(0,o.kt)("inlineCode",{parentName:"h2"},"continue")),(0,o.kt)("p",null,"Sometimes you are in an iteration of a loop and want to finish the\ncurrent iteration and immediately jump to the next iteration. In that\ncase you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"continue")," statement to skip to the next\niteration without finishing the body of the loop for the current\niteration."),(0,o.kt)("p",null,"Here is an example of a loop that copies its input until the user\ntypes \u201cdone\u201d, but treats lines that start with the hash character as\nlines not to be printed (kind of like Python comments)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"while True:\n    line = input('> ')\n    if line[0] == '#':\n        continue\n    if line == 'done':\n        break\n    print(line)\nprint('Done!')\n\n# Code: https://www.py4e.com/code3/copytildone2.py\n")),(0,o.kt)("p",null,"Here is a sample run of this new program with ",(0,o.kt)("inlineCode",{parentName:"p"},"continue"),"\nadded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"> hello there\nhello there\n> # don't print this\n> print this!\nprint this!\n> done\nDone!\n")),(0,o.kt)("p",null,"All the lines are printed except the one that starts with the hash\nsign because when the ",(0,o.kt)("inlineCode",{parentName:"p"},"continue")," is executed, it ends the\ncurrent iteration and jumps back to the ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," statement to\nstart the next iteration, thus skipping the ",(0,o.kt)("inlineCode",{parentName:"p"},"print"),"\nstatement."),(0,o.kt)("h2",{id:"definite-loops-using-for"},"Definite loops using ",(0,o.kt)("inlineCode",{parentName:"h2"},"for")),(0,o.kt)("p",null,"Sometimes we want to loop through a ",(0,o.kt)("em",{parentName:"p"},"set")," of things such as a\nlist of words, the lines in a file, or a list of numbers. When we have a\nlist of things to loop through, we can construct a ",(0,o.kt)("em",{parentName:"p"},"definite"),"\nloop using a ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," statement. We call the ",(0,o.kt)("inlineCode",{parentName:"p"},"while"),"\nstatement an ",(0,o.kt)("em",{parentName:"p"},"indefinite")," loop because it simply loops until some\ncondition becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),", whereas the ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop\nis looping through a known set of items so it runs through as many\niterations as there are items in the set."),(0,o.kt)("p",null,"The syntax of a ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop is similar to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"while")," loop in that there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," statement\nand a loop body:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"friends = ['Joseph', 'Glenn', 'Sally']\nfor friend in friends:\n    print('Happy New Year:', friend)\nprint('Done!')\n")),(0,o.kt)("p",null,"In Python terms, the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"friends")," is a list ",(0,o.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/05-iterations#fn1"},"1")," of three strings and the\n",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop goes through the list and executes the body once\nfor each of the three strings in the list resulting in this output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Happy New Year: Joseph\nHappy New Year: Glenn\nHappy New Year: Sally\nDone!\n")),(0,o.kt)("p",null,"Translating this ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop to English is not as direct as\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"while"),", but if you think of friends as a ",(0,o.kt)("em",{parentName:"p"},"set"),",\nit goes like this: \u201cRun the statements in the body of the for loop once\nfor each friend ",(0,o.kt)("em",{parentName:"p"},"in")," the set named friends.\u201d"),(0,o.kt)("p",null,"Looking at the ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop, ",(0,o.kt)("em",{parentName:"p"},"for")," and ",(0,o.kt)("em",{parentName:"p"},"in"),"\nare reserved Python keywords, and ",(0,o.kt)("inlineCode",{parentName:"p"},"friend")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"friends")," are variables."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"for friend in friends:\n    print('Happy New Year:', friend)\n")),(0,o.kt)("p",null,"In particular, ",(0,o.kt)("inlineCode",{parentName:"p"},"friend")," is the ",(0,o.kt)("em",{parentName:"p"},"iteration variable"),"\nfor the for loop. The variable ",(0,o.kt)("inlineCode",{parentName:"p"},"friend")," changes for each\niteration of the loop and controls when the ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop\ncompletes. The ",(0,o.kt)("em",{parentName:"p"},"iteration variable")," steps successively through\nthe three strings stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"friends")," variable."),(0,o.kt)("h2",{id:"loop-patterns"},"Loop patterns"),(0,o.kt)("p",null,"Often we use a ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," loop to go\nthrough a list of items or the contents of a file and we are looking for\nsomething such as the largest or smallest value of the data we scan\nthrough."),(0,o.kt)("p",null,"These loops are generally constructed by:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Initializing one or more variables before the loop\nstarts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Performing some computation on each item in the loop body,\npossibly changing the variables in the body of the loop")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Looking at the resulting variables when the loop\ncompletes"))),(0,o.kt)("p",null,"We will use a list of numbers to demonstrate the concepts and\nconstruction of these loop patterns."),(0,o.kt)("h3",{id:"counting-and-summing-loops"},"Counting and summing loops"),(0,o.kt)("p",null,"For example, to count the number of items in a list, we would write\nthe following ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"count = 0\nfor itervar in [3, 41, 12, 9, 74, 15]:\n    count = count + 1\nprint('Count: ', count)\n")),(0,o.kt)("p",null,"We set the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," to zero before the loop\nstarts, then we write a ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop to run through the list of\nnumbers. Our ",(0,o.kt)("em",{parentName:"p"},"iteration")," variable is named ",(0,o.kt)("inlineCode",{parentName:"p"},"itervar"),"\nand while we do not use ",(0,o.kt)("inlineCode",{parentName:"p"},"itervar")," in the loop, it does\ncontrol the loop and cause the loop body to be executed once for each of\nthe values in the list."),(0,o.kt)("p",null,"In the body of the loop, we add 1 to the current value of\n",(0,o.kt)("inlineCode",{parentName:"p"},"count")," for each of the values in the list. While the loop is\nexecuting, the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," is the number of values we\nhave seen \u201cso far\u201d."),(0,o.kt)("p",null,"Once the loop completes, the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," is the total\nnumber of items. The total number \u201cfalls in our lap\u201d at the end of the\nloop. We construct the loop so that we have what we want when the loop\nfinishes."),(0,o.kt)("p",null,"Another similar loop that computes the total of a set of numbers is\nas follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"total = 0\nfor itervar in [3, 41, 12, 9, 74, 15]:\n    total = total + itervar\nprint('Total: ', total)\n")),(0,o.kt)("p",null,"In this loop we ",(0,o.kt)("em",{parentName:"p"},"do")," use the ",(0,o.kt)("em",{parentName:"p"},"iteration variable"),".\nInstead of simply adding one to the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," as in the\nprevious loop, we add the actual number (3, 41, 12, etc.) to the running\ntotal during each loop iteration. If you think about the variable\n",(0,o.kt)("inlineCode",{parentName:"p"},"total"),", it contains the \u201crunning total of the values so\nfar\u201d. So before the loop starts ",(0,o.kt)("inlineCode",{parentName:"p"},"total")," is zero because we\nhave not yet seen any values, during the loop ",(0,o.kt)("inlineCode",{parentName:"p"},"total")," is the\nrunning total, and at the end of the loop ",(0,o.kt)("inlineCode",{parentName:"p"},"total")," is the\noverall total of all the values in the list."),(0,o.kt)("p",null,"As the loop executes, ",(0,o.kt)("inlineCode",{parentName:"p"},"total")," accumulates the sum of the\nelements; a variable used this way is sometimes called an\n",(0,o.kt)("em",{parentName:"p"},"accumulator"),"."),(0,o.kt)("p",null,"Neither the counting loop nor the summing loop are particularly\nuseful in practice because there are built-in functions\n",(0,o.kt)("inlineCode",{parentName:"p"},"len()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sum()")," that compute the number of\nitems in a list and the total of the items in the list respectively."),(0,o.kt)("h3",{id:"maximum-and-minimum-loops"},"Maximum and minimum loops"),(0,o.kt)("p",null,"To find the largest value in a list or sequence, we construct the\nfollowing loop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"largest = None\nprint('Before:', largest)\nfor itervar in [3, 41, 12, 9, 74, 15]:\n    if largest is None or itervar > largest :\n        largest = itervar\n    print('Loop:', itervar, largest)\nprint('Largest:', largest)\n")),(0,o.kt)("p",null,"When the program executes, the output is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Before: None\nLoop: 3 3\nLoop: 41 41\nLoop: 12 41\nLoop: 9 41\nLoop: 74 74\nLoop: 15 74\nLargest: 74\n")),(0,o.kt)("p",null,"The variable ",(0,o.kt)("inlineCode",{parentName:"p"},"largest")," is best thought of as the \u201clargest\nvalue we have seen so far\u201d. Before the loop, we set ",(0,o.kt)("inlineCode",{parentName:"p"},"largest"),"\nto the constant ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," is a special\nconstant value which we can store in a variable to mark the variable as\n\u201cempty\u201d."),(0,o.kt)("p",null,"Before the loop starts, the largest value we have seen so far is\n",(0,o.kt)("inlineCode",{parentName:"p"},"None")," since we have not yet seen any values. While the loop\nis executing, if ",(0,o.kt)("inlineCode",{parentName:"p"},"largest")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," then we take\nthe first value we see as the largest so far. You can see in the first\niteration when the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"itervar")," is 3, since\n",(0,o.kt)("inlineCode",{parentName:"p"},"largest")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", we immediately set\n",(0,o.kt)("inlineCode",{parentName:"p"},"largest")," to be 3."),(0,o.kt)("p",null,"After the first iteration, ",(0,o.kt)("inlineCode",{parentName:"p"},"largest")," is no longer\n",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", so the second part of the compound logical expression\nthat checks ",(0,o.kt)("inlineCode",{parentName:"p"},"itervar > largest")," triggers only when we see\na value that is larger than the \u201clargest so far\u201d. When we see a new\n\u201ceven larger\u201d value we take that new value for ",(0,o.kt)("inlineCode",{parentName:"p"},"largest"),". You\ncan see in the program output that ",(0,o.kt)("inlineCode",{parentName:"p"},"largest")," progresses from\n3 to 41 to 74."),(0,o.kt)("p",null,"At the end of the loop, we have scanned all of the values and the\nvariable ",(0,o.kt)("inlineCode",{parentName:"p"},"largest")," now does contain the largest value in the\nlist."),(0,o.kt)("p",null,"To compute the smallest number, the code is very similar with one\nsmall change:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smallest = None\nprint('Before:', smallest)\nfor itervar in [3, 41, 12, 9, 74, 15]:\n    if smallest is None or itervar < smallest:\n        smallest = itervar\n    print('Loop:', itervar, smallest)\nprint('Smallest:', smallest)\n")),(0,o.kt)("p",null,"Again, ",(0,o.kt)("inlineCode",{parentName:"p"},"smallest")," is the \u201csmallest so far\u201d before, during,\nand after the loop executes. When the loop has completed,\n",(0,o.kt)("inlineCode",{parentName:"p"},"smallest")," contains the minimum value in the list."),(0,o.kt)("p",null,"Again as in counting and summing, the built-in functions\n",(0,o.kt)("inlineCode",{parentName:"p"},"max()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"min()")," make writing these exact loops\nunnecessary."),(0,o.kt)("p",null,"The following is a simple version of the Python built-in\n",(0,o.kt)("inlineCode",{parentName:"p"},"min()")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def min(values):\n    smallest = None\n    for value in values:\n        if smallest is None or value < smallest:\n            smallest = value\n    return smallest\n")),(0,o.kt)("p",null,"In the function version of the smallest code, we removed all of the\n",(0,o.kt)("inlineCode",{parentName:"p"},"print")," statements so as to be equivalent to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"min")," function which is already built in to Python."),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"As you start writing bigger programs, you might find yourself\nspending more time debugging. More code means more chances to make an\nerror and more places for bugs to hide."),(0,o.kt)("p",null,"One way to cut your debugging time is \u201cdebugging by bisection.\u201d For\nexample, if there are 100 lines in your program and you check them one\nat a time, it would take 100 steps."),(0,o.kt)("p",null,"Instead, try to break the problem in half. Look at the middle of the\nprogram, or near it, for an intermediate value you can check. Add a\n",(0,o.kt)("inlineCode",{parentName:"p"},"print")," statement (or something else that has a verifiable\neffect) and run the program."),(0,o.kt)("p",null,"If the mid-point check is incorrect, the problem must be in the first\nhalf of the program. If it is correct, the problem is in the second\nhalf."),(0,o.kt)("p",null,"Every time you perform a check like this, you halve the number of\nlines you have to search. After six steps (which is much less than 100),\nyou would be down to one or two lines of code, at least in theory."),(0,o.kt)("p",null,"In practice it is not always clear what the \u201cmiddle of the program\u201d\nis and not always possible to check it. It doesn\u2019t make sense to count\nlines and find the exact midpoint. Instead, think about places in the\nprogram where there might be errors and places where it is easy to put a\ncheck. Then choose a spot where you think the chances are about the same\nthat the bug is before or after the check."),(0,o.kt)("h2",{id:"glossary"},"Glossary"),(0,o.kt)("p",null,"accumulator\nA variable used in a loop to add up or accumulate a result.\ncounter\nA variable used in a loop to count the number of times something\nhappened. We initialize a counter to zero and then increment the counter\neach time we want to \u201ccount\u201d something.\ndecrement\nAn update that decreases the value of a variable.\ninitialize\nAn assignment that gives an initial value to a variable that will be\nupdated.\nincrement\nAn update that increases the value of a variable (often by one).\ninfinite loop\nA loop in which the terminating condition is never satisfied or for\nwhich there is no terminating condition.\niteration\nRepeated execution of a set of statements using either a function that\ncalls itself or a loop."),(0,o.kt)("h2",{id:"exercises"},"Exercises"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 1:")," Write a program which repeatedly reads\nintegers until the user enters \u201cdone\u201d. Once \u201cdone\u201d is entered, print out\nthe total, count, and average of the integers. If the user enters\nanything other than a integers, detect their mistake using\n",(0,o.kt)("inlineCode",{parentName:"p"},"try")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"except")," and print an error message and\nskip to the next integers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter a number: 4\nEnter a number: 5\nEnter a number: bad data\nInvalid input\nEnter a number: 7\nEnter a number: done\n16 3 5.333333333333333\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 2:")," Write another program that prompts for a\nlist of numbers as above and at the end prints out both the maximum and\nminimum of the numbers instead of the average."),(0,o.kt)("hr",null),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"We will examine lists in more detail in a later\nchapter. ",(0,o.kt)("a",{parentName:"li",href:"https://www.py4e.com/html3/05-iterations#fnref1"},"\u21a9\ufe0e"))),(0,o.kt)("hr",null),(0,o.kt)("p",null,"If you find a mistake in this book, feel free to send me a fix using\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/csev/py4e/tree/master/book3"},"Github"),"."))}m.isMDXComponent=!0}}]);