"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[15462],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),m=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=m(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(n),c=a,u=d["".concat(l,".").concat(c)]||d[c]||h[c]||i;return n?o.createElement(u,r(r({ref:t},p),{},{components:n})):o.createElement(u,r({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var m=2;m<i;m++)r[m]=n[m];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},51632:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var o=n(87462),a=(n(67294),n(3905));const i={title:"Lab 04 Git"},r=void 0,s={unversionedId:"curriculum-resource/cs61b/labs/lab04/index",id:"curriculum-resource/cs61b/labs/lab04/index",title:"Lab 04 Git",description:"FAQ",source:"@site/docs/curriculum-resource/cs61b/labs/lab04/index.md",sourceDirName:"curriculum-resource/cs61b/labs/lab04",slug:"/curriculum-resource/cs61b/labs/lab04/",permalink:"/docs/curriculum-resource/cs61b/labs/lab04/",draft:!1,tags:[],version:"current",frontMatter:{title:"Lab 04 Git"},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/docs/curriculum-resource/cs61b/labs/lab03/faq"},next:{title:"FAQ",permalink:"/docs/curriculum-resource/cs61b/labs/lab04/faq"}},l={},m=[{value:"FAQ",id:"faq",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Git vs Github",id:"git-vs-github",level:2},{value:"Git",id:"git",level:3},{value:"Github",id:"github",level:3},{value:"Git Commands",id:"git-commands",level:2},{value:"<code>init</code>",id:"init",level:3},{value:"<code>add</code>, <code>commit</code>",id:"add-commit",level:3},{value:"<code>status</code>",id:"status",level:3},{value:"<code>log</code>",id:"log",level:3},{value:"<code>restore</code>",id:"restore",level:3},{value:"Git Exercise (Part 1.1)",id:"git-exercise-part-11",level:2},{value:"Git Commands Continued",id:"git-commands-continued",level:2},{value:"<code>remote add</code>",id:"remote-add",level:3},{value:"<code>switch</code>",id:"switch",level:3},{value:"<code>restore</code> Revisited",id:"restore-revisited",level:3},{value:"<code>push</code>",id:"push",level:3},{value:"<code>pull</code>",id:"pull",level:3},{value:"Common Git Issues",id:"common-git-issues",level:2},{value:"Fatal: refusing to merge unrelated histories",id:"fatal-refusing-to-merge-unrelated-histories",level:3},{value:"Merge Conflict",id:"merge-conflict",level:3},{value:"Your branch is ahead of &#39;origin/main&#39; by X commits.",id:"your-branch-is-ahead-of-originmain-by-x-commits",level:3},{value:"Git Exercise (Part 1.2)",id:"git-exercise-part-12",level:2},{value:"Git Exercise (Part 2)",id:"git-exercise-part-2",level:2},{value:"Part 2.1",id:"part-21",level:3},{value:"Part 2.2",id:"part-22",level:3},{value:"Part 2.3",id:"part-23",level:3},{value:"Submission",id:"submission",level:3}],p={toc:m},d="wrapper";function h(e){let{components:t,...i}=e;return(0,a.kt)(d,(0,o.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("p",null,"The FAQ for Lab 04 is ",(0,a.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/labs/lab04/faq"},"here"),"."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Up until this point, we've been using Git and Github to submit assignments, but\nhaven't talked much beyond what is needed. In this lab assignment, we'll revisit\nsome previous git commands that we've shown as well as introduce new ones, so that\nyou'll gain more familiarity with Git (and Github). There will be exercises throughout\nthis lab to help reinforce your understanding of Git."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Please don't skip around in this lab and ",(0,a.kt)("strong",{parentName:"p"},"do not run commands you find online"),"\nif you get stuck (this could lead to potential issues in the lab). When going\nthrough this lab, read through the commands and instructions and make sure you understand them!")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Please make sure to pull from the skeleton in your ",(0,a.kt)("inlineCode",{parentName:"p"},"sp24-s***")," repository to obtain\nthe required files. In this lab, we will only have one file, ",(0,a.kt)("inlineCode",{parentName:"p"},"magic_word.txt"),". ")),(0,a.kt)("h2",{id:"git-vs-github"},"Git vs Github"),(0,a.kt)("p",null,"Before we explore the Git commands, let's talk about the difference between Git and Github."),(0,a.kt)("h3",{id:"git"},"Git"),(0,a.kt)("p",null,"Git is a version control system that is free and open-source (this means that the source code\nis available for use by users and developers). As a version control system, we use Git to\nhelp manage different versions of code and track changes made in the source code. This makes it\neven more useful if there are multiple developers working on one program. Without a version control\nsystem, there wouldn't be much communication between developers and changes to the source code\nwill go unknown to other developers."),(0,a.kt)("p",null,"For the most part, Git's data model or representation is based on a linked list. We'll talk\nmore about this a little later, but whenever we want to save a snapshot of our repository,\nwe commit it (like we've been doing up until this point when we want to submit an assignment).\nThese commits are, in a way, chained together. Here's a visualization of what that looks\nlike below:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"git_structure",src:n(98615).Z,width:"1092",height:"296"}),'{: style="max-height: 325;" }'),(0,a.kt)("p",null,"This linked list of commits forms a history of the changes you've made. The most recent\ncommit/latest snapshot is the green circle above."),(0,a.kt)("h3",{id:"github"},"Github"),(0,a.kt)("p",null,"Github is an online hosting service for git repositories. Git repositories are central locations\nwhere any changes made to our files and directories are tracked and managed (this is your ",(0,a.kt)("inlineCode",{parentName:"p"},"sp24-s***"),"\nrepository). Repositories can be made locally on your computer as well as on Github."),(0,a.kt)("p",null,"Github allows for easier collaboration with other developers, as you can more easily share code, and\nalso allows us to save our code on a remote server. If you have some code stored locally,\nyou can save it to Github. You'll then have a copy of your code saved somewhere else\nin the event that your local code is somehow destroyed. This is why we say to commit often so you\nsave your work and progress on assignments!"),(0,a.kt)("h2",{id:"git-commands"},"Git Commands"),(0,a.kt)("p",null,"In this section, we describe some of the more common Git commands you might end up using. Please keep\nin mind that this is not comprehensive of all the Git commands that may be available. Let's begin!"),(0,a.kt)("h3",{id:"init"},(0,a.kt)("inlineCode",{parentName:"h3"},"init")),(0,a.kt)("p",null,"The following command can be run in a directory that you want to make into a Git repository:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git init\n")),(0,a.kt)("p",null,"This initializes a git repository in that directory."),(0,a.kt)("h3",{id:"add-commit"},(0,a.kt)("inlineCode",{parentName:"h3"},"add"),", ",(0,a.kt)("inlineCode",{parentName:"h3"},"commit")),(0,a.kt)("p",null,"When we want to save the changes we've made in a git repository, we want to first select\nwhat changes should be saved:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git add some_file.txt\n")),(0,a.kt)("p",null,"If you want to select all changes that have been made, you can run the following shortcut:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git add .\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The changes we've selected have not actually been saved yet.")," When we ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," certain files/changes, this\nmeans we've put them into a staging area, which stores information about what will go into our next commit.\nTo actually save our changes, or take a snapshot of our current repository, we run ",(0,a.kt)("inlineCode",{parentName:"p"},"git commit -m"),", like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'git commit -m "We put a commit message here to describe what changes we made."\n')),(0,a.kt)("p",null,"When we commit any changes, it's good practice to place a descriptive commit message - this makes it easier\nto keep track of what changes are made over time as well as make it easier for other developers to understand\nwhat you've changed."),(0,a.kt)("h3",{id:"status"},(0,a.kt)("inlineCode",{parentName:"h3"},"status")),(0,a.kt)("p",null,"If you want to see what changes have been made, you can run ",(0,a.kt)("inlineCode",{parentName:"p"},"git status"),' in your repository. It might look\na little bit different from below, but it will show what files have been modified. If they are under\n"changes not staged for commit", it means they haven\'t been added to the staging area. Once they are\nadded, those files will show up under "Changes to be committed".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'On branch main\nYour branch is up to date with \'origin/main\'.\n\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git restore <file>..." to discard changes in working directory)\n    modified:   proj1a/src/LinkedListDeque61B.java\n    modified:   proj1b/src/ArrayDeque61B.java\n    modified:   proj1b/tests/ArrayDeque61BTest.java\n')),(0,a.kt)("p",null,"In this example, ",(0,a.kt)("inlineCode",{parentName:"p"},"git status")," shows that we've modified three files that have not been staged for commit. Once\nwe ",(0,a.kt)("inlineCode",{parentName:"p"},"git add")," them, ",(0,a.kt)("inlineCode",{parentName:"p"},"git status")," will change:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"On branch main\nYour branch is up to date with 'origin/main'.\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n    modified:   proj1a/src/LinkedListDeque61B.java\n    modified:   proj1b/src/ArrayDeque61B.java\n    modified:   proj1b/tests/ArrayDeque61BTest.java\n")),(0,a.kt)("p",null,'In both cases, "Changes not staged for commit" and "Changes to be committed" are for files that are already\n',(0,a.kt)("strong",{parentName:"p"},"tracked")," or have been saved before in a previous version of your repository. Git will also show\n",(0,a.kt)("strong",{parentName:"p"},"untracked")," files, which have not been saved in a previous version of your repository."),(0,a.kt)("h3",{id:"log"},(0,a.kt)("inlineCode",{parentName:"h3"},"log")),(0,a.kt)("p",null,"Running ",(0,a.kt)("inlineCode",{parentName:"p"},"git log")," in a git repository will display all the history of our committed history. For example, you\nwould get something similar to the below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ git log\n\ncommit 8g955d88159fc8e4504d7220e33fad34f8f2c6bd\nAuthor: Elana Ho <elana@Elana-MacBook-Air.local>\nDate:   Tue Feb 7 19:06:48 2016 -0800\n\n    Added common Git problems to lab04.\n")),(0,a.kt)("p",null,"What this means is that you're able to view the entire history of all the commits you made. Remember\nthe message you always add when you commit? It will show up in ",(0,a.kt)("inlineCode",{parentName:"p"},"git log"),'. In this example, the\ncommit message would be "Added common Git problems to lab04." That is to say, we ran\n',(0,a.kt)("inlineCode",{parentName:"p"},'git commit -m "Added common Git problems to lab04."')," when we committed."),(0,a.kt)("p",null,"Another ",(0,a.kt)("strong",{parentName:"p"},"important"),' thing is what is besides the "commit" heading. It looks like a long\nstring of random characters and numbers, but it represents the ',(0,a.kt)("strong",{parentName:"p"},"commit id"),". The commit\nid is a unique id that Git assigned to identify the specific changes that were made\nin the commit. ",(0,a.kt)("strong",{parentName:"p"},"It is important for the next section.")),(0,a.kt)("h3",{id:"restore"},(0,a.kt)("inlineCode",{parentName:"h3"},"restore")),(0,a.kt)("p",null,"What if we want to restore changes from a previous version of our program? We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"git restore"),"!\nThere are a couple ways to do this."),(0,a.kt)("p",null,"If we want to restore files to the versions in the most recent commit, then we can run ",(0,a.kt)("inlineCode",{parentName:"p"},"git restore"),"\nwithout specifying a commit id:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git restore [path_to_file]\n")),(0,a.kt)("p",null,"If we want to restore to a ",(0,a.kt)("strong",{parentName:"p"},"specific")," commit, we can identify that commit's id and restore the\nfiles from that commit."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git restore --source=[commitID] [path_to_file]\n")),(0,a.kt)("h2",{id:"git-exercise-part-11"},"Git Exercise (Part 1.1)"),(0,a.kt)("p",null,"Now you're ready to start using git! Your next task is to work through a small\ngit workflow by setting up a repository and making a couple commits. At the end,\nyou will need to be checked off by filling out the form linked on Beacon."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"This is meant to be done on your local computer, but ",(0,a.kt)("strong",{parentName:"p"},"outside your `SP24-s*"),(0,a.kt)("inlineCode",{parentName:"p"},"**\nrepository. Make sure you don't initialize a repository in your "),"SP24-s***`!")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("blockquote",{parentName:"admonition"},(0,a.kt)("p",{parentName:"blockquote"},"If you need help with creating directories, creating files, changing\ndirectories, etc., refer back to ",(0,a.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/labs/lab04/terminal"},(0,a.kt)("em",{parentName:"a"},"How to Use the Terminal")),"."))),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a directory called ",(0,a.kt)("inlineCode",{parentName:"p"},"lab04-checkoff"),". You can put this directory\nanywhere on your computer ",(0,a.kt)("strong",{parentName:"p"},"(but not in your `sp24-s*"),"` repo)**.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Move into the ",(0,a.kt)("inlineCode",{parentName:"p"},"lab04-checkoff")," directory, and initialize a git repository.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"61b.txt"),' in any way you\'d like. In this text file,\nadd the text "Created 61b.txt".')),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create another file called ",(0,a.kt)("inlineCode",{parentName:"p"},"61boba.txt"),' in any way you\'d like. In this text file,\nadd the text "Created 61boba.txt".')),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Begin tracking ",(0,a.kt)("strong",{parentName:"p"},"only")," ",(0,a.kt)("inlineCode",{parentName:"p"},"61b.txt"),", and create a new commit containing just\nthis file, with the following commit message: ",(0,a.kt)("inlineCode",{parentName:"p"},"Add 61b.txt"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Make a modification in ",(0,a.kt)("inlineCode",{parentName:"p"},"61b.txt"),' by changing the text in the file to: "61b.txt\nchanged to version 2".')),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Make another commit, this time containing both ",(0,a.kt)("inlineCode",{parentName:"p"},"61b.txt")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"61boba.txt"),".\nThe commit message should be: ",(0,a.kt)("inlineCode",{parentName:"p"},"Updated 61b.txt and added 61boba.txt"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Make one more modification to ",(0,a.kt)("inlineCode",{parentName:"p"},"61b.txt"),' by changing the text in\nthe file to: "61b.txt changed to final version". ',(0,a.kt)("strong",{parentName:"p"},"Don\u2019t commit this version.")),(0,a.kt)("p",{parentName:"li"},"At this point, if you were to type in ",(0,a.kt)("inlineCode",{parentName:"p"},"git status")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"git log"),", you\u2019d see\nsomething similar to the following:"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("img",{alt:"git_checkoff",src:n(9767).Z,width:"1101",height:"706"}))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Using git only"),", restore ",(0,a.kt)("inlineCode",{parentName:"p"},"61b.txt")," to the version in the most recent\ncommit.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Using git only"),", restore ",(0,a.kt)("inlineCode",{parentName:"p"},"61b.txt")," to the version in the first commit."))),(0,a.kt)("p",null,"Be sure to save this repository and directory until you complete the\nform on ","[Beacon]","({{ site.links.beacon }})."),(0,a.kt)("p",null,":::task\nDo the steps above, and complete the first google form. There is a second\ngoogle form to fill out before you get the magic word.\n:::"),(0,a.kt)("h2",{id:"git-commands-continued"},"Git Commands Continued"),(0,a.kt)("p",null,"Let's continue on! In this section, we go a little more in-depth about remote repositories\nand what branching is."),(0,a.kt)("h3",{id:"remote-add"},(0,a.kt)("inlineCode",{parentName:"h3"},"remote add")),(0,a.kt)("p",null,'Sometimes, we want to be able to pull changes from another repository, specifically one\nthat is hosted on Github. To do so, we can add that repository as a "remote".\nFor example, in Lab01, we used the following command to add the skeleton\nrepository in our personal repository:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp24.git\n")),(0,a.kt)("p",null,"Let's break this down. When we want to add a remote, we specify the name of the remote, as well as the remote URL.\nIn this example, the name is ",(0,a.kt)("inlineCode",{parentName:"p"},"skeleton")," and the url is ",(0,a.kt)("inlineCode",{parentName:"p"},"https://github.com/Berkeley-CS61B/skeleton-sp24.git"),". We can\nthen refer to the remote repository with its name when we want to ",(0,a.kt)("a",{parentName:"p",href:"#pull"},"pull")," or ",(0,a.kt)("a",{parentName:"p",href:"#push"},"push")," from it."),(0,a.kt)("p",null,"So, to add a remote, we can run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git remote add [remote-name] [remote-url]\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You can run ",(0,a.kt)("inlineCode",{parentName:"p"},"git remote -v")," in your repository to check what remotes have been added.")),(0,a.kt)("h3",{id:"switch"},(0,a.kt)("inlineCode",{parentName:"h3"},"switch")),(0,a.kt)("p",null,"We haven't talked a lot about another feature of Git, which is branches! You won't use it much\n(or at all!) in this class (except this lab), but it is a useful thing to know."),(0,a.kt)("p",null,'Most version control systems have some kind of branching system. When we say branching, it means that\nwe "diverge" away from the "main" branch. Branches allow us to keep track of multiple versions of\nour work at the same time (think of it like alternate dimensions). A reason why we would want to\ncreate another branch is if we want to develop another feature of our program, but we still wanted\nto maintain the current version that we had.'),(0,a.kt)("p",null,"Let's consider a visualization."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"cool_branch",src:n(47772).Z,width:"1502",height:"584"}),'{: style="max-height: 325;" }'),(0,a.kt)("p",null,"In this image above, there are two branches, ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"cool_branch"),'. Notice that we\'ve\nalready made several commits. At some point, we ended up "branching" away from ',(0,a.kt)("inlineCode",{parentName:"p"},"master"),'\n(at the commit with the message "diverge commit") and diverging away from that specific branch.\nNow, if we wanted to stop working on our current branch (',(0,a.kt)("inlineCode",{parentName:"p"},"cool_branch"),"), we can switch back to our\n",(0,a.kt)("inlineCode",{parentName:"p"},"master")," branch. We do this by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git switch [branch-name]\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"master_branch",src:n(34644).Z,width:"1499",height:"563"}),'{: style="max-height: 325;" }'),(0,a.kt)("p",null,"In this example, we would run ",(0,a.kt)("inlineCode",{parentName:"p"},"git switch master"),". Notice that the HEAD tag is now pointing back to\nthe latest commit on ",(0,a.kt)("inlineCode",{parentName:"p"},"master"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"We won't cover it here, but feel free to look up how you might create a branch.")),(0,a.kt)("h3",{id:"restore-revisited"},(0,a.kt)("inlineCode",{parentName:"h3"},"restore")," Revisited"),(0,a.kt)("p",null,"Now that we have an idea of what remotes and branches are, let's revisit the ",(0,a.kt)("inlineCode",{parentName:"p"},"restore")," command.\nIn the earlier section, we talked about using ",(0,a.kt)("inlineCode",{parentName:"p"},"restore")," to revert back to previous commits\nbased on the most recent commit or based on a commit id, but we can also use the command\nto revert a change back based on a remote repository and a specified branch. This is what\nit would look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git restore --source=[remote-name]/[branch-name] [file_name]\n")),(0,a.kt)("p",null,"It would revert the file back based on the contents of the latest commit on the branch\nof the remote repository."),(0,a.kt)("h3",{id:"push"},(0,a.kt)("inlineCode",{parentName:"h3"},"push")),(0,a.kt)("p",null,"If we want to push any commits we made on our local computer to a remote repository, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"git push"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git push [remote-name] [branch]\n")),(0,a.kt)("p",null,"In this class, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"git push origin main")," to push any of our changes from the local repository\nto our remote repository. ",(0,a.kt)("inlineCode",{parentName:"p"},"origin")," is the remote repo that represents our personal repository that's hosted\non Github and ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," is the branch that we work off of."),(0,a.kt)("p",null,"Here's a visualization of what this looks like with a couple of local commits we haven't pushed yet.\nThe local repository is on the left, and the remote one is on the right."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"remote_push_before",src:n(4958).Z,width:"1892",height:"541"}),'{: style="max-height: 325;" }'),(0,a.kt)("p",null,"After pushing, our commits are now saved in our remote repository:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"remote_push_after",src:n(97837).Z,width:"2239",height:"565"}),'{: style="max-height: 325;" }'),(0,a.kt)("h3",{id:"pull"},(0,a.kt)("inlineCode",{parentName:"h3"},"pull")),(0,a.kt)("p",null,"Conversely, if we want to pull any changes from our remote repository to our local one, we can run ",(0,a.kt)("inlineCode",{parentName:"p"},"git pull"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git pull [remote-name] [branch]\n")),(0,a.kt)("p",null,"We've done this before when pulling from the skeleton: ",(0,a.kt)("inlineCode",{parentName:"p"},"git pull skeleton main"),". Here's a visualization of\nwhat this looks like with a couple of remote commits we haven't pulled from yet:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"remote_pull_before",src:n(41076).Z,width:"2250",height:"624"}),'{: style="max-height: 325;" }'),(0,a.kt)("p",null,"After pulling, our remote commits are now in our local repository:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"remote_pull_after",src:n(98122).Z,width:"2247",height:"643"}),'{: style="max-height: 325;" }'),(0,a.kt)("h2",{id:"common-git-issues"},"Common Git Issues"),(0,a.kt)("p",null,"In this section, we'll cover some common issues you might see with Git. This is not\ncomprehensive of all issues you may see. You can read more about git issues in our\nguide ",(0,a.kt)("a",{parentName:"p",href:"../guides/git"},"here"),"."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"While this is meant to help diagnose a Git issue and go through the common ways to\nresolve them, always ask for help if you aren't too sure!")),(0,a.kt)("h3",{id:"fatal-refusing-to-merge-unrelated-histories"},"Fatal: refusing to merge unrelated histories"),(0,a.kt)("p",null,"This usually occurs when someone has changed files in the skeleton code after you\nhave pulled. To fix, run ",(0,a.kt)("inlineCode",{parentName:"p"},"git pull <remote-repo> main --allow-unrelated-histories --no-rebase"),".\nThis may force a merge conflict (more information below)."),(0,a.kt)("h3",{id:"merge-conflict"},"Merge Conflict"),(0,a.kt)("p",null,"Merge conflict messages can show up like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ git pull origin main\nFrom github.com:Berkeley-CS61B/course-materials-sp16\n * branch            main     -> FETCH_HEAD\nAuto-merging proj/proj0/solution/canonical/Planet.java\nCONFLICT (content): Merge conflict in proj/proj0/solution/canonical/Planet.java\nAutomatic merge failed; fix conflicts and then commit the result.\n")),(0,a.kt)("p",null,"Merge conflicts occur when different modifications have been made to the same file that\nimpact the same lines of code, and thus, cannot coexist. Git will indicate which files\nhave conflicts; ",(0,a.kt)("strong",{parentName:"p"},"to fix them, open the files in IntelliJ and resolve them manually."),"\nThese conflicts will appear like below in the file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"    public Planet(Planet p) {\n<<<<<<< HEAD\n        this.xPos = p.xPos;\n        this.yPos = p.yPos;\n=======\n        this.xxPos = p.xxPos;\n        this.yyPos = p.yyPos;\n>>>>>>> 27ddd0c71515e5cfc7f58a43bcf0e2144c127aed\n")),(0,a.kt)("p",null,"Everything between ",(0,a.kt)("inlineCode",{parentName:"p"},"<<<<<<< HEAD")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"=======")," is from your local version. Everything between ",(0,a.kt)("inlineCode",{parentName:"p"},"=======")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"27ddd0c71515e5cfc7f58a43bcf0e2144c127aed")," is from your remote repository. Between these two options,\nchoose the modifications that you would like to keep. Once you have resolved all conflicts,\nadd and commit your changes. Run git status to check the state of your repo."),(0,a.kt)("p",null,"We've provided more reading on merge conflicts ",(0,a.kt)("a",{parentName:"p",href:"../guides/git#merging"},"here"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"../guides/git/wtfs#error-you-have-not-concluded-your-merge-merge_head-exists"},"here"),"."),(0,a.kt)("h3",{id:"your-branch-is-ahead-of-originmain-by-x-commits"},"Your branch is ahead of 'origin/main' by X commits."),(0,a.kt)("p",null,"This occurs when the local repo is no longer in sync with its remote counterpart.\nIf you want to keep the local versions of your files, use ",(0,a.kt)("inlineCode",{parentName:"p"},"git push"),".\nIf you want to overwrite your local changes with the versions in the remote repo,\nuse ",(0,a.kt)("inlineCode",{parentName:"p"},"git reset --hard origin/main"),"."),(0,a.kt)("h2",{id:"git-exercise-part-12"},"Git Exercise (Part 1.2)"),(0,a.kt)("p",null,"Just as you did in Part 1.1, navigate to ","[Beacon]","({{ site.links.beacon }}) and\ncomplete the second form."),(0,a.kt)("p",null,"Once you finish both google forms (in Part 1.1 and 1.2) and receive full credit,\nyou should be able to obtain a ",(0,a.kt)("strong",{parentName:"p"},"magic word"),". Place this magic word on the\n",(0,a.kt)("strong",{parentName:"p"},"first line")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"magic_word.txt"),"."),(0,a.kt)("h2",{id:"git-exercise-part-2"},"Git Exercise (Part 2)"),(0,a.kt)("p",null,"In this exercise, we'll have you clone a git repository, and you'll be using some of the commands you've learned to find\nthe passwords that are hidden away in the repository. Copy and paste the following command to clone your repository, ",(0,a.kt)("strong",{parentName:"p"},"outside\nyour `sp24-s*"),"` repository**. The exact location is up to you, as long as it's not in another repository."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Before running the command, ",(0,a.kt)("strong",{parentName:"p"},"double check that you are not in your personal repository.")," If you are, a message will show\nup preventing you from cloning the repository inside your ",(0,a.kt)("inlineCode",{parentName:"p"},"sp24-s***")," repository.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"curl -sS https://sp24.datastructur.es/labs/lab04/lab04.sh | bash\n")),(0,a.kt)("p",null,"Check that a repository called ",(0,a.kt)("inlineCode",{parentName:"p"},"git-exercise-sp24")," shows up. If it's there, ",(0,a.kt)("inlineCode",{parentName:"p"},"cd")," into it, open up\n",(0,a.kt)("inlineCode",{parentName:"p"},"git-exercise-sp24")," in IntelliJ, and you're ready to continue on with the exercise!"),(0,a.kt)("h3",{id:"part-21"},"Part 2.1"),(0,a.kt)("p",null,"When you open up the repository, you'll notice a ",(0,a.kt)("inlineCode",{parentName:"p"},"password.txt")," file. This is where the password for the first task will\nbe in. It doesn't seem to be here, but it might be in a previous commit... See if you can find that commit and revert\nback to the commit with some of the commands we've learned (you may need to scroll using the arrow keys!)."),(0,a.kt)("p",null,":::task\nFind the password for Task 1. When you do, you can store the password on the ",(0,a.kt)("strong",{parentName:"p"},"second line")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"magic_word.txt")," file in your\nlab04 directory. ",(0,a.kt)("strong",{parentName:"p"},"You will also want to restore your file to the most recent commit before moving on."),"\n:::"),(0,a.kt)("h3",{id:"part-22"},"Part 2.2"),(0,a.kt)("p",null,"Once you've completed Task 1, let's try to figure out where the second password it is. The repository you cloned\nhas multiple branches, but the branch called ",(0,a.kt)("inlineCode",{parentName:"p"},"erik")," might have something we want. Let's try switching to the branch\nand seeing if the password is in there."),(0,a.kt)("p",null,":::task\nFind the password for Task 2. You can verify that it is the password by checking the commit message of the commit\nthat you are on. When you do, you can store the password on the ",(0,a.kt)("strong",{parentName:"p"},"third line")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"magic_word.txt")," file in your\nlab04 directory. When you find the password, ",(0,a.kt)("strong",{parentName:"p"},"switch back to the ",(0,a.kt)("inlineCode",{parentName:"strong"},"main")," branch."),"\n:::"),(0,a.kt)("h3",{id:"part-23"},"Part 2.3"),(0,a.kt)("p",null,"It doesn't seem like the third password is in this repository, but in another one! The password is in this repository\n(note that this is not a command, but the ssh url):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git@github.com:Berkeley-CS61B/git-exercise-remote.git\n")),(0,a.kt)("p",null,"We want to try pulling from it, so first, add this repository as a remote in our ",(0,a.kt)("inlineCode",{parentName:"p"},"git-exercise-sp24")," repository. You may\ngive the remote a name of your choosing. Once it's added, run the following command (without the brackets around the remote's\nname):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git pull [remote-name] main --allow-unrelated-histories --no-rebase\n")),(0,a.kt)("p",null,"The reason we add the flags ",(0,a.kt)("inlineCode",{parentName:"p"},"--allow-unrelated-histories")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-rebase")," is because our two repositories don't have any related history, so\nwe're going to try to merge these two branches (our local one and the one we're pulling from)."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Do not add the flags if you are not sure if it should be used. If you do use the flag without it being needed, you may\nend up putting yourself into an interactive rebase and destroying some of your work. In most, if not all cases of pulling\nfrom the skeleton in your personal repository, this flag should not be added, and running ",(0,a.kt)("inlineCode",{parentName:"p"},"git pull skeleton main")," is\nenough.")),(0,a.kt)("p",null,":::task\nOnce you've pulled, you'll see Git trying to merge the branches. Go ahead and merge it and the final password should show\nup in your IntelliJ. You can store the password on the ",(0,a.kt)("strong",{parentName:"p"},"fourth line")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"magic_word.txt"),".\n:::"),(0,a.kt)("h3",{id:"submission"},"Submission"),(0,a.kt)("p",null,"At this point, you should have ",(0,a.kt)("strong",{parentName:"p"},"four passwords on each line, as specified in the previous exercises"),". Ensure that they\nare in the specific order mentioned and that there are no extra spaces at the end. Your magic word text file\nshould look similar to below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git_exercise_1_password\ngit_exercise_2.1_password\ngit_exercise_2.2_password\ngit_exercise_2.3_password\n")),(0,a.kt)("p",null,"The passwords should be placed the top 4 lines of your ",(0,a.kt)("inlineCode",{parentName:"p"},"magic_word.txt"),". When you are ready, please\nsubmit to Gradescope."),(0,a.kt)("p",null,"If you want to play around with the visualizer which we used to make some of the images in this lab,\nyou can find it ",(0,a.kt)("a",{parentName:"p",href:"https://git-school.github.io/visualizing-git/#free-remote"},"here"),"."))}h.isMDXComponent=!0},9767:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/git_checkoff-82e6ef92b9caf67f99f771f1a69cc926.png"},98615:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/git_structure-317c64689842d0dd421d12fd7e79003d.png"},47772:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/on_cool_branch-5f69da473754c4f9e5115ef1b96b4c17.png"},34644:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/on_master_branch-bc8088ecf18e63a5d898f5899aabab85.png"},98122:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/remote_pull_after-c6de744c160a3f38fad7bab099789d32.png"},41076:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/remote_pull_before-d97373d3e7a1e52e2eab804b9a06a6e4.png"},97837:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/remote_push_after-fa91bdae14e4ec7f560f3c96b51b9fab.png"},4958:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/remote_push_before-ea2a670ad0bd9d63fab9db66ef0dfe0e.png"}}]);