"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[96229],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=m(n),u=o,d=p["".concat(l,".").concat(u)]||p[u]||h[u]||i;return n?a.createElement(d,r(r({ref:t},c),{},{components:n})):a.createElement(d,r({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var m=2;m<i;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69236:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(87462),o=(n(67294),n(3905));const i={title:"Using Git"},r=void 0,s={unversionedId:"curriculum-resource/cs61b/guides/git/index",id:"curriculum-resource/cs61b/guides/git/index",title:"Using Git",description:"Preface: This guide assumes a basic understanding of the command line on your",source:"@site/docs/curriculum-resource/cs61b/guides/git/index.md",sourceDirName:"curriculum-resource/cs61b/guides/git",slug:"/curriculum-resource/cs61b/guides/git/",permalink:"/docs/curriculum-resource/cs61b/guides/git/",draft:!1,tags:[],version:"current",frontMatter:{title:"Using Git"},sidebar:"tutorialSidebar",previous:{title:"An Ed Guide for New Users",permalink:"/docs/curriculum-resource/cs61b/guides/ed/ed-guide"},next:{title:"Git Pull Skeleton Merge Guide",permalink:"/docs/curriculum-resource/cs61b/guides/git/skeleton-merge-guide"}},l={},m=[{value:"A. Intro to Version Control Systems",id:"a-intro-to-version-control-systems",level:2},{value:"Intro to Git",id:"intro-to-git",level:4},{value:"B. Local Repositories (Narrative Introduction)",id:"b-local-repositories-narrative-introduction",level:2},{value:"C. Local Repositories (Technical Overview)",id:"c-local-repositories-technical-overview",level:2},{value:"Initializing Local Repositories",id:"initializing-local-repositories",level:4},{value:"Tracked vs. Untracked Files",id:"tracked-vs-untracked-files",level:4},{value:"Staging &amp; Committing",id:"staging--committing",level:4},{value:"Undoing Changes",id:"undoing-changes",level:4},{value:"Getting previous versions of files",id:"getting-previous-versions-of-files",level:4},{value:"D. Remote Repositories",id:"d-remote-repositories",level:2},{value:"E. Git Branching (advanced Git) (optional)",id:"e-git-branching-advanced-git-optional",level:2},{value:"Reasons for Branching",id:"reasons-for-branching",level:4},{value:"An Example Scenario",id:"an-example-scenario",level:4},{value:"Creating, Deleting, &amp; Switching Branches",id:"creating-deleting--switching-branches",level:4},{value:"Merging",id:"merging",level:4},{value:"Merge Conflicts",id:"merge-conflicts",level:4},{value:"Resolving Merge Conflicts",id:"resolving-merge-conflicts",level:4},{value:"F. Other Git Features",id:"f-other-git-features",level:2},{value:"G. Remote Repositories (Advanced)",id:"g-remote-repositories-advanced",level:2},{value:"Private vs. Public Repos",id:"private-vs-public-repos",level:4},{value:"Adding Remotes",id:"adding-remotes",level:4},{value:"Renaming, Deleting, &amp; Listing Remotes",id:"renaming-deleting--listing-remotes",level:4},{value:"Cloning a Remote",id:"cloning-a-remote",level:4},{value:"Pushing Commits",id:"pushing-commits",level:4},{value:"Fetching &amp; Pulling Commits",id:"fetching--pulling-commits",level:4},{value:"H. Remote Repository Exercise",id:"h-remote-repository-exercise",level:2},{value:"I. Conclusion",id:"i-conclusion",level:2},{value:"More with Remotes",id:"more-with-remotes",level:4},{value:"Extra Reading",id:"extra-reading",level:4},{value:"J. Advanced Git Features",id:"j-advanced-git-features",level:2},{value:"Rebasing",id:"rebasing",level:4},{value:"Squashing Commits",id:"squashing-commits",level:4},{value:"The Nuclear Option: Clone a Fresh Copy of Your Repo",id:"the-nuclear-option-clone-a-fresh-copy-of-your-repo",level:4}],c={toc:m},p="wrapper";function h(e){let{components:t,...i}=e;return(0,o.kt)(p,(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'Preface: This guide assumes a basic understanding of the command line on your\ncomputer. If you\'ve never used the command line, consider reading the section "the Terminal"\nof ',(0,o.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/labs/lab01/#the-terminal"},"Lab 1"),"."),(0,o.kt)("p",null,'This guide will primarily serve as an intro to and surface-level reference for\nGit. If you\'re looking for something more like "oh no, something happened\nto my repository!" and want to see potential fixes, consult the\n',(0,o.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/guides/git/wtfs"},"61B git-WTFS")," (git weird technical failure scenarios) instead."),(0,o.kt)("h2",{id:"a-intro-to-version-control-systems"},"A. Intro to Version Control Systems"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Version control systems")," are tools to keep track of changes to files over time.\nVersion control allows you to view or revert back to previous iterations of\nfiles. Some aspects of version control are actually built into commonly used\napplications. Think of the ",(0,o.kt)("inlineCode",{parentName:"p"},"undo")," command or how you can see the revision\nhistory of a Google document."),(0,o.kt)("p",null,"In the context of coding, version control systems can track the history of code\nrevisions, from the current state of the code all the way back until it was\nfirst tracked. This allows users to reference older versions of their work and\nshare code changes with other people, like fellow developers."),(0,o.kt)("p",null,"Version control has become a backbone of software development and collaboration\nin industry. In this class, we will be using ",(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/"},"Git"),". Git has\nexcellent ",(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/documentation"},"documentation")," so we highly\nencourage those who are interested to read more about what will be summarized in\nthe rest of this guide."),(0,o.kt)("h4",{id:"intro-to-git"},"Intro to Git"),(0,o.kt)("p",null,"Git is a ",(0,o.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Distributed_revision_control"},"distributed version control\nsystem"),' as opposed to\na centralized version control system. This means that every developer\'s computer\nstores the entire history (including all old versions) of the entire project!\nThis is rather unlike tools like Dropbox, where old versions are stored on a\nremote server owned by someone else. We call the entire history of an entire\nproject a "repository". The fact that the repository is stored locally leads to\nour ability to use Git locally on our own computers, even without an internet\nconnection.'),(0,o.kt)("p",null,"The lab computers already have Git installed on the command line, and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/labs/lab01/"},"Lab 1\nsetup")," guide explains how to install git on your own\ncomputer. In addition to the text based interface that we'll learning to use in\nthis guide, there is also a ",(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/downloads/guis"},"Git GUI (Graphical User\nInterface)"),". We will not officially support\nusage of the graphical GUI."),(0,o.kt)("h2",{id:"b-local-repositories-narrative-introduction"},"B. Local Repositories (Narrative Introduction)"),(0,o.kt)("p",null,"Let's go through a narrative example of how we might use git. We'll be using\nlots of unfamiliar terms and ideas in this story. For a video version of this\nnarrative example, see ",(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/9kolXm8-EYU"},"this\nvideo"),"."),(0,o.kt)("p",null,"Suppose we want to store recipes of various kinds on our computer, and also want\nto keep track of the history of these recipes as we change them. We might start\nby creating directories for both seitan and tofu recipes, then creating each\nrecipe using Sublime (invoked using the ",(0,o.kt)("inlineCode",{parentName:"p"},"subl")," command on my computer)."),(0,o.kt)("p",null,"We're assuming that you're just reading this, rather than trying the commands\nout yourself. If you'd like to follow along by typing everything out, you'll\nneed to use a text editor installed on your computer instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"subl"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd /users/sandra\n$ mkdir recipes\n$ cd recipes\n$ mkdir seitan\n$ mkdir tofu\n$ cd seitan\n$ subl smoky_carrot_tahini_seitan_slaw.txt\n$ subl boiled_seitan.txt\n$ cd ../tofu\n$ subl kung_pao_tofu.txt\n$ subl basil_ginger_tofu.txt\n")),(0,o.kt)("p",null,"Now we have four recipes, two for tofu, and two for seitan. To set up our git\nrepository to store the histories of our recipes as they evolve, we'd use the\nfollowing commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd /users/sandra/recipes\n$ git init\n")),(0,o.kt)("p",null,"What ",(0,o.kt)("inlineCode",{parentName:"p"},"git init")," does is tells the git version control system that we want to\ntrack the history of the current directory, in this case\n",(0,o.kt)("inlineCode",{parentName:"p"},"/users/sandra/recipes"),". However, at this point, ",(0,o.kt)("strong",{parentName:"p"},"NOTHING IS STORED IN THE\nREPOSITORY"),". It's like we've purchased a safe, but we haven't put anything in it\nyet."),(0,o.kt)("p",null,"To store everything in the repository, we need to first ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," files. For\nexample, we might do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git add tofu/kung_pao_tofu.txt\n")),(0,o.kt)("p",null,"Now here's where git is going to start seeming weird. Even after calling the\n",(0,o.kt)("inlineCode",{parentName:"p"},"add")," command, we ",(0,o.kt)("em",{parentName:"p"},"still")," haven't stored our recipe in the repository (i.e. in\nthe safe)."),(0,o.kt)("p",null,"Instead, what we've done is added ",(0,o.kt)("inlineCode",{parentName:"p"},"kung_pao_tofu.txt")," to the list of files to\ntrack (i.e. to be added to the safe later). The idea is that you might not want\nto necessarily track every single file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/users/sandra/recipes")," folder, so\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," command tells git which ones it should be tracking. We can see the\neffect of this command using ",(0,o.kt)("inlineCode",{parentName:"p"},"git status"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git status\n")),(0,o.kt)("p",null,"In which case, you'd see the following in response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'On branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use "git rm --cached <file>..." to unstage)\n\n    new file:   tofu/kung_pao_tofu.txt\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\n    seitan/\n    tofu/basil_ginger_tofu.txt\n')),(0,o.kt)("p",null,'The "changes to be committed" portion of the output lists all files that are\ncurrently being tracked and whose changes are ready be committed (i.e. that are\nready to be put in the safe). We also see that there are some untracked files;\nnamely, the ',(0,o.kt)("inlineCode",{parentName:"p"},"seitan/")," folder and the ",(0,o.kt)("inlineCode",{parentName:"p"},"tofu/basil_ginger_tofu.txt")," file. These\nare untracked because we have not added them using ",(0,o.kt)("inlineCode",{parentName:"p"},"git add"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note:")," Adding is also referred to as ",(0,o.kt)("em",{parentName:"p"},"staging")," (",(0,o.kt)("inlineCode",{parentName:"p"},"stage")," is equivalent to\n",(0,o.kt)("inlineCode",{parentName:"p"},"add"),")."),(0,o.kt)("p",null,"Let's try adding ",(0,o.kt)("inlineCode",{parentName:"p"},"tofu/basil_ginger_tofu.txt")," and checking the status once more:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git add tofu/basil_ginger_tofu.txt\n$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use "git rm --cached <file>..." to unstage)\n\n    new file:   tofu/basil_ginger_tofu.txt\n    new file:   tofu/kung_pao_tofu.txt\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\n    seitan/\n')),(0,o.kt)("p",null,"We see that both tofu recipes are tracked, but neither seitan recipe is tracked.\nWe will next use the ",(0,o.kt)("inlineCode",{parentName:"p"},"commit")," command to stick copies of our tofu recipes into\nthe repository (i.e. into the safe). To do this, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"git commit"),"\ncommand, as shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git commit -m "add tofu recipes"\n')),(0,o.kt)("p",null,"When executed, the ",(0,o.kt)("inlineCode",{parentName:"p"},"commit")," command stores a snapshot of all staged changes (in\nthis case, our tofu recipes) into the repository. Because we did not use ",(0,o.kt)("inlineCode",{parentName:"p"},"git\nadd")," on the seitan recipes, they were not included in the snapshot that was\nplaced in the repository. "),(0,o.kt)("p",null,"This snapshot of our work is now safe forever and ever (as long as our\ncomputer's hard drive doesn't fail or we don't damage the secret repository\nfiles).  The ",(0,o.kt)("inlineCode",{parentName:"p"},"-m")," flag lets us add a message to the commit, so we can remember\nwhat was most important about this commit (Git actually won't let you commit\nwithout a message). It is common convention to use the ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Imperative_mood"},"imperative\nform"),' of the verb rather than the\npast tense. So for example, the commit message above says "add tofu recipes"\nrather than "added tofu recipes". '),(0,o.kt)("p",null,"As another analogy, you can think of the whole process like taking a panoramic\npicture on a camera. The ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," command captures one portion of the image, and\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"commit"),' command stitches all "added" items together into a single panorama\nand throws this panorama into a safe. And just as a panorama only includes\nthings you point at (not the entire 360 degree circle around you), the ',(0,o.kt)("inlineCode",{parentName:"p"},"commit"),"\ncommand only ensafes those files which have been added using the ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," command\n(and not all files in the recipes directory)."),(0,o.kt)("p",null,"After committing, you'll note that ",(0,o.kt)("inlineCode",{parentName:"p"},"git status"),' no longer lists files under\n"Changes to be committed". This is similar to how after you finish taking a\npanoramic photo, all of the temporary tiny image files are thrown away. The\nresult of ',(0,o.kt)("inlineCode",{parentName:"p"},"git status")," at this point is shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git status\nOn branch main\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\n    seitan/\n\nnothing added to commit but untracked files present (use "git add" to track)\n')),(0,o.kt)("p",null,"As you may guess from how many times we've used it, ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," is very useful for\nseeing what's currently happening inside your repository. If you ever run into\nunexpected behavior, ",(0,o.kt)("inlineCode",{parentName:"p"},"git status")," is the first place to look!"),(0,o.kt)("p",null,"If you look at the files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tofu/")," folder, you'll see that the commit\nprocess did NOT affect the original files on our computer. This is much like how\nwhen you take a panoramic photo of your friends, they do not get sucked into a\ncyber hellscape inside your phone."),(0,o.kt)("p",null,"We can see evidence of our snapshot by using the special ",(0,o.kt)("inlineCode",{parentName:"p"},"git log")," command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git log\n\ncommit 9f955d85359fc8e4504d7220f13fad34f8f2c62b\nAuthor: Sandra Upson <sandra@Sandras-MacBook-Air.local>\nDate:   Sun Jan 17 19:06:48 2016 -0800\n\n    add tofu recipes\n")),(0,o.kt)("p",null,"That giant string of characters 9f955d85359fc8e4504d7220f13fad34f8f2c62b is the\nID of the commit. We can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"git show")," command to peek inside of this\ncommit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git show 9f955d85359fc8e4504d7220f13fad34f8f2c62b\n\ncommit 9f955d85359fc8e4504d7220f13fad34f8f2c62b\nAuthor: Sandra Upson <sandra@Sandras-MacBook-Air.local>\nDate:   Sun Jan 17 19:06:48 2016 -0800\n\n    add tofu recipes\n\ndiff --git a/tofu/basil_ginger_tofu.txt b/tofu/basil_ginger_tofu.txt\nnew file mode 100644\nindex 0000000..9a56e7a\n--- /dev/null\n+++ b/tofu/basil_ginger_tofu.txt\n@@ -0,0 +1,3 @@\n+basil\n+ginger\n+tofu\ndiff --git a/tofu/kung_pao_tofu.txt b/tofu/kung_pao_tofu.txt\nnew file mode 100644 index\n0000000..dad9bd9\n--- /dev/null\n+++ b/tofu/kung_pao_tofu.txt\n@@ -0,0 +1,3 @@\n+szechuan peppers\n+tofu\n+peanuts\n+kung\n+pao\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"git show")," command lets us peer right into the beating heart of a commit. We\ndon't expect all of its innards to make sense to you, but you can maybe glean\nthat the commit is a snapshot of both the names and contents of the files. "),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note"),": You will rarely use ",(0,o.kt)("inlineCode",{parentName:"p"},"show")," in real life or in 61B, but\nit's useful here for peeking inside a commit to get a better sense of what they\nare."),(0,o.kt)("p",null,"Suppose we now want to revise our kung pao recipe, because we decided it should\nhave bok choy in it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ subl tofu/kung_pao_tofu.txt\n")),(0,o.kt)("p",null,"The changes we just made to ",(0,o.kt)("inlineCode",{parentName:"p"},"kung_pao_tofu.txt")," are not saved in the repository.\nIn fact, if we do ",(0,o.kt)("inlineCode",{parentName:"p"},"git status")," again, we'll get:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git status\n\nOn branch main\nChanges not staged for commit:\n  (use "git add <file>..." to update what will be committed)\n  (use "git restore <file>..." to discard changes in working directory)\n\n    modified:   tofu/kung_pao_tofu.txt\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n\n    seitan/\n')),(0,o.kt)("p",null,"You might think to yourself \"OK, we'll I'll just do commit again\". However, if\nwe try to commit, git will say that there's nothing to do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git commit -m "add bok choy"\n\nOn branch main\nChanges not staged for commit:\n    modified:   tofu/kung_pao_tofu.txt\n\nUntracked files:\n    seitan/\n\nno changes added to commit\n')),(0,o.kt)("p",null,"This is because even though ",(0,o.kt)("inlineCode",{parentName:"p"},"kung_pao_tofu.txt")," is being ",(0,o.kt)("em",{parentName:"p"},"tracked"),", we have not\n",(0,o.kt)("em",{parentName:"p"},"staged")," our changes for commit. To store our changes in the repository, we\nfirst need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," command again, which will stage the changes for\ncommit (or in other words, we need to take a picture of our new\n",(0,o.kt)("inlineCode",{parentName:"p"},"kung_pao_tofu.txt")," before we can create the new panorama that we want to put in\nthe safe)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git add tofu/kung_pao_tofu.txt\n$ git status\n\nOn branch main\nChanges to be committed:\n  (use "git restore --staged <file>..." to unstage)\n    modified:   tofu/kung_pao_tofu.txt\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n    seitan/\n')),(0,o.kt)("p",null,"We see that our change to ",(0,o.kt)("inlineCode",{parentName:"p"},"kung_pao_tofu.txt"),' is now "to be committed" (it has\nbeen staged), meaning that the next commit will include changes to this file. We\ncommit just like before, and use ',(0,o.kt)("inlineCode",{parentName:"p"},"git log")," to see the list of all snapshots that\nhave been taken."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git commit -m "add bok choy"\n$ git log\n\ncommit cfcc8cbd88a763712dec2d6bd541b2783fa1f23b\nAuthor: Sandra Upson <sandra@Sandras-MacBook-Air.local>\nDate:   Sun Jan 17 19:24:45 2016 -0800\n\n    add bok choy\n\ncommit 9f955d85359fc8e4504d7220f13fad34f8f2c62b\nAuthor: Sandra Upson <sandra@Sandras-MacBook-Air.local>\nDate:   Sun Jan 17 19:06:48 2016 -0800\n\n    add tofu recipes\n')),(0,o.kt)("p",null,"We now see that there are TWO commits. We could again use ",(0,o.kt)("inlineCode",{parentName:"p"},"show")," to see what\nchanged in cfcc8cbd88a763712dec2d6bd541b2783fa1f23b, but we won't in this guide."),(0,o.kt)("p",null,"Suppose we later decide bok choy is gross, and want to restore our recipe to its\ninitial version. We can roll back our files using the ",(0,o.kt)("inlineCode",{parentName:"p"},"git restore")," command, as\nshown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git restore --source=9f955d85359fc8e4504d7220f13fad34f8f2c62b tofu/kung_pao_tofu.txt\n")),(0,o.kt)("p",null,"Think of the ",(0,o.kt)("inlineCode",{parentName:"p"},"restore")," command as a robot that goes to our safe, figures out\nwhat the kung pao tofu recipe looked like back when the newest panorama was\n9f955d85359fc8e4504d7220f13fad34f8f2c62b, and finally modifies the actual\n",(0,o.kt)("inlineCode",{parentName:"p"},"tofu/kung_pao_tofu.txt")," file so that it is exactly like it was at the\ntime snapshot 9f955d85359fc8e4504d7220f13fad34f8f2c62b was created. If we now\nlook at the contents of ",(0,o.kt)("inlineCode",{parentName:"p"},"kung_pao_tofu.txt")," after running this\ncommand, we'll see that bok choy is gone (phew)!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ cat tofu/kung_pao_tofu.txt\nszechuan\npeppers\ntofu\npeanuts\nkung\npao\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Important:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"restore")," ",(0,o.kt)("em",{parentName:"p"},"does not change the commit history!")," Or, in\nother words, the safe containing our panoramic photos is entirely unaffected by\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"restore")," command. The entire point of git is to create a log of everything\nthat has EVER happened to our files. In other words, if you took a panoramic\nphoto of your room in 2014 and in 2015 and put them in a safe, then decided in\n2016 to put it exactly back like it was in 2014, you would not set the panoramic\nphoto from the year 2015 on fire. Nor would you a picture of it in 2016\nmagically appear inside your safe. If you wanted to record what it looked like\nin 2016, you'd need to take another photo (with the appropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"-m")," message to\nremember what you just did)."),(0,o.kt)("p",null,"If we want to actually save a snapshot of the most up-to-date kung pao tofu\nrecipe (which no longer has bok choy), we'd have to commit. Remember that we\nneed to stage this change first!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git add tofu/kung_pao_tofu.txt\n$ git commit -m "restore the original recipe with no bok choy"\n$ git log\n\ncommit 4be06747886d0a270bf1d618d58f3273f0219a69\nAuthor: Sandra Upson <sandra@Sandras-MacBook-Air.local>\nDate:   Sun Jan 17 19:32:37 2016 -0800\n\n    restore the original recipe with no bok choy\n\ncommit cfcc8cbd88a763712dec2d6bd541b2783fa1f23b\nAuthor: Sandra Upson <sandra@Sandras-MacBook-Air.local>\nDate:   Sun Jan 17 19:24:45 2016 -0800\n\n    add bok choy\n\ncommit 9f955d85359fc8e4504d7220f13fad34f8f2c62b\nAuthor: Sandra Upson <sandra@Sandras-MacBook-Air.local>\nDate:   Sun Jan 17 19:06:48 2016 -0800\n\n    add tofu recipes\n')),(0,o.kt)("p",null,"We could then use ",(0,o.kt)("inlineCode",{parentName:"p"},"show")," to see the contents of this most recent commit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git show 4be06747886d0a270bf1d618d58f3273f0219a69\n\ncommit 4be06747886d0a270bf1d618d58f3273f0219a69\nAuthor: Sandra Upson <sandra@Sandras-MacBook-Air.local>\nDate:   Sun Jan 17 19:32:37 2016 -0800\n\n    restore the original recipe with no bok choy\n\ndiff --git a/tofu/kung_pao_tofu.txt b/tofu/kung_pao_tofu.txt\nindex 35a9e71..dad9bd9 100644\n--- a/tofu/kung_pao_tofu.txt\n+++ b/tofu/kung_pao_tofu.txt\n@@ -1,4 +1,3 @@\nszechuan\npeppers\ntofu\npeanuts\nkung\npao\n-bok choy\n\\ No newline at end of file\n")),(0,o.kt)("p",null,"This is the foundation of git. To summarize, using our photo analogy:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git init"),": Creates a box (repository) which permanently stores panoramic\nphotos (commits)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git add"),": Takes a temporary photo of (stages) something that can be\nassembled into a panoramic photo later."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git commit"),": Assembles all available temporary photos (staged changes) into\na panoramic photo. Also destroys all temporary photos."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git log"),": Lists all the panoramic photos we've ever taken."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git show"),": Inspects the contents of a particular panoramic photo."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git restore"),": Rearranges files back to how they looked in a given panoramic\nphoto. Does not affect the panoramic photos in your box in any way.")),(0,o.kt)("p",null,"There's more to learn about git, but before we get there, let's give a more\nformal explanation of what we've just done."),(0,o.kt)("h2",{id:"c-local-repositories-technical-overview"},"C. Local Repositories (Technical Overview)"),(0,o.kt)("h4",{id:"initializing-local-repositories"},"Initializing Local Repositories"),(0,o.kt)("p",null,"Let's first start off with the ",(0,o.kt)("em",{parentName:"p"},"local repository"),". As mentioned above, a\nrepository stores files as well as the history of changes to those files. In\norder to begin, you must initialize a Git repository by typing the following\ncommand into your terminal ",(0,o.kt)("em",{parentName:"p"},"while in the directory whose history you want to\nstore in a local repository"),". If you're using Windows, you should be using a Git\nBash terminal window while you type these commands. Reminder: If you're unsure\nof how to use a terminal window, consider checking out the \"Learning to Use the\nTerminal\" section of ",(0,o.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/labs/lab01/"},"Lab 1 setup"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git init\n")),(0,o.kt)("p",null,"Extra for experts: When you initialize a Git repository, Git creates a ",(0,o.kt)("inlineCode",{parentName:"p"},".git"),"\nsubdirectory. Inside this directory it will store a bunch of metadata, as well\nas old the actual snapshots of the files.  However, you'll never need to\nactually open the contents of this .git directory, and you should DEFINITELY not\nchange anything inside directly!"),(0,o.kt)("p",null,'Depending on your operating system, you may not see the folder, because folders\nwhose names start with "." are not shown by your OS by defaut.  The UNIX command\n',(0,o.kt)("inlineCode",{parentName:"p"},"ls -la")," will list all directories, including your ",(0,o.kt)("inlineCode",{parentName:"p"},".git")," directory, so you can\nuse this command to check that your repo has been initialized properly."),(0,o.kt)("h4",{id:"tracked-vs-untracked-files"},"Tracked vs. Untracked Files"),(0,o.kt)("p",null,"Git repos start off not tracking any files. In order to save the revision\nhistory of a file, you need to track it. The Git documentation has an excellent\nsection on ",(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository"},"recording\nchanges"),".\nAn image from that section is placed here for your convenience:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"File Status Lifecyle",src:n(17140).Z,width:"800",height:"330"})),(0,o.kt)("p",null,"As this figure shows, files fall into two main categories:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("em",{parentName:"p"},"untracked")," files: These files have either never been tracked or were removed\nfrom tracking. Git is not maintaining history for these files.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("em",{parentName:"p"},"tracked")," files: These files have been added to the Git repository and can be\nin various stages of modification: unmodified, modified, or staged."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"1. An _unmodified_ file is one that has had no new changes since the last\nversion of the files was added to the Git repo.\n\n2. A _modified_ file is one that is different from the last one Git has\nsaved.\n\n3. A _staged_ file is one that a user has designated as part of a future\ncommit (usually through use of the `git add` command). We can think of these\nas files which have lights shining upon them.\n")))),(0,o.kt)("p",null,"The following Git command allows you see the status of each file, i.e. whether\nit is untracked, unmodified, modified, or staged:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git status\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"git status")," command is extremely useful for determining the exact status of\neach file in your repository. If you are confused about what has changed and\nwhat needs to be committed, it can remind you of what to do next."),(0,o.kt)("h4",{id:"staging--committing"},"Staging & Committing"),(0,o.kt)("p",null,"A ",(0,o.kt)("em",{parentName:"p"},"commit")," is a specific snapshot of your working directory at a particular\ntime.  Users must specify what exactly composes the snapshot by ",(0,o.kt)("em",{parentName:"p"},"staging")," files."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"add")," command lets you stage a file (without the square brackets). "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git add [file]\n")),(0,o.kt)("p",null,"You can also stage an entire folder, which will recursively stage all files and\nsubfolders in it (this is also true of many git commands, just replace the file\nwith a folder). Once you have staged all the files you would like to include in\nyour snapshot, you can commit them as one block with a message. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'$ git commit -m "your commit message here"\n')),(0,o.kt)("p",null,"Your message should be descriptive and explain what changes your commit makes to\nyour code. You may want to quickly describe bug fixes, implemented classes, etc.\nso that your messages are helpful later when looking through your commit log."),(0,o.kt)("p",null,"In order to see previous commits, you can use the log command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git log\n")),(0,o.kt)("p",null,"The Git reference guide has a helpful section on ",(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History"},"viewing commit\nhistory")," and\nfiltering log results when searching for particular commits. It might also be\nworth checking out ",(0,o.kt)("inlineCode",{parentName:"p"},"gitk"),", which is a GUI prompted by the command line."),(0,o.kt)("p",null,"As a side note on development workflow, it is a good idea to commit your code as\noften as possible. Whenever you make significant (or even minor) changes to your\ncode, make a commit. If you are trying something out that you might not stick\nwith, commit it (perhaps to a different branch, which will be explained below)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Rule of Thumb"),": If you commit, you can always restore your old code or change\nit. However, if you don't commit, you won't be able to get old versions back. So\ncommit often!"),(0,o.kt)("h4",{id:"undoing-changes"},"Undoing Changes"),(0,o.kt)("p",null,"The Git reference has a great section on ",(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/book/en/Git-Basics-Undoing-Things"},"undoing\nthings"),".  Please note that\nwhile Git revolves around the concept of history, it is possible to lose your\nwork if you revert with some of these undo commands. Thus, be careful and read\nabout the effects of your changes before undoing your work."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Unstage a file that you haven't yet committed:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git restore --staged [file]\n")),(0,o.kt)("p",{parentName:"li"},"  This will take the ",(0,o.kt)("inlineCode",{parentName:"p"},"file"),"'s status back to modified, leaving changes intact.\nDon't worry about this command undoing any work. This command is the\nequivalent of deleting one of the temporary images that you're going to\ncombine into a panorama."),(0,o.kt)("p",{parentName:"li"},"  Why might we need to use this command? Let's say you accidentally started\ntracking a file that you didn't want to track. (an embarrassing video of\nyourself, for instance.) Or you were made some changes to a file that you\nthought you would commit but no longer want to commit quite yet.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Amend latest commit (changing commit message or add forgotten files):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git add [forgotten-file]\n$ git commit --amend\n")),(0,o.kt)("p",{parentName:"li"},"  Please note that this new amended commit will replace the previous commit.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Restore a file to its state at the time of the most recent commit (",(0,o.kt)("strong",{parentName:"p"},"use with\ncaution!"),"):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git restore [file]\n")),(0,o.kt)("p",{parentName:"li"},"  If the ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," has been staged, you'll need to unstage it first. "),(0,o.kt)("p",{parentName:"li"},"  This command is useful if you would like to legitimately undo your work. For\nexample, if you accidentally modified a certain file since committing\npreviously, and would like to change it back to how it was."),(0,o.kt)("p",{parentName:"li"},"  Be careful with this command! ",(0,o.kt)("strong",{parentName:"p"},"Any changes made to the file since the last\ncommit will be lost.")," If you want to be safe, stage and commit your changes\nfirst and then restore to a previous version using one of the commands\nbelow."))),(0,o.kt)("h4",{id:"getting-previous-versions-of-files"},"Getting previous versions of files"),(0,o.kt)("p",null,"Suppose you're working on a lab, and halfway through, you realize you've been\ndoing it all wrong. If only there was a way to get back the skeleton code so\nyou can start over!"),(0,o.kt)("p",null,"If you haven't committed yet, you can use the previous command - but what if\nyou've already committed some changes? Rather than restoring the files in the\nlatest commit, you can use the more powerful"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git restore --source=[commit or branch] [file or folder]\n")),(0,o.kt)("p",null,"which can get files from an arbitrary point in time. For example, let's say\nyou've accidentally deleted ",(0,o.kt)("inlineCode",{parentName:"p"},"lab1000/"),", and committed that change. Oh no! To fix\nthis, you can get back the skeleton code with"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git restore --source=skeleton/main lab1000/\n")),(0,o.kt)("p",null,"This allows you to restart from the skeleton code for ",(0,o.kt)("inlineCode",{parentName:"p"},"lab1000"),". "),(0,o.kt)("p",null,"Now consider a scenario where you've made some progress on ",(0,o.kt)("inlineCode",{parentName:"p"},"lab1000/Cheese.txt"),",\nand want to get back the version of that file from a few commits ago. You can\nfind the correct commit with ",(0,o.kt)("inlineCode",{parentName:"p"},"git log")," and then run"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git restore --source=abcd1234efgh7890abcd1234c7ee5e7890c7ee5e lab1000/Cheese.txt\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"abcd1234efgh7890abcd1234c7ee5e7890c7ee5e")," is the ID from ",(0,o.kt)("inlineCode",{parentName:"p"},"git log")," of the\ncommit that contains the version of ",(0,o.kt)("inlineCode",{parentName:"p"},"lab1000/Cheese.txt")," we want to restore."),(0,o.kt)("p",null,"Remember that you'll need to re-stage the file for the next commit to track\nyour restoration!"),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("blockquote",{parentName:"admonition"},(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"If you're working on lab 1, it's time to return and do the git exercise.")))),(0,o.kt)("h2",{id:"d-remote-repositories"},"D. Remote Repositories"),(0,o.kt)("p",null,"One especially handy feature of Git is the ability to store copies of your\nrepository on computers other than your own. Recall that our snapshots are all\nstored on our computer in a secret folder. That means if our computer is damaged\nor destroyed, so are all our snapshots."),(0,o.kt)("p",null,"Suppose we wanted to push our tofu and seitan recipes to another computer, we'd\ntypically use the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git push origin main\n")),(0,o.kt)("p",null,"However, if we tried that out, we'd simply get the message below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"fatal: 'origin' does not appear to be a git repository\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights and the repository exists.\n")),(0,o.kt)("p",null,"This is because we have not yet told git where to send the files. As it happens,\nthere is a for-profit private company called GitHub that has made a business out\nof storing copies of people's repositories. "),(0,o.kt)("p",null,"In 61B, we'll use GitHub to store our repositories. To create a repository on\nGitHub, you'd probably use their web interface. However, we've already done this\nfor you."),(0,o.kt)("p",null,"The most important remote repository commands are listed below, along with a\ntechnical description that might not make sense yet. If you're working on lab 1,\nhead back to the lab to learn more about these commands."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git clone [remote-repo-URL]"),': Makes a copy of the specified repository, but\non your local computer. Also creates a working directory that has files\narranged exactly like the most recent snapshot in the download repository.\nAlso records the URL of the remote repository for subsequent network data\ntransfers, and gives it the special remote-repo-name "origin".'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git remote add [remote-repo-name] [remote-repo-URL]"),": Records a new location\nfor network data transfers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git remote -v"),": Lists all locations for network data transfers."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git pull [remote-repo-name] main"),": Get the most recent copy of the files\nas seen in ",(0,o.kt)("inlineCode",{parentName:"li"},"remote-repo-name"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git push [remote-repo-name] main"),": Uploads the most recent copy of your\nfiles to ",(0,o.kt)("inlineCode",{parentName:"li"},"remote-repo-name"),".")),(0,o.kt)("p",null,"For most of this course, you'll only have two remote repositories: ",(0,o.kt)("em",{parentName:"p"},"origin"),",\nwhich is the remote for saving and submitting your individual work, and\n",(0,o.kt)("em",{parentName:"p"},"skeleton"),", which is the remote from which you'll receive skeleton code."),(0,o.kt)("h2",{id:"e-git-branching-advanced-git-optional"},"E. Git Branching (advanced Git) (optional)"),(0,o.kt)("p",null,"Everything below this line is optional for 61B."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," In 2020, Git changed the default branch name from ",(0,o.kt)("inlineCode",{parentName:"p"},"master")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),".\nThe graphics below have not been updated accordingly - for now, just think of\n",(0,o.kt)("inlineCode",{parentName:"p"},"master")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),"'s outdated equivalent."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Simple Git",src:n(43249).Z,width:"826",height:"179"})),(0,o.kt)("p",null,"Every command that we've covered so far was working with the default branch.\nThis branch is conventionally called the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch. However, there are\ncases when you may want to create branches in your code."),(0,o.kt)("p",null,"Branches allow you to keep track of multiple different versions of your work\nsimultaneously. One way to think of branches are as alternate dimensions.\nPerhaps one branch is the result of choosing to use a linked list while another\nbranch is the result of choosing to use an array."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Git with feature branch",src:n(2344).Z,width:"823",height:"235"})),(0,o.kt)("h4",{id:"reasons-for-branching"},"Reasons for Branching"),(0,o.kt)("p",null,"Here are some cases when it may be a good idea to branch."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You may want to make a dramatic change to your existing code (called\nrefactoring) but it will break other parts of your project. But you want to be\nable to simultaneously work on other parts or you have partners, and you don't\nwant to break the code for them.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You want to start working on a new part of the project, but you aren't sure\nyet if your changes will work and make it to the final product.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You are working with partners and don't want to mix up your current work with\ntheirs, even if you want to bring your work together later in the future."))),(0,o.kt)("p",null,"Creating a branch will let you keep track of multiple different versions of your\ncode, and you can easily switch between versions and merge branches together\nonce you've finished working on a section and want it to join the rest of your\ncode."),(0,o.kt)("h4",{id:"an-example-scenario"},"An Example Scenario"),(0,o.kt)("p",null,"For example, let's say that you've finished half of a project so far. There is a\ndifficult part still left to do, and you're not sure how to do it. Perhaps you\nhave three different ideas for how to do it, and you're not sure which will\nwork. At this point, it might be a good idea to create a branch off of ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),"\nand try out your first idea."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If your code works, you can merge the branch back to your main code (on the\n",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch) and submit your project.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If your code doesn't work, don't worry about reverting your code and having to\nmanipulate Git history. You can simply switch back to ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),", which won't\nhave any of your changes, create another branch, and try out your second idea."))),(0,o.kt)("p",null,"This can continue till you figure out the best way to write you code, and you\nonly need to merge the branches that work back into ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," in the end."),(0,o.kt)("p",null,"The Git reference has a section on ",(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging"},"branching and\nmerging"),"\nwith some figures of how branches are represented in Git's underlying data\nstructure. It turns out that Git keeps track of commit history as a graph with\nbranch pointers and commits as nodes within the graph. (Hence the tree-related\nterminology.)"),(0,o.kt)("h4",{id:"creating-deleting--switching-branches"},"Creating, Deleting, & Switching Branches"),(0,o.kt)("p",null,"A special branch pointer called the ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD")," references the branch you currently\nhave as your working directory. Branching instructions modify branches and\nchange what your ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD")," points to so that you see a different version of your\nfiles."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The following command will create a branch off of your current branch."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git branch [new-branch-name]\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This command lets you switch from one branch to another by changing which\nbranch your ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD")," pointer references."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git switch [destination-branch]\n")),(0,o.kt)("p",{parentName:"li"},"  By default, your initial branch is called ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),". It is advised that you\nstick with this convention. Every other branch, however, can be named\nwhatever you'd like. It's generally a good idea to call your branch\nsomething descriptive like ",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics")," so that you can remember\nwhat commits it contains.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can combine the previous two commands which create a new branch and then\nswitch to it with this single command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git switch -c [new-branch-name]\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can delete branches with the following command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git branch -d [branch-to-delete]\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can easily figure out which branch you are on with this command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git branch -v\n")),(0,o.kt)("p",{parentName:"li"},"  More particular, the ",(0,o.kt)("inlineCode",{parentName:"p"},"-v")," flag will list the last commit on each branch as\nwell."))),(0,o.kt)("h4",{id:"merging"},"Merging"),(0,o.kt)("p",null,"There are often times when you'd like to merge one branch into another. For\nexample, let's say that you like the work you've done on ",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics"),".\nYour AI is now super-boss, and you'd like your ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch to see the\ncommits you've made on ",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics")," and delete the\n",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics")," branch."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Git with fixing-ai-heuristics branch",src:n(68718).Z,width:"749",height:"237"})),(0,o.kt)("p",null,"In this case, you should switch to the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch and merge\n",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics")," into ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git switch main\n$ git merge fixing-ai-heuristics\n")),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," command will create a new commit that joins the two branches\ntogether and change each branch's pointer to reference this new commit. While\nmost commits have only one parent commit, this new merge commit has two parent\ncommits. The commit on the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch is called its ",(0,o.kt)("em",{parentName:"p"},"first parent")," and the\ncommit on the ",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics")," branch is called its ",(0,o.kt)("em",{parentName:"p"},"second parent"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Git with fixing-ai-heuristics branch merged into master",src:n(22796).Z,width:"801",height:"233"})),(0,o.kt)("h4",{id:"merge-conflicts"},"Merge Conflicts"),(0,o.kt)("p",null,"It may happen that two branches you are trying to merge have conflicting\ninformation. This can occur if commits on the two branches changed the same\nfiles. Git is sophisticated enough to resolve many changes, even when they occur\nin the same file (though distinct places)."),(0,o.kt)("p",null,"However, there are times that conflicts cannot be resolved by Git because\nchanges impact the same methods/lines of code. In these cases, it will present\nboth changes from the different branches to you as a ",(0,o.kt)("em",{parentName:"p"},"merge conflict"),"."),(0,o.kt)("h4",{id:"resolving-merge-conflicts"},"Resolving Merge Conflicts"),(0,o.kt)("p",null,"Git will tell you which files have conflicts. You need to open the files that\nhave conflicts and resolve them manually. After doing this, you must commit to\ncomplete the merge of the two branches."),(0,o.kt)("p",null,"The files with conflicts will contain segments that look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'<<<<<<< HEAD\nfor (int i = 0; i < results.length; i++) {\n    println(results[i]);\n    println("FIX ME!");\n}\n=======\nint[] final = int[results.length];\nfor (int i = 0; i < results.length - 1; i++) {\n    final[i] = results[i] + 1;\n    println(final[i]);\n}\n>>>>>>> fixing-ai-heuristics\n')),(0,o.kt)("p",null,"Basically, you'll see two segments with similar pieces of code:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The top code snippet is from the branch you originally had switched to when\nyou ran the ",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," command. It's called ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD")," because the ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD")," pointer was\nreferencing this branch at the time of the ",(0,o.kt)("inlineCode",{parentName:"p"},"merge"),". Continuing our example\nabove, this code would be from the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The bottom code snippet is from the branch you were merging into the branch\nyou switched to. This is why it shows that the code is from\n",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics"),"."))),(0,o.kt)("p",null,"Basically, you'll need to go through all marked sections and pick which snippet\nof code you'd like to keep."),(0,o.kt)("p",null,'In the previous example, I like the bottom piece of code better because I just\nfixed the AI while the top piece still prints "FIX ME!" Thus, I will delete the\ntop segment as well as the extraneous lines to get this:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"int[] final = int[results.length];\nfor (int i = 0; i < results.length - 1; i++) {\n    final[i] = results[i] + 1;\n    println(final[i]);\n}\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Random Note: I have no idea how this code supposedly fixes the AI heuristics.\nDon't use it for your project! It is useless, I tell you. Useless!")),(0,o.kt)("p",null,"Doing this for all segments demarcated by conflict-resolution markers resolves\nyour conflict. After doing this for all conflicting files, you can commit.  This\nwill complete your merge."),(0,o.kt)("h2",{id:"f-other-git-features"},"F. Other Git Features"),(0,o.kt)("p",null,"There are tons of other cool Git commands. Unfortunately, we need to continue on\nto discuss remote repositories. Thus, this segment will just list some other\ninteresting features that you are encouraged to explore in your own time:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/book/en/Git-Tools-Stashing"},"Stashing")),(0,o.kt)("p",{parentName:"li"},"  Stashing allows you to save your changes onto a stack without making a more\npermanent commit. It is equivalent to picking up your work-in-progress and\nplacing it in a box to get back to later. In the meantime, your desk is now\nclean."),(0,o.kt)("p",{parentName:"li"},"  Why might you want to use this?"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Your files may be in a disorganized state, and you don't want to commit\nyet, but you also don't want to get rid of your changes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You modified multiple files, but you dislike your changes and you would\njust like to get things back to how they were after your most recent\ncommit. Then you can ",(0,o.kt)("inlineCode",{parentName:"p"},"stash")," your code and then drop that stash rather\nthan having to manually revert multiple files. (Be careful with this\nusage!)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You modified files but accidentally modified them on the wrong branch.\nThen you can ",(0,o.kt)("inlineCode",{parentName:"p"},"stash")," your changes, switch branches, and unstash your\nchanges so that they are all in the new branch.")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/book/en/Git-Tools-Rewriting-History"},"Rewriting History")),(0,o.kt)("p",{parentName:"li"},"  Let's say you want to do more than change your last commit or drop changes\nto your files before your most recent commit. What if you want to do\nsomething crazy like rewrite history? You can change multiple commit\nmessages, splits one commits into two, and reorder commits.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/book/en/Git-Branching-Rebasing"},"Rebasing")),(0,o.kt)("p",{parentName:"li"},"  Rebasing changes the parent commit of a specific commit. In doing this, it\nchanges the commits so that it is no longer the same."),(0,o.kt)("p",{parentName:"li"},"  ",(0,o.kt)("inlineCode",{parentName:"p"},"Rebase")," can be used as an alternative to ",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," for integrating changes\nfrom one branch to another. It is quite different from ",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," in that\n",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," creates a new commit that has both parent branch commits as parents.\nRebasing takes one set of commits from a branch and places them all at the\nend of the other branch."),(0,o.kt)("p",{parentName:"li"},"  There are different reasons why you would want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," versus\n",(0,o.kt)("inlineCode",{parentName:"p"},"rebase"),".  One of these reasons is that ",(0,o.kt)("inlineCode",{parentName:"p"},"rebase")," leads to a cleaner history\nwhen working with many different branches and team members.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/docs/git-reset.html"},"Reset")),(0,o.kt)("p",{parentName:"li"},"  Perhaps you decide that you want things to be how they were a certain number\nof commits ago. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"reset")," if you are absolutely sure that you\ndon't want the last few commits. ",(0,o.kt)("inlineCode",{parentName:"p"},"Reset")," is quite a nuanced command, so read\ncarefully before attempting use."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://stackoverflow.com/questions/2530060/can-you-explain-what-git-reset-does-in-plain-english"},"Stack Overflow on git\nreset")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://git-scm.com/blog/2011/07/11/reset.html"},"Reset Demystified")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/docs/git-revert.html"},"Revert")),(0,o.kt)("p",{parentName:"li"},"  ",(0,o.kt)("inlineCode",{parentName:"p"},"Revert")," allows you to reverse the changes introduced by certain commits by\nrecording new commits to undo the changes. This is a safer option that\nsimply throwing away past commits. But again, use this with caution.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/docs/git-cherry-pick.html"},"Cherry Pick")),(0,o.kt)("p",{parentName:"li"},"  ",(0,o.kt)("inlineCode",{parentName:"p"},"Cherry pick")," allows you to apply the changes introduced by some existing\ncommits. For example, if you have two different branches, and your current\nbranch lacks one or two commits that would be helpful but are only in the\nother branch, then you can ",(0,o.kt)("inlineCode",{parentName:"p"},"cherry pick")," to grab those commits without\nmerging or rebasing to get all the commits."))),(0,o.kt)("p",null,"There are far more features and commands not mentioned here. Feel free to\nexplore more and search for answers. There most likely exists a Git command for\nnearly everything you would want to do."),(0,o.kt)("h2",{id:"g-remote-repositories-advanced"},"G. Remote Repositories (Advanced)"),(0,o.kt)("h4",{id:"private-vs-public-repos"},"Private vs. Public Repos"),(0,o.kt)("p",null,"By default, repositories on GitHub are public, rather than private. This means\nthat anyone on the Internet can view the code in a public repo. ",(0,o.kt)("u",null,"For all class\nassignments, you are required to use private repositories"),"."),(0,o.kt)("p",null,"Hosting school code in a public repo is a violation of the academic honesty\npolicies of this class (and most other Berkeley EECS classes). Please keep this\nin mind when using sites like GitHub for collaboration."),(0,o.kt)("p",null,"As of 01/07/2019, ",(0,o.kt)("a",{parentName:"p",href:"https://github.blog/2019-01-07-new-year-new-github/"},"GitHub is offering free unlimited private\nrepositories"),",\nso there should be no excuse for anyone to post their code in a public repo."),(0,o.kt)("h4",{id:"adding-remotes"},"Adding Remotes"),(0,o.kt)("p",null,"Adding a remote repository means that you are telling git where the repo is\nlocated. You do not necessarily have read/write access to every repo you can\nadd. Actually accessing and modifying files in a remote is discussed later and\nrelies on having added the remote."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git remote add [short-name] [remote-url]\n")),(0,o.kt)("p",null,"The remote URL will look something like\n",(0,o.kt)("inlineCode",{parentName:"p"},"https://github.com/berkeley-cs61b/skeleton.git")," if you are using HTTP or\n",(0,o.kt)("inlineCode",{parentName:"p"},"git@github.com:berkeley-cs61b/skeleton.git")," if you are using SSH."),(0,o.kt)("p",null,"By convention, the name of the primary remote is called ",(0,o.kt)("inlineCode",{parentName:"p"},"origin")," (for original\nremote repository). So either of the following two commands would allow me to\nadd the ",(0,o.kt)("inlineCode",{parentName:"p"},"berkeley-cs61b/skeleton")," repository as a remote."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git remote add origin https://github.com/berkeley-cs61b/skeleton.git\n$ git remote add origin git@github.com:berkeley-cs61b/skeleton.git\n")),(0,o.kt)("p",null,"After adding a remote, all other commands use its associated short name."),(0,o.kt)("h4",{id:"renaming-deleting--listing-remotes"},"Renaming, Deleting, & Listing Remotes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can rename your remote by using this command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git remote rename [old-name] [new-name]\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can also remove a remote if you are no longer using it:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git remote rm [remote-name]\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To see what remotes you have, you can list them. The ",(0,o.kt)("inlineCode",{parentName:"p"},"-v")," flag tells you the\nURL of each remote (not just its name)."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git remote -v\n")))),(0,o.kt)("p",null,"You can read more about ",(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/book/en/Git-Basics-Working-with-Remotes"},"working with\nremotes")," in the Pro\nGit book."),(0,o.kt)("h4",{id:"cloning-a-remote"},"Cloning a Remote"),(0,o.kt)("p",null,"There are often remote repos with code that you would like to copy to your own\ncomputer. In these cases, you can easily download the entire repo with its\ncommit history by cloning the remote:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git clone [remote-url]\n$ git clone [remote-url] [directory-name]\n")),(0,o.kt)("p",null,"The top command will create a directory of the same name as the remote repo. The\nsecond command allows you to specify a different name for the copied repository."),(0,o.kt)("p",null,"When you clone a remote, the cloned remote because associated with your local\nrepo by the name ",(0,o.kt)("inlineCode",{parentName:"p"},"origin"),". This is by default because the cloned remote was the\n",(0,o.kt)("inlineCode",{parentName:"p"},"origin")," for your local repo."),(0,o.kt)("h4",{id:"pushing-commits"},"Pushing Commits"),(0,o.kt)("p",null,"You may wish to update the contents of a remote repo by adding some commits that\nyou made locally. You can do this by ",(0,o.kt)("inlineCode",{parentName:"p"},"pushing")," your commits:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git push [remote-name] [remote-branch]\n")),(0,o.kt)("p",null,"Note that you will be pushing to the remote branch from the branch your ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD"),"\npointer is currently referencing. For example, let's say that I cloned a repo\nthen made some changes on the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch. I can give the remote my local\nchanges with this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git push origin main\n")),(0,o.kt)("h4",{id:"fetching--pulling-commits"},"Fetching & Pulling Commits"),(0,o.kt)("p",null,"There are also times that you'd like to get some new commits from a remote that\nare not currently on your local repo. For example, you may have cloned a remote\ncreated by a partner and wish to get his/her newest changes. You can get those\nchanges by fetching or pulling from the remote."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"fetch"),": This is analogous to downloading the commits. It does not incorporate\nthem into your own code."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git fetch [remote-name]\n")),(0,o.kt)("p",{parentName:"li"},"  Why might you use this? Your partner may have created some changes that\nyou'd like to review but keep separate from your own code. Fetching the\nchanges will only update your local copy of the remote code but not merge\nthe changes into your own code."),(0,o.kt)("p",{parentName:"li"},"  For a more particular example, let's say that your partner creates a new\nbranch on the remote called ",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics"),". You can view that\nbranch's commits with the following steps:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git fetch origin\n$ git branch review-ai-fix origin/fixing-ai-heuristics\n$ git switch review-ai-fix\n")),(0,o.kt)("p",{parentName:"li"},"  The second command creates a new branch called ",(0,o.kt)("inlineCode",{parentName:"p"},"review-ai-fix")," that ",(0,o.kt)("em",{parentName:"p"},"tracks"),"\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"fixing-ai-heuristics")," branch on the ",(0,o.kt)("inlineCode",{parentName:"p"},"origin")," remote.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"pull"),": This is equivalent to a ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch + merge"),". Not only will ",(0,o.kt)("inlineCode",{parentName:"p"},"pull")," fetch\nthe most recent changes, it will also merge the changes into your ",(0,o.kt)("inlineCode",{parentName:"p"},"HEAD"),"\nbranch."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git pull [remote-name] [remote-branch-name]\n")),(0,o.kt)("p",{parentName:"li"},"  Let's say that my boss partner has pushed some commits to the ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),"\nbranch of our shared remote that fix our AI heuristics. I happen to know\nthat it won't break my code, so I can just pull it and merge it into my own\ncode right away."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git pull origin main\n")))),(0,o.kt)("h2",{id:"h-remote-repository-exercise"},"H. Remote Repository Exercise"),(0,o.kt)("p",null,"For this follow-along example, you will need a partner. You will be working with\nyour partner on a remote repository and have to deal with things like merge\nconflicts. Also note that both of you will need accounts on the same service,\nwhether it be GitHub or Bitbucket."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 1 will create a private repository on GitHub or Bitbucket and add\nPartner 2 as a collaborator. This repo can be called ",(0,o.kt)("inlineCode",{parentName:"p"},"learning-git"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"Note: [GitHub Education](https://education.github.com/) discount requests\ntake some time to process, so it is acceptable to use a public repo for just\nthis lab. For all other assignments, you  must use a private repo.\n\nAlso, please do not add your partner to your personal repo in the\n[Berkeley-CS61B](https://github.com/Berkeley-CS61B) organization.\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 2 will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"README")," file, commit the file, and push this commit\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"learning-git")," remote."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"![Exercise 2.2](/img/cs61b/Exercise2.2.png)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 2 will also add the remote that Partner 1 created and push this new\ncommit."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"![GitHub Remote URL](/img/cs61b/github-remote-url.png)\n\nWith either GitHub or Bitbucket, you can find the remote URL on the repo's\nmain page.\n\n![Exercise 2.3](/img/cs61b/Exercise2.3.png)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 1 will now clone the remote repo to their own machine then add a line\nto the bottom of README. (Note: At this point, the pictures may get a bit\nconfusing because I'm pretending to be both partners.)"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"![Exercise 2.4](/img/cs61b/Exercise2.4.png)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 1 will commit this change and push it back to the remote."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"Exercise 2.5",src:n(97331).Z,width:"1656",height:"428"}))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 2 will similarly add a line to the bottom of their README and commit\nthis change."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"![Exercise 2.6](/img/cs61b/Exercise2.6.png)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 2 will now pull and find that there are merge conflicts."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"Exercise 2.7",src:n(80427).Z,width:"1634",height:"702"}))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 2 should resolve the merge conflicts by rearranging the lines. Then\nPartner 2 should add ",(0,o.kt)("inlineCode",{parentName:"p"},"README")," and commit and push to finish."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"![Exercise 2.8](/img/cs61b/Exercise2.8.png)\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Partner 1 can now pull and get two new commits - the added line & the merge\ncommit. Now both partners are up to date."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"![Exercise 2.9](/img/cs61b/Exercise2.9.png)\n")))),(0,o.kt)("h2",{id:"i-conclusion"},"I. Conclusion"),(0,o.kt)("h4",{id:"more-with-remotes"},"More with Remotes"),(0,o.kt)("p",null,"These simple commands to add/remove remotes, push commits, and fetch/pull\nchanges can be combined with all the commands you've learned in regards to local\nrepositories to give you a powerful toolkit in working collaboratively with\nothers."),(0,o.kt)("p",null,"GitHub has some other really cool features that can be helpful for in project\ndevelopment:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://help.github.com/articles/fork-a-repo"},"Forking a Repo"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://help.github.com/articles/syncing-a-fork"},"Syncing a Fork"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://help.github.com/articles/using-pull-requests"},"Using Pull Requests"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://guides.github.com/features/issues/"},"Using Issues")))),(0,o.kt)("h4",{id:"extra-reading"},"Extra Reading"),(0,o.kt)("p",null,"For those of you who found this topic interesting, check out these extra\nresources! Keep in mind, however, that the best way to learn to use Git\neffectively is to just start incorporating it into your own coding workflow!\nGood luck, and have an octotastic day!"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://git-scm.com/doc"},"Git Documentation")," is really quite good and clear,\nand there is a great Pro Git book by Scott Chacon.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://wildlyinaccurate.com/a-hackers-guide-to-git"},"Hacker's Guide to Git"),"\nis a very friendly introduction to how Git works. It gives a peek at the\nstructure of commits & branches and explains how some commands work.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"http://pcottle.github.io/learnGitBranching/"},"Learn Git Branching")," is a fun\nand interactive tutorial that visualizes Git commands."))),(0,o.kt)("h2",{id:"j-advanced-git-features"},"J. Advanced Git Features"),(0,o.kt)("p",null,"Here are some more advanced features that might make your life a little easier.\nOnce you get the hang of the basic features of git, you'll start to notice some\ncommon tasks are a bit tedious. Here are some built-in features that you might\nconsider using."),(0,o.kt)("h4",{id:"rebasing"},"Rebasing"),(0,o.kt)("p",null,"Git is all about collaborative programming, so more often than not, you'll find\nyourself dealing with merge-conflicts. In most cases, the changes you've made\nare separated from the conflicting commits such that you can just put your\ncommit right on top of all the new commits. However, git will merge the two\nversions and add an extra commit letting you know that you merged. This is\npretty annoying and leads to a pretty messy commit history. This is where the\nmagic of ",(0,o.kt)("strong",{parentName:"p"},"rebasing")," comes into play."),(0,o.kt)("p",null,"When you push changes onto Github and the remote copy has been modified, you'll\nbe asked to pull in the changes. This is where you usually get a merge-conflict.\nInstead, pull with the rebase flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git pull --rebase origin main\n")),(0,o.kt)("p",null,"It's as simple as that! The changes from the server will be applied onto your\nworking copy and your commit will be stacked on top."),(0,o.kt)("h4",{id:"squashing-commits"},"Squashing Commits"),(0,o.kt)("p",null,"You might find yourself in a situation where you've created many small commits\nwith tiny related changes that could really be stored in a single commit. Here,\nyou'll want to squash your commits using the ",(0,o.kt)("strong",{parentName:"p"},"rebase")," command. Suppose you\nhave four commits that I want to combine. You would enter the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ git rebase -i HEAD~4\n")),(0,o.kt)("p",null,"From here, you would be prompted to pick a commit to collapse the other commits\ninto, and pick which commits should be combined:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"pick 01d1124 Adding license\npick 6340aaa Moving license into its own file\npick ebfd367 Jekyll has become self-aware.\npick 30e0ccb Changed the tagline in the binary, too.\n\n# Rebase 60709da..30e0ccb onto 60709da\n#\n# Commands:\n#  p, pick = use commit\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n")),(0,o.kt)("p",null,"It's best to pick the topmost commit and squash the rest into it. You can do\nthis by changing the text file to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"pick 01d1124 Adding license\nsquash 6340aaa Moving license into its own file\nsquash ebfd367 Jekyll has become self-aware.\nsquash 30e0ccb Changed the tagline in the binary, too.\n\n# Rebase 60709da..30e0ccb onto 60709da\n#\n# Commands:\n#  p, pick = use commit\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n")),(0,o.kt)("p",null,"Voila! All those tiny commits have collapsed into a single commit and you have a\ncleaner log file."),(0,o.kt)("h4",{id:"the-nuclear-option-clone-a-fresh-copy-of-your-repo"},"The Nuclear Option: Clone a Fresh Copy of Your Repo"),(0,o.kt)("p",null,"If all else fails and you just want to be able to push and submit your code,\none option is to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Close IntelliJ."),(0,o.kt)("li",{parentName:"ol"},"Rename your old repository folder (e.g. from sp23-s208 to sp23-s208-busted)."),(0,o.kt)("li",{parentName:"ol"},"Clone a new copy of your repo (e.g. sp23-s208) using the lab 1 directions."),(0,o.kt)("li",{parentName:"ol"},"Copy over the desired files from the busted copy to the fresh copy.")),(0,o.kt)("p",null,"A video demo of this process is available ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=Squ8TmG5mX0"},"in this video"),"."))}h.isMDXComponent=!0},97331:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Exercise2.5-9dd72e84c6059e5ebb0eaa3b0d8c55b6.png"},80427:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Exercise2.7-f453ef95efd135895222dd3c21241e0c.png"},17140:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/file-status-6a55acbee21785ece80da06a0068cfa6.png"},43249:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graph1-7dd27816ae612a764130af38f12ffe94.svg"},2344:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graph2-91e47ca2be3720c754293c115a8d20d7.svg"},68718:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graph3-c8f5cecebfa95436ad963b8a0190683e.svg"},22796:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/graph4-99357218f378cb158dd79f92b8497202.svg"}}]);