"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[4847],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=i,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1,description:"lecture7 SQL Notes | \u8bfe\u7a0b\u7b14\u8bb0",title:"Notes"},o="Lecture 7 - CS50x 2023",l={unversionedId:"curriculum-resource/cs50x/lecture8/notes",id:"curriculum-resource/cs50x/lecture8/notes",title:"Notes",description:"lecture7 SQL Notes | \u8bfe\u7a0b\u7b14\u8bb0",source:"@site/docs/curriculum-resource/cs50x/lecture8/notes.md",sourceDirName:"curriculum-resource/cs50x/lecture8",slug:"/curriculum-resource/cs50x/lecture8/notes",permalink:"/docs/curriculum-resource/cs50x/lecture8/notes",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"lecture7 SQL Notes | \u8bfe\u7a0b\u7b14\u8bb0",title:"Notes"},sidebar:"tutorialSidebar",previous:{title:"lecture7 SQL",permalink:"/docs/curriculum-resource/cs50x/lecture8/"},next:{title:"Problem Set",permalink:"/docs/curriculum-resource/cs50x/lecture8/problem set/"}},s={},p=[{value:"Welcome!",id:"welcome",level:2},{value:"Flat-File Database",id:"flat-file-database",level:2},{value:"Relational Databases",id:"relational-databases",level:2},{value:"IMDb",id:"imdb",level:2},{value:"<code>JOIN</code>s",id:"joins",level:2},{value:"Indexes",id:"indexes",level:2},{value:"Using SQL in Python",id:"using-sql-in-python",level:2},{value:"Race Conditions",id:"race-conditions",level:2},{value:"SQL Injection Attacks",id:"sql-injection-attacks",level:2},{value:"Summing Up",id:"summing-up",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(m,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lecture-7---cs50x-2023"},"Lecture 7 - CS50x 2023"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#welcome"},"Welcome!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#flat-file-database"},"Flat-File Database")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#relational-databases"},"Relational Databases")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#imdb"},"IMDb")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#joins"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"),"s")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#indexes"},"Indexes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#using-sql-in-python"},"Using SQL in Python")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#race-conditions"},"Race Conditions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sql-injection-attacks"},"SQL Injection Attacks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#summing-up"},"Summing Up"))),(0,i.kt)("h2",{id:"welcome"},"Welcome!"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C."),(0,i.kt)("li",{parentName:"ul"},"This week, we will be continuing more syntax related to Python."),(0,i.kt)("li",{parentName:"ul"},"Further, we will be integrating this knowledge with data."),(0,i.kt)("li",{parentName:"ul"},"Finally, we will be discussing ",(0,i.kt)("em",{parentName:"li"},"SQL")," or ",(0,i.kt)("em",{parentName:"li"},"Structured Query Language"),"."),(0,i.kt)("li",{parentName:"ul"},"Overall, one of the goals of this course is to learn to program generally \u2013 not simply how to program in the languages described in this course.")),(0,i.kt)("h2",{id:"flat-file-database"},"Flat-File Database"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"As you have likely seen before, data can often be described in patterns of columns and tables.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Spreadsheets like those created in Microsoft Excel and Google Sheets can be outputted to a ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," or ",(0,i.kt)("em",{parentName:"p"},"comma-separated values")," file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you look at a ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," file, you\u2019ll notice that the file is flat in that all of our data is stored in a single table represented by a text file. We call this form of data a ",(0,i.kt)("em",{parentName:"p"},"flat-file database"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Python comes with native support for ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," files.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In your terminal window, type ",(0,i.kt)("inlineCode",{parentName:"p"},"code favorites.py")," and write code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Prints all favorites in CSV using csv.reader\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[1])\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," library is imported. Further, we created a ",(0,i.kt)("inlineCode",{parentName:"p"},"reader")," that will hold the result of ",(0,i.kt)("inlineCode",{parentName:"p"},"csv.reader(file)"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"csv.reader")," function reads each row from the file, and in our code we store the results in ",(0,i.kt)("inlineCode",{parentName:"p"},"reader"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"print(row[1])"),", therefore, will print the language from the ",(0,i.kt)("inlineCode",{parentName:"p"},"favorites.csv")," file.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can improve your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Stores favorite in a variable\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[1]\n        print(favorite)\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"favorite")," is stored and then printed. Also notice that we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," function to skip to the next line of our reader.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Python also allows you to index by the keys of a list. Modify your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row["language"])\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that this example directly utilizes the ",(0,i.kt)("inlineCode",{parentName:"p"},"language")," key in the print statement.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To count the number of favorite languages expressed in the ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," file, we can do the following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Counts favorites using variables\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    scratch, c, python = 0, 0, 0\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row["language"]\n        if favorite == "Scratch":\n            scratch += 1\n        elif favorite == "C":\n            c += 1\n        elif favorite == "Python":\n            python += 1\n\n# Print counts\nprint(f"Scratch: {scratch}")\nprint(f"C: {c}")\nprint(f"Python: {python}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that each language is counted using ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," statements.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Python allows us to use a dictionary to count the ",(0,i.kt)("inlineCode",{parentName:"p"},"counts")," of each language. Consider the following improvement upon our code:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Counts favorites using dictionary\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row["language"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in counts:\n    print(f"{favorite}: {counts[favorite]}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that the value in ",(0,i.kt)("inlineCode",{parentName:"p"},"counts")," with the key ",(0,i.kt)("inlineCode",{parentName:"p"},"favorite")," is incremented when it exists already. If it does not exist, we define ",(0,i.kt)("inlineCode",{parentName:"p"},"counts[favorite]")," and set it to 1. Further, the formatted string has been improved to present the ",(0,i.kt)("inlineCode",{parentName:"p"},"counts[favorite]"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Python also allows sorting ",(0,i.kt)("inlineCode",{parentName:"p"},"counts"),". Improve your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Sorts favorites by key\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row["language"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts):\n    print(f"{favorite}: {counts[favorite]}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice the ",(0,i.kt)("inlineCode",{parentName:"p"},"sorted(counts)")," at the bottom of the code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you look at the parameters for the ",(0,i.kt)("inlineCode",{parentName:"p"},"sorted")," function in the Python documentation, you will find it has many built-in parameters. You can leverage some of these built-in parameters as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Sorts favorites by value\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row["language"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\ndef get_value(language):\n    return counts[language]\n\n# Print counts\nfor favorite in sorted(counts, key=get_value, reverse=True):\n    print(f"{favorite}: {counts[favorite]}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"get_value")," is created, and that the function itself is passed in as an argument to the ",(0,i.kt)("inlineCode",{parentName:"p"},"sorted")," function. The ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," argument allows you to tell Python the method you wish to use to sort items.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Python has a unique ability that we have not seen to date: It allows for the utilization of ",(0,i.kt)("em",{parentName:"p"},"anonymous")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"lambda")," functions. These functions can be utilized when you want to not bother creating an entirely different function. Notice the following modification:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Sorts favorites by value using lambda function\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row["language"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts, key=lambda language: counts[language], reverse=True):\n    print(f"{favorite}: {counts[favorite]}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"get_value")," function has been removed. Instead, ",(0,i.kt)("inlineCode",{parentName:"p"},"lambda language: counts[language]")," does in one line what our previous two-line function did.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can change the column we are examining, focusing on our favorite problem instead:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Favorite problem instead of favorite language\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row["problem"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts, key=lambda problem: counts[problem], reverse=True):\n    print(f"{favorite}: {counts[favorite]}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"problem")," replaced ",(0,i.kt)("inlineCode",{parentName:"p"},"language"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"What if we wanted to allow users to provide input directly in the terminal? We can modify our code, leveraging our previous knowledge about user input:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Favorite problem instead of favorite language\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row["problem"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print count\nfavorite = input("Favorite: ")\nif favorite in counts:\n    print(f"{favorite}: {counts[favorite]}")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice how compact our code is compared to our experience in C."))),(0,i.kt)("h2",{id:"relational-databases"},"Relational Databases"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Google, Twitter, and Meta all use relational databases to store their information at scale.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Relational databases store data in rows and columns in structures called ",(0,i.kt)("em",{parentName:"p"},"tables"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"SQL allows for four types of commands:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  Create\n  Read\n  Update\n  Delete\n\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"These four operations are affectionately called ",(0,i.kt)("em",{parentName:"p"},"CRUD"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can create a SQL database at the terminal by typing ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlite3 favorites.db"),". Upon being prompted, we will agree that we want to create ",(0,i.kt)("inlineCode",{parentName:"p"},"favorites.db")," by pressing ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You will notice a different prompt as we are now inside a program called ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlite3"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can put ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlite3")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," mode by typing ",(0,i.kt)("inlineCode",{parentName:"p"},".mode csv"),". Then, we can import our data from our ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," file by typing ",(0,i.kt)("inlineCode",{parentName:"p"},".import favorites.csv favorites"),". It seems that nothing has happened!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can type ",(0,i.kt)("inlineCode",{parentName:"p"},".schema")," to see the structure of the database.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can read items from a table using the syntax ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT columns FROM table"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, you can type ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM favorites;")," which will iterate every row in ",(0,i.kt)("inlineCode",{parentName:"p"},"favorites"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can get a subset of the data using the command ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT language FROM favorites;"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"SQL supports many commands to access data, including:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  AVG\n  COUNT\n  DISTINCT\n  LOWER\n  MAX\n  MIN\n  UPPER\n\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, you can type ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT COUNT(language) FROM favorites;"),". Further, you can type ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT DISTINCT(language) FROM favorites;")," to get a list of the individual languages within the database. You could even type ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT COUNT(DISTINCT(language)) FROM favorites;")," to get a count of those."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Searches database popularity of a problem\n\nimport csv\n\nfrom cs50 import SQL\n\n# Open database\ndb = SQL("sqlite:///favorites.db")\n\n# Prompt user for favorite\nfavorite = input("Favorite: ")\n\n# Search for title\nrows = db.execute("SELECT COUNT(*) FROM favorites WHERE problem LIKE ?", "%" + favorite + "%")\n\n# Get first (and only) row\nrow = rows[0]\n\n# Print popularity\nprint(row["COUNT(*)"])\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"SQL offers additional commands we can utilize in our queries:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  WHERE       -- adding a Boolean expression to filter our data\n  LIKE        -- filtering responses more loosely\n  ORDER BY    -- ordering responses\n  LIMIT       -- limiting the number of responses\n  GROUP BY    -- grouping responses together\n\n")),(0,i.kt)("p",{parentName:"li"},"Notice that we use ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," to write a comment in SQL.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, we can execute ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT COUNT(*) FROM favorites WHERE language = 'C';"),". A count is presented.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Further, we could type ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem = 'Mario';"),". Notice how the ",(0,i.kt)("inlineCode",{parentName:"p"},"AND")," is utilized to narrow our results.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similarly, we could execute ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT language, COUNT(*) FROM favorites GROUP BY language;"),". This would offer a temporary table that would show the language and count.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We could improve this by typing ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*);"),". This will order the resulting table by the ",(0,i.kt)("inlineCode",{parentName:"p"},"count"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can also ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," into a SQL database utilizing the form ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT INTO table (column...) VALUES(value, ...);"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can execute ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT INTO favorites (language, problem) VALUES ('SQL', 'Fiftyville');"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can also utilize the ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE")," command to update your data.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, you can execute ",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE favorites SET language = 'C++' WHERE language = 'C';"),". This will result in overwriting all previous statements where C was the favorite programming language.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Notice that these queries have immense power. Accordingly, in the real-world setting, you should consider who has permissions to execute certain commands.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"DELETE")," allows you to delete parts of your data. For example, you could ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETE FROM favorites WHERE problem = 'Tideman';"),"."))),(0,i.kt)("h2",{id:"imdb"},"IMDb"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"IMDb offers a database of people, shows, writers, stars, genres, and ratings. Each of these tables is related to one another as follows:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"six boxes that represent various sql tables arrows are drawn to each showing their many relationships with one another",src:n(7555).Z,title:"imdb relationships",width:"960",height:"540"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"After downloading ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cs50/lectures/blob/2022/fall/7/src7/imdb/shows.db"},(0,i.kt)("inlineCode",{parentName:"a"},"shows.db")),", you can execute ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlite3 shows.db")," in your terminal window.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Upon executing ",(0,i.kt)("inlineCode",{parentName:"p"},".schema")," you will find not only each of the tables but the individual fields inside each of these fields.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"As you can see by the image above, ",(0,i.kt)("inlineCode",{parentName:"p"},"shows")," has an ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," field. The ",(0,i.kt)("inlineCode",{parentName:"p"},"genres")," table has a ",(0,i.kt)("inlineCode",{parentName:"p"},"show_id")," field which has data that is common between it and the ",(0,i.kt)("inlineCode",{parentName:"p"},"shows")," table.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"As you can see also in the image above, ",(0,i.kt)("inlineCode",{parentName:"p"},"show_id")," exists in all of the tables. In the ",(0,i.kt)("inlineCode",{parentName:"p"},"shows")," table, it is simply called ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),". This common field between all the fields is called a ",(0,i.kt)("em",{parentName:"p"},"key"),". Primary keys are used to identify a unique record in a table. ",(0,i.kt)("em",{parentName:"p"},"Foreign keys")," are used to build relationships between tables by pointing to the primary key in another table.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"By storing data in a relational database, as above, data can be more efficiently stored.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In ",(0,i.kt)("em",{parentName:"p"},"sqlite"),", we have five datatypes, including:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  BLOB       -- binary large objects that are groups of ones and zeros\n  INTEGER    -- an integer\n  NUMERIC    -- for numbers that are formatted specially like dates\n  REAL       -- like a float\n  TEXT       -- for strings and the like\n\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Additionally, columns can be set to add special constraints:")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To illustrate the relationship between these tables further, we could execute the following command: ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM people LIMIT 10;"),". Examining the output, we could execute ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM shows LIMIT 10;"),". Further, we could execute ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM stars LIMIT 10;"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"show_id")," is a foreign key in this final query because ",(0,i.kt)("inlineCode",{parentName:"p"},"show_id")," corresponds to the unique ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," field in ",(0,i.kt)("inlineCode",{parentName:"p"},"shows"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"person_id")," corresponds to the unique ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," field in the ",(0,i.kt)("inlineCode",{parentName:"p"},"people")," column.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can further play with this data to understand these relationships. Execute ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM genres;"),". There are a lot of genres!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can further limit this data down by executing ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM genres WHERE genre = 'Comedy' LIMIT 10;"),". From this query, you can see that there are 10 shows presented.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can discover what shows these are by executing ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM shows WHERE id = 626124;"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can further our query to be more efficient by executing"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"SELECT title\nFROM shows\nWHERE id IN (\n    SELECT show_id\n    FROM genres\n    WHERE genre = 'Comedy'\n)\nLIMIT 10;\n\n")),(0,i.kt)("p",{parentName:"li"},"Notice that this query nests together two queries. An inner query is used by an outer query.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can refine further by executing"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"SELECT title\nFROM shows\nWHERE id IN (\n    SELECT show_id\n    FROM genres\n    WHERE genre = 'Comedy'\n)\nORDER BY title LIMIT 10;\n\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"What if you wanted to find all shows in which Steve Carell stars? You could execute ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM people WHERE name = 'Steve Carell';")," You would find his individual ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),". You could utilize this ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," to locate many ",(0,i.kt)("inlineCode",{parentName:"p"},"shows")," in which he appears. However, this would be tedious to attempt this one by one. How could we next our queries to make this more streamlined? Consider the following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"SELECT title FROM shows WHERE id IN\n  (SELECT show_id FROM stars WHERE person_id =\n    (SELECT * FROM people WHERE name = 'Steve Carell'));\n\n")),(0,i.kt)("p",{parentName:"li"},"Notice that this lengthy query will result in a final result that is useful in discovering the answer to our question."))),(0,i.kt)("h2",{id:"joins"},(0,i.kt)("inlineCode",{parentName:"h2"},"JOIN"),"s"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Consider the following two tables:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"two boxes representing the shows and genres table with an arrow connecting id and show id",src:n(2889).Z,title:"primary and foreign keys",width:"960",height:"540"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"How could we combine tables temporarily? Tables could be joined together using the ",(0,i.kt)("inlineCode",{parentName:"p"},"JOIN")," command.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Execute the following command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"SELECT * FROM shows\n  JOIN ratings on shows.id = ratings.show_id\n  WHERE title = 'The Office';\n\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Now you can see all the shows that have been called ",(0,i.kt)("em",{parentName:"p"},"The Office"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You could similarly apply ",(0,i.kt)("inlineCode",{parentName:"p"},"JOIN")," to our Steve Carell query above by executing the following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"SELECT title FROM people\n  JOIN stars ON people.id = stars.person_id\n  JOIN shows ON stars.show_id = shows.id\n  WHERE name = `Steve Carell`;\n\n")),(0,i.kt)("p",{parentName:"li"},"Notice how each ",(0,i.kt)("inlineCode",{parentName:"p"},"JOIN")," command tells us which columns are aligned to each which other columns.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This could be similarly implemented as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"SELECT title FROM people, stars, shows\nWHERE people.id = stars.person_id\nAND stars.show_id = shows.id\nAND name = 'Steve Carell';\n\n")),(0,i.kt)("p",{parentName:"li"},"Notice that this achieves the same results.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The wildcard ",(0,i.kt)("inlineCode",{parentName:"p"},"%")," operator can be used to find all people whose names start with ",(0,i.kt)("inlineCode",{parentName:"p"},"Steve C")," one could employ the syntax ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM people WHERE name LIKE 'Steve C%';"),"."))),(0,i.kt)("h2",{id:"indexes"},"Indexes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"While relational databases have the ability to be more fast and more robust than utilizing a ",(0,i.kt)("inlineCode",{parentName:"p"},"CSV")," file, data can be optimized within a table using ",(0,i.kt)("em",{parentName:"p"},"indexes"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Indexes can be utilized to speed up our queries.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can track the speed of our queries by executing ",(0,i.kt)("inlineCode",{parentName:"p"},".timer on")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlite3"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To understand how indexes can speed up our queries, run the following: ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM shows WHERE title = 'The Office';")," Notice the time that displays after the query executes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Then, we can create an index with the syntax ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE INDEX title_index on shows (title);"),". This tells ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlite3")," to create an index and perform some special under-the-hood optimization relating to this column ",(0,i.kt)("inlineCode",{parentName:"p"},"title"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This will create a data structure called a ",(0,i.kt)("em",{parentName:"p"},"B Tree"),", a data structure that looks similar to a binary tree. However, unlike a binary tree, there can be more than two child notes."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"one node at the top from which come four children and below that there are three children coming from one of the nodes and two from another two from another and three from another",src:n(9605).Z,title:"b tree",width:"960",height:"540"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Running the query ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM shows WHERE title = 'The Office';"),", you will notice that the query runs much more quickly!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Unfortunately, indexing all columns would result in utilizing more storage space. Therefore, there is a tradeoff for enhanced speed."))),(0,i.kt)("h2",{id:"using-sql-in-python"},"Using SQL in Python"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To assist in working with SQL in this course, the CS50 Library can be utilized as follows in your code:")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similar to previous uses of the CS50 Library, this library will assist with the complicated steps of utilizing SQL within your Python code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You can read more about the CS50 Library\u2019s SQL functionality in the ",(0,i.kt)("a",{parentName:"p",href:"https://cs50.readthedocs.io/libraries/cs50/python/#cs50.SQL"},"documentation"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Recall where we last left off in ",(0,i.kt)("inlineCode",{parentName:"p"},"favorites.py"),". Your code should appear as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Favorite problem instead of favorite language\n\nimport csv\n\n# Open CSV file\nwith open("favorites.csv", "r") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row["problem"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print count\nfavorite = input("Favorite: ")\nif favorite in counts:\n    print(f"{favorite}: {counts[favorite]}")\n\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Modify your code as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'# Searches database popularity of a problem\n\nimport csv\n\nfrom cs50 import SQL\n\n# Open database\ndb = SQL("sqlite:///favorites.db")\n\n# Prompt user for favorite\nfavorite = input("Favorite: ")\n\n# Search for title\nrows = db.execute("SELECT COUNT(*) FROM favorites WHERE problem LIKE ?", "%" + favorite + "%")\n\n# Get first (and only) row\nrow = rows[0]\n\n# Print popularity\nprint(row["COUNT(*)"])\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},'db = SQL("sqlite:///favorites.db")')," provide Python the location of the database file. Then, the line that begins with ",(0,i.kt)("inlineCode",{parentName:"p"},"rows")," executes SQL commands utilizing ",(0,i.kt)("inlineCode",{parentName:"p"},"db.execute"),". Indeed, this command passes the syntax within the quotation marks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"db.execute")," function. We can issue any SQL command using this syntax. Further, notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"rows")," is returned as a list of dictionaries. In this case, there is only one result, one row, returned to the rows list as a dictionary."))),(0,i.kt)("h2",{id:"race-conditions"},"Race Conditions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Utilization of SQL can sometimes result in some problems."),(0,i.kt)("li",{parentName:"ul"},"You can imagine a case where multiple users could be accessing the same database and executing commands at the same time."),(0,i.kt)("li",{parentName:"ul"},"This could result in glitches where code is interrupted by other people\u2019s actions. This could result in a loss of data."),(0,i.kt)("li",{parentName:"ul"},"Built-in SQL features such as ",(0,i.kt)("inlineCode",{parentName:"li"},"BEGIN TRANSACTION"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"COMMIT"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"ROLLBACK")," help avoid some of these race condition problems.")),(0,i.kt)("h2",{id:"sql-injection-attacks"},"SQL Injection Attacks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Now, still considering the code above, you might be wondering what the ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," question marks do above. One of the problems that can arise in real-world applications of SQL is what is called an ",(0,i.kt)("em",{parentName:"p"},"injection attack"),". An injection attack is where a malicious actor could input malicious SQL code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, consider a login screen as follows:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"harvard key login screen with username and password fields",src:n(5273).Z,title:"harvard key login screen",width:"960",height:"540"}))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Without the proper protections in our own code, a bad actor could run malicious code. Consider the following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'rows = db.execute("SELECT COUNT(*) FROM favorites WHERE problem LIKE ?", "%" + favorite + "%")\n\n')),(0,i.kt)("p",{parentName:"li"},"Notice that because the ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," is in place, validation can be run on ",(0,i.kt)("inlineCode",{parentName:"p"},"favorite")," before it is blindly accepted by the query.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You never want to utilize formatted strings in queries as above or blindly trust the user\u2019s input.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Utilizing the CS50 Library, the library will ",(0,i.kt)("em",{parentName:"p"},"sanitize")," and remove any potentially malicious characters."))),(0,i.kt)("h2",{id:"summing-up"},"Summing Up"),(0,i.kt)("p",null,"In this lesson, you learned more syntax related to Python. Further, you learned how to integrate this knowledge with data in the form of flat-file and relational databases. Finally, you learned about ",(0,i.kt)("em",{parentName:"p"},"SQL"),". Specifically, we discussed\u2026"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Flat-file databases"),(0,i.kt)("li",{parentName:"ul"},"Relational databases"),(0,i.kt)("li",{parentName:"ul"},"SQL"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JOIN"),"s"),(0,i.kt)("li",{parentName:"ul"},"Indexes"),(0,i.kt)("li",{parentName:"ul"},"Using SQL in Python"),(0,i.kt)("li",{parentName:"ul"},"Race conditions"),(0,i.kt)("li",{parentName:"ul"},"SQL injection attacks")),(0,i.kt)("p",null,"See you next time!"))}d.isMDXComponent=!0},7555:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cs50Week7Slide025-bb45d9f803af6cf4dab84dd80e079cba.png"},2889:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cs50Week7Slide030-3f664e686d78bb4ac5669cd5b5e515c0.png"},9605:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cs50Week7Slide039-d1d6b95538a8ebdcd608e0ee3f9dd15e.png"},5273:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cs50Week7Slide051-e00c15988c54defdd13ebea756886e6a.png"}}]);