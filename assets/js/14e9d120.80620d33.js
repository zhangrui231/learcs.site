"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[50966],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=p(n),m=r,d=h["".concat(l,".").concat(m)]||h[m]||c[m]||o;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[h]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50313:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={title:"10-tuples"},s="Tuples",i={unversionedId:"curriculum-resource/py4e/book/10",id:"curriculum-resource/py4e/book/10",title:"10-tuples",description:"Tuples are immutable",source:"@site/docs/curriculum-resource/py4e/book/10.md",sourceDirName:"curriculum-resource/py4e/book",slug:"/curriculum-resource/py4e/book/10",permalink:"/docs/curriculum-resource/py4e/book/10",draft:!1,tags:[],version:"current",frontMatter:{title:"10-tuples"},sidebar:"tutorialSidebar",previous:{title:"09-dictionaries",permalink:"/docs/curriculum-resource/py4e/book/09"},next:{title:"11-regex",permalink:"/docs/curriculum-resource/py4e/book/11"}},l={},p=[{value:"Tuples are immutable",id:"tuples-are-immutable",level:2},{value:"Comparing tuples",id:"comparing-tuples",level:2},{value:"Tuple assignment",id:"tuple-assignment",level:2},{value:"Dictionaries and tuples",id:"dictionaries-and-tuples",level:2},{value:"Multiple assignment with dictionaries",id:"multiple-assignment-with-dictionaries",level:2},{value:"The most common words",id:"the-most-common-words",level:2},{value:"Using tuples as keys in dictionaries",id:"using-tuples-as-keys-in-dictionaries",level:2},{value:"Sequences: strings, lists, and tuples - Oh My!",id:"sequences-strings-lists-and-tuples---oh-my",level:2},{value:"List comprehension",id:"list-comprehension",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Exercises",id:"exercises",level:2}],u={toc:p},h="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tuples"},"Tuples"),(0,r.kt)("h2",{id:"tuples-are-immutable"},"Tuples are immutable"),(0,r.kt)("p",null,"A tuple ",(0,r.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/10-tuples#fn1"},"1")," is a sequence of values much like a\nlist. The values stored in a tuple can be any type, and they are indexed\nby integers. The important difference is that tuples are\n",(0,r.kt)("em",{parentName:"p"},"immutable"),". Tuples are also ",(0,r.kt)("em",{parentName:"p"},"comparable")," and\n",(0,r.kt)("em",{parentName:"p"},"hashable")," so we can sort lists of them and use tuples as key\nvalues in Python dictionaries."),(0,r.kt)("p",null,"Syntactically, a tuple is a comma-separated list of values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t = 'a', 'b', 'c', 'd', 'e'\n")),(0,r.kt)("p",null,"Although it is not necessary, it is common to enclose tuples in\nparentheses to help us quickly identify tuples when we look at Python\ncode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t = ('a', 'b', 'c', 'd', 'e')\n")),(0,r.kt)("p",null,"To create a tuple with a single element, you have to include the\nfinal comma:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t1 = ('a',)\n>>> type(t1)\n<type 'tuple'>\n")),(0,r.kt)("p",null,"Without the comma Python treats ",(0,r.kt)("inlineCode",{parentName:"p"},"('a')")," as an expression\nwith a string in parentheses that evaluates to a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t2 = ('a')\n>>> type(t2)\n<type 'str'>\n")),(0,r.kt)("p",null,"Another way to construct a tuple is the built-in function\n",(0,r.kt)("inlineCode",{parentName:"p"},"tuple"),". With no argument, it creates an empty tuple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t = tuple()\n>>> print(t)\n()\n")),(0,r.kt)("p",null,"If the argument is a sequence (string, list, or tuple), the result of\nthe call to ",(0,r.kt)("inlineCode",{parentName:"p"},"tuple")," is a tuple with the elements of the\nsequence:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t = tuple('lupins')\n>>> print(t)\n('l', 'u', 'p', 'i', 'n', 's')\n")),(0,r.kt)("p",null,"Because ",(0,r.kt)("inlineCode",{parentName:"p"},"tuple")," is the name of a constructor, you should\navoid using it as a variable name."),(0,r.kt)("p",null,"Most list operators also work on tuples. The bracket operator indexes\nan element:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t = ('a', 'b', 'c', 'd', 'e')\n>>> print(t[0])\n'a'\n")),(0,r.kt)("p",null,"And the slice operator selects a range of elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> print(t[1:3])\n('b', 'c')\n")),(0,r.kt)("p",null,"But if you try to modify one of the elements of the tuple, you get an\nerror:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t[0] = 'A'\nTypeError: object doesn't support item assignment\n")),(0,r.kt)("p",null,"You can\u2019t modify the elements of a tuple, but you can replace one\ntuple with another:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t = ('A',) + t[1:]\n>>> print(t)\n('A', 'b', 'c', 'd', 'e')\n")),(0,r.kt)("h2",{id:"comparing-tuples"},"Comparing tuples"),(0,r.kt)("p",null,"The comparison operators work with tuples and other sequences. Python\nstarts by comparing the first element from each sequence. If they are\nequal, it goes on to the next element, and so on, until it finds\nelements that differ. Subsequent elements are not considered (even if\nthey are really big)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> (0, 1, 2) < (0, 3, 4)\nTrue\n>>> (0, 1, 2000000) < (0, 3, 4)\nTrue\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sort")," function works the same way. It sorts primarily\nby first element, but in the case of a tie, it sorts by second element,\nand so on."),(0,r.kt)("p",null,"This feature lends itself to a pattern called ",(0,r.kt)("em",{parentName:"p"},"DSU")," for"),(0,r.kt)("p",null,"Decorate\na sequence by building a list of tuples with one or more sort keys\npreceding the elements from the sequence,\nSort\nthe list of tuples using the Python built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"sort"),", and\nUndecorate\nby extracting the sorted elements of the sequence."),(0,r.kt)("p",null,"For example, suppose you have a list of words and you want to sort\nthem from longest to shortest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"txt = 'but soft what light in yonder window breaks'\nwords = txt.split()\nt = list()\nfor word in words:\n    t.append((len(word), word))\n\nt.sort(reverse=True)\n\nres = list()\nfor length, word in t:\n    res.append(word)\n\nprint(res)\n\n# Code: https://www.py4e.com/code3/soft.py\n")),(0,r.kt)("p",null,"The first loop builds a list of tuples, where each tuple is a word\npreceded by its length."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sort")," compares the first element, length, first, and only\nconsiders the second element to break ties. The keyword argument\n",(0,r.kt)("inlineCode",{parentName:"p"},"reverse=True")," tells ",(0,r.kt)("inlineCode",{parentName:"p"},"sort")," to go in decreasing\norder."),(0,r.kt)("p",null,"The second loop traverses the list of tuples and builds a list of\nwords in descending order of length. The four-character words are sorted\nin ",(0,r.kt)("em",{parentName:"p"},"reverse")," alphabetical order, so \u201cwhat\u201d appears before \u201csoft\u201d\nin the following list."),(0,r.kt)("p",null,"The output of the program is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"['yonder', 'window', 'breaks', 'light', 'what',\\\n'soft', 'but', 'in']\n")),(0,r.kt)("p",null,"Of course the line loses much of its poetic impact when turned into a\nPython list and sorted in descending word length order."),(0,r.kt)("h2",{id:"tuple-assignment"},"Tuple assignment"),(0,r.kt)("p",null,"One of the unique syntactic features of the Python language is the\nability to have a tuple on the left side and a sequence on the right\nside of an assignment statement. This allows you to assign more than one\nvariable at a time to the given sequence."),(0,r.kt)("p",null,"In this example we have a two-element tuple and assign the first and\nsecond elements of the tuple to the variables ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"y")," in a single statement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> m = ( 'have', 'fun' )\n>>> x, y = m\n>>> x\n'have'\n>>> y\n'fun'\n>>>\n")),(0,r.kt)("p",null,"This is more general than tuple-to-tuple assignment. Both tuples and\nlists are sequences, so this syntax works with a two element list as\nwell."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> m = [ 'have', 'fun' ]\n>>> x, y = m\n>>> x\n'have'\n>>> y\n'fun'\n>>>\n")),(0,r.kt)("p",null,"It is not magic, Python ",(0,r.kt)("em",{parentName:"p"},"roughly")," translates the tuple\nassignment syntax to be the following: ",(0,r.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/10-tuples#fn2"},"2")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> m = ( 'have', 'fun' )\n>>> x = m[0]\n>>> y = m[1]\n>>> x\n'have'\n>>> y\n'fun'\n>>>\n")),(0,r.kt)("p",null,"Stylistically when we use a tuple on the left side of the assignment\nstatement, we omit the parentheses, but the following is an equally\nvalid syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> m = ( 'have', 'fun' )\n>>> (x, y) = m\n>>> x\n'have'\n>>> y\n'fun'\n>>>\n")),(0,r.kt)("p",null,"A particularly clever application of tuple assignment allows us to\n",(0,r.kt)("em",{parentName:"p"},"swap")," the values of two variables in a single statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> a, b = b, a\n")),(0,r.kt)("p",null,"Both sides of this statement are tuples, but the left side is a tuple\nof variables; the right side is a tuple of expressions. Each value on\nthe right side is assigned to its respective variable on the left side.\nAll the expressions on the right side are evaluated before any of the\nassignments."),(0,r.kt)("p",null,"The number of variables on the left and the number of values on the\nright must be the same:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> a, b = 1, 2, 3\nValueError: too many values to unpack\n")),(0,r.kt)("p",null,"More generally, the right side can be any kind of sequence (string,\nlist, or tuple). For example, to split an email address into a user name\nand a domain, you could write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> addr = 'monty@python.org'\n>>> uname, domain = addr.split('@')\n")),(0,r.kt)("p",null,"The return value from ",(0,r.kt)("inlineCode",{parentName:"p"},"split")," is a list with two elements;\nthe first element is assigned to ",(0,r.kt)("inlineCode",{parentName:"p"},"uname"),", the second to\n",(0,r.kt)("inlineCode",{parentName:"p"},"domain"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> print(uname)\nmonty\n>>> print(domain)\npython.org\n")),(0,r.kt)("h2",{id:"dictionaries-and-tuples"},"Dictionaries and tuples"),(0,r.kt)("p",null,"Dictionaries have a method called ",(0,r.kt)("inlineCode",{parentName:"p"},"items")," that returns a\nlist of tuples, where each tuple is a key-value pair:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> d = {'b':1, 'a':10, 'c':22}\n>>> t = list(d.items())\n>>> print(t)\n[('b', 1), ('a', 10), ('c', 22)]\n")),(0,r.kt)("p",null,"As you should expect from a dictionary, the items are in\nnon-alphabetical order."),(0,r.kt)("p",null,"However, since the list of tuples is a list, and tuples are\ncomparable, we can now sort the list of tuples. Converting a dictionary\nto a list of tuples is a way for us to output the contents of a\ndictionary sorted by key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> d = {'b':1, 'a':10, 'c':22}\n>>> t = list(d.items())\n>>> t\n[('b', 1), ('a', 10), ('c', 22)]\n>>> t.sort()\n>>> t\n[('a', 10), ('b', 1), ('c', 22)]\n")),(0,r.kt)("p",null,"The new list is sorted in ascending alphabetical order by the key\nvalue."),(0,r.kt)("h2",{id:"multiple-assignment-with-dictionaries"},"Multiple assignment with dictionaries"),(0,r.kt)("p",null,"Combining ",(0,r.kt)("inlineCode",{parentName:"p"},"items"),", tuple assignment, and ",(0,r.kt)("inlineCode",{parentName:"p"},"for"),",\nyou can see a nice code pattern for traversing the keys and values of a\ndictionary in a single loop:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"d = {'a':10, 'b':1, 'c':22}\nfor key, val in d.items():\n    print(val, key)\n")),(0,r.kt)("p",null,"This loop has two ",(0,r.kt)("em",{parentName:"p"},"iteration variables")," because\n",(0,r.kt)("inlineCode",{parentName:"p"},"items")," returns a list of tuples and ",(0,r.kt)("inlineCode",{parentName:"p"},"key, val")," is\na tuple assignment that successively iterates through each of the\nkey-value pairs in the dictionary."),(0,r.kt)("p",null,"For each iteration through the loop, both ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"val")," are advanced to the next key-value pair in the\ndictionary (still in hash order)."),(0,r.kt)("p",null,"The output of this loop is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"10 a\n1 b\n22 c\n")),(0,r.kt)("p",null,"Again, it is in hash key order (i.e., no particular order)."),(0,r.kt)("p",null,"If we combine these two techniques, we can print out the contents of\na dictionary sorted by the ",(0,r.kt)("em",{parentName:"p"},"value")," stored in each key-value\npair."),(0,r.kt)("p",null,"To do this, we first make a list of tuples where each tuple is\n",(0,r.kt)("inlineCode",{parentName:"p"},"(value, key)"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"items")," method would give us a\nlist of ",(0,r.kt)("inlineCode",{parentName:"p"},"(key, value)")," tuples, but this time we want to sort\nby value, not key. Once we have constructed the list with the value-key\ntuples, it is a simple matter to sort the list in reverse order and\nprint out the new, sorted list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> d = {'a':10, 'b':1, 'c':22}\n>>> l = list()\n>>> for key, val in d.items() :\n...     l.append( (val, key) )\n...\n>>> l\n[(10, 'a'), (1, 'b'), (22, 'c')]\n>>> l.sort(reverse=True)\n>>> l\n[(22, 'c'), (10, 'a'), (1, 'b')]\n>>>\n")),(0,r.kt)("p",null,"By carefully constructing the list of tuples to have the value as the\nfirst element of each tuple, we can sort the list of tuples and get our\ndictionary contents sorted by value."),(0,r.kt)("h2",{id:"the-most-common-words"},"The most common words"),(0,r.kt)("p",null,"Coming back to our running example of the text from ",(0,r.kt)("em",{parentName:"p"},"Romeo and"),"\n",(0,r.kt)("em",{parentName:"p"},"Juliet")," Act 2, Scene 2, we can augment our program to use this\ntechnique to print the ten most common words in the text as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import string\nfhand = open('romeo-full.txt')\ncounts = dict()\nfor line in fhand:\n    line = line.translate(str.maketrans('', '', string.punctuation))\n    line = line.lower()\n    words = line.split()\n    for word in words:\n        if word not in counts:\n            counts[word] = 1\n        else:\n            counts[word] += 1\n\n# Sort the dictionary by value\nlst = list()\nfor key, val in list(counts.items()):\n    lst.append((val, key))\n\nlst.sort(reverse=True)\n\nfor key, val in lst[:10]:\n    print(key, val)\n\n# Code: https://www.py4e.com/code3/count3.py\n")),(0,r.kt)("p",null,"The first part of the program which reads the file and computes the\ndictionary that maps each word to the count of words in the document is\nunchanged. But instead of simply printing out ",(0,r.kt)("inlineCode",{parentName:"p"},"counts")," and\nending the program, we construct a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"(val, key)"),"\ntuples and then sort the list in reverse order."),(0,r.kt)("p",null,"Since the value is first, it will be used for the comparisons. If\nthere is more than one tuple with the same value, it will look at the\nsecond element (the key), so tuples where the value is the same will be\nfurther sorted by the alphabetical order of the key."),(0,r.kt)("p",null,"At the end we write a nice ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop which does a\nmultiple assignment iteration and prints out the ten most common words\nby iterating through a slice of the list ( ",(0,r.kt)("inlineCode",{parentName:"p"},"lst[:10]"),")."),(0,r.kt)("p",null,"So now the output finally looks like what we want for our word\nfrequency analysis."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"61 i\n42 and\n40 romeo\n34 to\n34 the\n32 thou\n32 juliet\n30 that\n29 my\n24 thee\n")),(0,r.kt)("p",null,"The fact that this complex data parsing and analysis can be done with\nan easy-to-understand 19-line Python program is one reason why Python is\na good choice as a language for exploring information."),(0,r.kt)("h2",{id:"using-tuples-as-keys-in-dictionaries"},"Using tuples as keys in dictionaries"),(0,r.kt)("p",null,"Because tuples are ",(0,r.kt)("em",{parentName:"p"},"hashable")," and lists are not, if we want to\ncreate a ",(0,r.kt)("em",{parentName:"p"},"composite")," key to use in a dictionary we must use a\ntuple as the key."),(0,r.kt)("p",null,"We would encounter a composite key if we wanted to create a telephone\ndirectory that maps from last-name, first-name pairs to telephone\nnumbers. Assuming that we have defined the variables ",(0,r.kt)("inlineCode",{parentName:"p"},"last"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"first"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),", we could write a dictionary\nassignment statement as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"directory[last,first] = number\n")),(0,r.kt)("p",null,"The expression in brackets is a tuple. We could use tuple assignment\nin a ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop to traverse this dictionary."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"for last, first in directory:\n    print(first, last, directory[last,first])\n")),(0,r.kt)("p",null,"This loop traverses the keys in ",(0,r.kt)("inlineCode",{parentName:"p"},"directory"),", which are\ntuples. It assigns the elements of each tuple to ",(0,r.kt)("inlineCode",{parentName:"p"},"last")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"first"),", then prints the name and corresponding telephone\nnumber."),(0,r.kt)("h2",{id:"sequences-strings-lists-and-tuples---oh-my"},"Sequences: strings, lists, and tuples - Oh My!"),(0,r.kt)("p",null,"I have focused on lists of tuples, but almost all of the examples in\nthis chapter also work with lists of lists, tuples of tuples, and tuples\nof lists. To avoid enumerating the possible combinations, it is\nsometimes easier to talk about sequences of sequences."),(0,r.kt)("p",null,"In many contexts, the different kinds of sequences (strings, lists,\nand tuples) can be used interchangeably. So how and why do you choose\none over the others?"),(0,r.kt)("p",null,"To start with the obvious, strings are more limited than other\nsequences because the elements have to be characters. They are also\nimmutable. If you need the ability to change the characters in a string\n(as opposed to creating a new string), you might want to use a list of\ncharacters instead."),(0,r.kt)("p",null,"Lists are more common than tuples, mostly because they are mutable.\nBut there are a few cases where you might prefer tuples:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In some contexts, like a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement, it is\nsyntactically simpler to create a tuple than a list. In other contexts,\nyou might prefer a list.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If you want to use a sequence as a dictionary key, you have to\nuse an immutable type like a tuple or string.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If you are passing a sequence as an argument to a function, using\ntuples reduces the potential for unexpected behavior due to\naliasing."))),(0,r.kt)("p",null,"Because tuples are immutable, they don\u2019t provide methods like\n",(0,r.kt)("inlineCode",{parentName:"p"},"sort")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"reverse"),", which modify existing lists.\nHowever Python provides the built-in functions ",(0,r.kt)("inlineCode",{parentName:"p"},"sorted")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"reversed"),", which take any sequence as a parameter and return\na new sequence with the same elements in a different order."),(0,r.kt)("h2",{id:"list-comprehension"},"List comprehension"),(0,r.kt)("p",null,"Sometimes you want to create a sequence by using data from another\nsequence. You can achieve this by writing a for loop and appending one\nitem at a time. For example, if you wanted to convert a list of strings\n\u2013 each string storing digits \u2013 into numbers that you can sum up, you\nwould write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list_of_ints_in_strings = ['42', '65', '12']\nlist_of_ints = []\nfor x in list_of_ints_in_strings:\n    list_of_ints.append(int(x))\n\nprint(sum(list_of_ints))\n")),(0,r.kt)("p",null,"With list comprehension, the above code can be written in a more\ncompact manner:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list_of_ints_in_strings = ['42', '65', '12']\nlist_of_ints = [ int(x) for x in list_of_ints_in_strings ]\nprint(sum(list_of_ints))\n")),(0,r.kt)("h2",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,"Lists, dictionaries and tuples are known generically as ",(0,r.kt)("em",{parentName:"p"},"data"),"\n",(0,r.kt)("em",{parentName:"p"},"structures"),"; in this chapter we are starting to see compound data\nstructures, like lists of tuples, and dictionaries that contain tuples\nas keys and lists as values. Compound data structures are useful, but\nthey are prone to what I call ",(0,r.kt)("em",{parentName:"p"},"shape errors"),"; that is, errors\ncaused when a data structure has the wrong type, size, or composition,\nor perhaps you write some code and forget the shape of your data and\nintroduce an error. For example, if you are expecting a list with one\ninteger and I give you a plain old integer (not in a list), it won\u2019t\nwork."),(0,r.kt)("h2",{id:"glossary"},"Glossary"),(0,r.kt)("p",null,"comparable\nA type where one value can be checked to see if it is greater than, less\nthan, or equal to another value of the same type. Types which are\ncomparable can be put in a list and sorted.\ndata structure\nA collection of related values, often organized in lists, dictionaries,\ntuples, etc.\nDSU\nAbbreviation of \u201cdecorate-sort-undecorate\u201d, a pattern that involves\nbuilding a list of tuples, sorting, and extracting part of the result.\ngather\nThe operation of assembling a variable-length argument tuple.\nhashable\nA type that has a hash function. Immutable types like integers, floats,\nand strings are hashable; mutable types like lists and dictionaries are\nnot.\nscatter\nThe operation of treating a sequence as a list of arguments.\nshape (of a data structure)\nA summary of the type, size, and composition of a data structure.\nsingleton\nA list (or other sequence) with a single element.\ntuple\nAn immutable sequence of elements.\ntuple assignment\nAn assignment with a sequence on the right side and a tuple of variables\non the left. The right side is evaluated and then its elements are\nassigned to the variables on the left."),(0,r.kt)("h2",{id:"exercises"},"Exercises"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise 1:")," Revise a previous program as follows:\nRead and parse the \u201cFrom\u201d lines and pull out the addresses from the\nline. Count the number of messages from each person using a\ndictionary."),(0,r.kt)("p",null,"After all the data has been read, print the person with the most\ncommits by creating a list of (count, email) tuples from the dictionary.\nThen sort the list in reverse order and print out the person who has the\nmost commits."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Sample Line:\nFrom stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n\nEnter a file name: mbox-short.txt\ncwen@iupui.edu 5\n\nEnter a file name: mbox.txt\nzqian@umich.edu 195\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise 2:")," This program counts the distribution of\nthe hour of the day for each of the messages. You can pull the hour from\nthe \u201cFrom\u201d line by finding the time string and then splitting that\nstring into parts using the colon character. Once you have accumulated\nthe counts for each hour, print out the counts, one per line, sorted by\nhour as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python timeofday.py\nEnter a file name: mbox-short.txt\n04 3\n06 1\n07 1\n09 2\n10 3\n11 6\n14 1\n15 2\n16 4\n17 2\n18 1\n19 1\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exercise 3:")," Write a program that reads a file and\nprints the ",(0,r.kt)("em",{parentName:"p"},"letters")," in decreasing order of frequency."),(0,r.kt)("p",null,"Your program should convert all the input to lower case and only\ncount the letters a-z. Your program should not count spaces, digits,\npunctuation, or anything other than the letters a-z. Find text samples\nfrom several different languages and see how letter frequency varies\nbetween languages. Compare your results with the tables at ",(0,r.kt)("a",{parentName:"p",href:"https://wikipedia.org/wiki/Letter_frequencies"},"https://wikipedia.org/wiki/Letter","_","frequencies"),"."),(0,r.kt)("hr",null),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fun fact: The word \u201ctuple\u201d comes from the names given to\nsequences of numbers of varying lengths: single, double, triple,\nquadruple, quintuple, sextuple, septuple, etc. ",(0,r.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/10-tuples#fnref1"},"\u21a9\ufe0e"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Python does not translate the syntax literally. For\nexample, if you try this with a dictionary, it will not work as you\nmight expect. ",(0,r.kt)("a",{parentName:"p",href:"https://www.py4e.com/html3/10-tuples#fnref2"},"\u21a9\ufe0e")))),(0,r.kt)("hr",null),(0,r.kt)("p",null,"If you find a mistake in this book, feel free to send me a fix using\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/csev/py4e/tree/master/book3"},"Github"),"."))}c.isMDXComponent=!0}}]);