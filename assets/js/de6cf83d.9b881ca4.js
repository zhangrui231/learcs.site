"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[7367],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),h=i,d=p["".concat(c,".").concat(h)]||p[h]||m[h]||a;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},68915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(87462),i=(n(67294),n(3905));const a={sidebar_position:1,description:"cs50x practice problem  atoi",title:"atoi"},o="Recursive atoi - CS50x 2023",l={unversionedId:"curriculum-resource/cs50x/lecture4/practice problems/atoi",id:"curriculum-resource/cs50x/lecture4/practice problems/atoi",title:"atoi",description:"cs50x practice problem  atoi",source:"@site/docs/curriculum-resource/cs50x/lecture4/practice problems/atoi.md",sourceDirName:"curriculum-resource/cs50x/lecture4/practice problems",slug:"/curriculum-resource/cs50x/lecture4/practice problems/atoi",permalink:"/docs/curriculum-resource/cs50x/lecture4/practice problems/atoi",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"cs50x practice problem  atoi",title:"atoi"},sidebar:"tutorialSidebar",previous:{title:"Practice Problem",permalink:"/docs/curriculum-resource/cs50x/lecture4/practice problems/"},next:{title:"temps",permalink:"/docs/curriculum-resource/cs50x/lecture4/practice problems/temps"}},c={},u=[{value:"Learning Goals",id:"learning-goals",level:2},{value:"Background",id:"background",level:2},{value:"Demo",id:"demo",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Thought Question",id:"thought-question",level:2},{value:"How to Test Your Code",id:"how-to-test-your-code",level:2},{value:"How to Submit",id:"how-to-submit",level:2},{value:"A More Thorough Implementation",id:"a-more-thorough-implementation",level:2}],s={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"recursive-atoi---cs50x-2023"},"Recursive atoi - CS50x 2023"),(0,i.kt)("h2",{id:"learning-goals"},(0,i.kt)("a",{parentName:"h2",href:"#learning-goals"},"Learning Goals")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deepen an understanding of strings"),(0,i.kt)("li",{parentName:"ul"},"Practice creating recursive functions")),(0,i.kt)("h2",{id:"background"},(0,i.kt)("a",{parentName:"h2",href:"#background"},"Background")),(0,i.kt)("p",null,"Imagine that you travel back in time to the 1970\u2019s, when the ",(0,i.kt)("inlineCode",{parentName:"p"},"C")," programming language was first created. You are hired as a programmer to come up with a way to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"s to ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),"s. (You may have used a function just like this in Week 2, called ",(0,i.kt)("a",{parentName:"p",href:"https://manual.cs50.io/3/atoi"},(0,i.kt)("inlineCode",{parentName:"a"},"atoi")),"). You want to be thorough in your development process and plan to try several approaches before deciding on the most efficient."),(0,i.kt)("p",null,"In this problem, you will start with a simple implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"atoi")," that handles positive ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),"s using loops. You want to rework this into an implementation that uses recursion. Recusive functions can be memory intensive and are not always the best solution, but there are some problems in which using recursion can provide a simpler and more elegant solution."),(0,i.kt)("p",null,"(Scroll to the bottom of this page to see what an implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"atoi")," might actually look like.)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Hints"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Start by getting the index of the last ",(0,i.kt)("inlineCode",{parentName:"li"},"char")," in the string (the ",(0,i.kt)("inlineCode",{parentName:"li"},"char")," before the ",(0,i.kt)("inlineCode",{parentName:"li"},"\\0"),")."),(0,i.kt)("li",{parentName:"ul"},"Convert this ",(0,i.kt)("inlineCode",{parentName:"li"},"char")," into its numeric value. Can you subtract some ",(0,i.kt)("inlineCode",{parentName:"li"},"char")," to do this?"),(0,i.kt)("li",{parentName:"ul"},"Remove the last ",(0,i.kt)("inlineCode",{parentName:"li"},"char")," from the string by moving the null terminator one position to the left."),(0,i.kt)("li",{parentName:"ul"},"Return this value plus 10 times the integer value of the new shortened string."),(0,i.kt)("li",{parentName:"ul"},"Remember you need a base case when creating a recursive function.")))),(0,i.kt)("h2",{id:"demo"},(0,i.kt)("a",{parentName:"h2",href:"#demo"},"Demo")),(0,i.kt)("h2",{id:"getting-started"},(0,i.kt)("a",{parentName:"h2",href:"#getting-started"},"Getting Started")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Log into ",(0,i.kt)("a",{parentName:"li",href:"https://cs50.dev/"},"cs50.dev")," using your GitHub account."),(0,i.kt)("li",{parentName:"ol"},"Click inside the terminal window and execute ",(0,i.kt)("inlineCode",{parentName:"li"},"cd"),"."),(0,i.kt)("li",{parentName:"ol"},"Execute ",(0,i.kt)("inlineCode",{parentName:"li"},"wget https://cdn.cs50.net/2022/fall/labs/3/atoi.zip")," followed by Enter in order to download a zip called ",(0,i.kt)("inlineCode",{parentName:"li"},"atoi.zip")," in your codespace. Take care not to overlook the space between ",(0,i.kt)("inlineCode",{parentName:"li"},"wget")," and the following URL, or any other character for that matter!"),(0,i.kt)("li",{parentName:"ol"},"Now execute ",(0,i.kt)("inlineCode",{parentName:"li"},"unzip atoi.zip")," to create a folder called ",(0,i.kt)("inlineCode",{parentName:"li"},"atoi"),"."),(0,i.kt)("li",{parentName:"ol"},"You no longer need the ZIP file, so you can execute ",(0,i.kt)("inlineCode",{parentName:"li"},"rm atoi.zip")," and respond with \u201cy\u201d followed by Enter at the prompt.")),(0,i.kt)("h2",{id:"implementation-details"},(0,i.kt)("a",{parentName:"h2",href:"#implementation-details"},"Implementation Details")),(0,i.kt)("p",null,"In the recursive version of ",(0,i.kt)("inlineCode",{parentName:"p"},"convert"),", start with the last ",(0,i.kt)("inlineCode",{parentName:"p"},"char")," and convert it into an integer value. Then shorten the ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", removing the last ",(0,i.kt)("inlineCode",{parentName:"p"},"char"),", and then recursively call ",(0,i.kt)("inlineCode",{parentName:"p"},"convert")," using the shortened string as input, where the next ",(0,i.kt)("inlineCode",{parentName:"p"},"char")," will be processed."),(0,i.kt)("h2",{id:"thought-question"},(0,i.kt)("a",{parentName:"h2",href:"#thought-question"},"Thought Question")),(0,i.kt)("p",null,"Why do you need a base case whenever you create a recursive function?"),(0,i.kt)("h2",{id:"how-to-test-your-code"},(0,i.kt)("a",{parentName:"h2",href:"#how-to-test-your-code"},"How to Test Your Code")),(0,i.kt)("p",null,"Your program should behave per the examples below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"atoi/ $ ./atoi\nEnter a positive integer: 3432\n3432\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"atoi/ $ ./atoi\nEnter a positive integer: 98765\n98765\n\n")),(0,i.kt)("p",null,"No ",(0,i.kt)("inlineCode",{parentName:"p"},"check50")," for this one!"),(0,i.kt)("p",null,"To evaluate that the style of your code, type in the following at the ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," prompt."),(0,i.kt)("h2",{id:"how-to-submit"},(0,i.kt)("a",{parentName:"h2",href:"#how-to-submit"},"How to Submit")),(0,i.kt)("p",null,"No need to submit! This is an optional practice problem."),(0,i.kt)("h2",{id:"a-more-thorough-implementation"},(0,i.kt)("a",{parentName:"h2",href:"#a-more-thorough-implementation"},"A More Thorough Implementation")),(0,i.kt)("p",null,"The actual version of ",(0,i.kt)("inlineCode",{parentName:"p"},"atoi")," must handle negative numbers, as well as leading spaces and non-numeric characters. It might look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#include <stdio.h>\n \n// Iterative function to implement `atoi()` function in C\nlong atoi(const char S[])\n{\n    long num = 0;\n    int i = 0, sign = 1;\n \n    // skip white space characters\n    while (S[i] == ' ' || S[i] == '\\n' || S[i] == '\\t') {\n        i++;\n    }\n \n    // note sign of the number\n    if (S[i] == '+' || S[i] == '-')\n    {\n        if (S[i] == '-') {\n            sign = -1;\n        }\n        i++;\n    }\n \n    // run till the end of the string is reached, or the\n    // current character is non-numeric\n    while (S[i] && (S[i] >= '0' && S[i] <= '9'))\n    {\n        num = num * 10 + (S[i] - '0');\n        i++;\n    }\n \n    return sign * num;\n}\n \n// Implement `atoi()` function in C\nint main(void)\n{\n    char S[] = \" -1234567890\";\n \n    printf(\"%ld \", atoi(S));\n \n    return 0;\n}\n\n")),(0,i.kt)("p",null,"From ",(0,i.kt)("a",{parentName:"p",href:"https://www.techiedelight.com/implement-atoi-function-c-iterative-recursive/"},"techiedelight.com/implement-atoi-function-c-iterative-recursive"),"."))}m.isMDXComponent=!0}}]);