"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[5050],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=i,c=m["".concat(s,".").concat(u)]||m[u]||h[u]||o;return a?n.createElement(c,r(r({ref:t},d),{},{components:a})):n.createElement(c,r({ref:t},d))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4617:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const o={title:"Project 2A Ngordnet (NGrams)",description:"Project 2A spec."},r=void 0,l={unversionedId:"curriculum-resource/cs61b/projects/proj2a/index",id:"curriculum-resource/cs61b/projects/proj2a/index",title:"Project 2A Ngordnet (NGrams)",description:"Project 2A spec.",source:"@site/docs/curriculum-resource/cs61b/projects/proj2a/index.md",sourceDirName:"curriculum-resource/cs61b/projects/proj2a",slug:"/curriculum-resource/cs61b/projects/proj2a/",permalink:"/docs/curriculum-resource/cs61b/projects/proj2a/",draft:!1,tags:[],version:"current",frontMatter:{title:"Project 2A Ngordnet (NGrams)",description:"Project 2A spec."},sidebar:"tutorialSidebar",previous:{title:"FAQ - Project 1C Deque61B Enhancements",permalink:"/docs/curriculum-resource/cs61b/projects/proj1c/faq"},next:{title:"FAQ - Project 2A",permalink:"/docs/curriculum-resource/cs61b/projects/proj2a/faq"}},s={},p=[{value:"FAQ",id:"faq",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Building An NGrams Viewer",id:"building-an-ngrams-viewer",level:2},{value:"TimeSeries",id:"timeseries",level:2},{value:"TimeSeries Tips",id:"timeseries-tips",level:3},{value:"NGramMap",id:"ngrammap",level:2},{value:"Input File Formats",id:"input-file-formats",level:3},{value:"NGramMap Tips",id:"ngrammap-tips",level:3},{value:"HistoryTextHandler",id:"historytexthandler",level:2},{value:"HistoryTextHandler Tips",id:"historytexthandler-tips",level:3},{value:"HistoryHandler",id:"historyhandler",level:2},{value:"HistoryHandler Tips",id:"historyhandler-tips",level:3},{value:"Deliverables and Scoring",id:"deliverables-and-scoring",level:2},{value:"Submission",id:"submission",level:3},{value:"Acknowledgements",id:"acknowledgements",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...o}=e;return(0,i.kt)(m,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"faq"},(0,i.kt)("a",{parentName:"h2",href:"/docs/curriculum-resource/cs61b/projects/proj2a/faq"},"FAQ")),(0,i.kt)("p",null,'Each assignment will have an FAQ linked at the top. You can also access it by adding "/faq" to the end of the URL. The\nFAQ for Project 2A is located\n',(0,i.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/projects/proj2a/faq"},"here"),"."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In this project, we will build a browser based tool for exploring the history of word usage in English texts. We have\nprovided the front end code (in Javascript and HTML) that collects user inputs and displays outputs. Your Java code will\nbe the back end for this tool, accepting input and generating appropriate output for display."),(0,i.kt)("p",null,"A video introduction to this project can be\nfound below (or ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=ri9BzE723QA&list=PL8FaHk7qbOD7-899l1hKEd5aICB9u1wrm&index=1"},"at this link"),")."),(0,i.kt)("p",{align:"center"},(0,i.kt)("iframe",{width:"600px",height:"400px",src:"https://www.youtube.com/embed/watch?v=ri9BzE723QA&list=PL8FaHk7qbOD7-899l1hKEd5aICB9u1wrm&index=1",title:"Project 2A Intro"})),(0,i.kt)("p",null,"To support this tool, you will write a series of Java packages that will allow for data analysis. Along the way we'll\nget lots of experience with different useful data structures. The early part of the project (proj2a) will start by\ntelling you exactly what functions to write and classes to create. The later part (proj2b) will be more open to your\nown design."),(0,i.kt)("p",null,"You can view the staff solution to the project at ",(0,i.kt)("a",{parentName:"p",href:"https://ngordnet.datastructur.es"},"ngordnet.datastructur.es"),"."),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"To get started, use ",(0,i.kt)("inlineCode",{parentName:"p"},"git pull skeleton main")," as usual."),(0,i.kt)("p",null,"You'll also need to download the Project 2 data files (not provided via GitHub for space reasons)."),(0,i.kt)("p",null,":::task"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Download the data files ",(0,i.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/1xGTZqCo5maiZjA307OPocmKDOTYlJXnz/view?usp=sharing"},"at this link"),"."),(0,i.kt)("p",{parentName:"blockquote"},"You should unzip this file into the proj2 directory such that the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," folder is at the same level as the ",(0,i.kt)("inlineCode",{parentName:"p"},"src"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"static")," folders."),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://support.microsoft.com/en-us/windows/zip-and-unzip-files-f6dde0a7-0fec-8294-e1d3-703ed85e7ebc#:~:text=To%20unzip%20files,folder%20to%20a%20new%20location."},"How to unzip folders on Windows")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://support.apple.com/guide/mac-help/zip-and-unzip-files-and-folders-on-mac-mchlp2528/mac#:~:text=Unzip%20(expand)%20a%20compressed%20item,zip%20file."},"How to unzip folders on Mac"),"\n:::\nOnce you are done with this step, your ",(0,i.kt)("inlineCode",{parentName:"li"},"proj2a")," directory should look like this:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"proj2a\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 ngrams\n\u2502   \u2514\u2500\u2500 wordnet\n\u251c\u2500\u2500 src\n\u251c\u2500\u2500 static\n\u251c\u2500\u2500 tests\n")),(0,i.kt)("p",null,"Note that we've set up hidden ",(0,i.kt)("a",{parentName:"p",href:"https://help.github.com/articles/ignoring-files/"},(0,i.kt)("inlineCode",{parentName:"a"},".gitignore"))," files\nin the skeleton code so that Git will avoid uploading these data files. This is intentional."),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Uploading the data files to GitHub will result in a lot of headaches for everybody, so please don't mess with any files called ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore"),". If you need to work on multiple machines, you should download the zip file once for each machine.")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"NgordnetQuery")," doesn't compile, make sure you are using Java version 15 (preview) or higher (preferably 17+)."),(0,i.kt)("p",null,"A video guide to setting up your computer for this project can be found ",(0,i.kt)("a",{parentName:"p",href:"https://youtu.be/8uIt7pXua6Y"},"at this link"),".\nNote that some files/filenames may be slightly different; in particular, the ",(0,i.kt)("inlineCode",{parentName:"p"},"hugbrowsermagic")," directory in the\nvideo is now just called ",(0,i.kt)("inlineCode",{parentName:"p"},"browser")," in your skeleton files."),(0,i.kt)("h2",{id:"building-an-ngrams-viewer"},"Building An NGrams Viewer"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"http://storage.googleapis.com/books/ngrams/books/datasetsv3.html"},"Google Ngram dataset")," provides many terabytes of\ninformation about the historical frequencies of all observed words and phrases in English (or more precisely all\nobserved ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/N-gram"},"ngrams"),"). Google provides\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://books.google.com/ngrams/graph?content=global+warming%2Cto+the+moon&year_start=1800&year_end=2019&corpus=en-2019&smoothing=0"},"Google Ngram Viewer on the web"),"\n, allowing users to visualize the relative historical popularity of words and phrases. For example, the link above plots\nthe ",(0,i.kt)("strong",{parentName:"p"},"weighted popularity history"),' of the phrases "global warming" (a 2gram) and "to the moon" (a 3gram).'),(0,i.kt)("p",null,"In Project 2A, you will be build a version of this tool that only handles 1grams. In other words, you'll only be able to\nhandle individual words. We'll only use a small subset (around 300 megabytes) of the full 1grams dataset, as larger\ndatasets will require more sophisticated techniques that are out of scope for this class."),(0,i.kt)("h2",{id:"timeseries"},"TimeSeries"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," is a special purpose extension of the existing ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeMap")," class where the key type parameter is\nalways ",(0,i.kt)("inlineCode",{parentName:"p"},"Integer"),", and the value type parameter is always ",(0,i.kt)("inlineCode",{parentName:"p"},"Double"),". Each key will correspond to a year, and each value a\nnumerical data point for that year. You can find the ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeMap")," API from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/TreeMap.html"},"here")," to see which methods are available to you."),(0,i.kt)("p",null,"For example, the following code would create a ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," and associate the year 1992 with the value 3.6 and 1993 with 9.2."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"TimeSeries ts = new TimeSeries();\nts.put(1992,3.6);\nts.put(1993,9.2);\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," class provides some additional utility methods to the ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeMap")," class, which it extends."),(0,i.kt)("p",null,":::task"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Fill out the ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," class (located in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/ngrams/TimeSeries.java")," file) according to\nthe API provided in the file. Be sure to read the comments above each method.\n:::")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"For an example of how ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," objects are used, check out the test named ",(0,i.kt)("inlineCode",{parentName:"p"},"testFromSpec()")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeriesTest.java"),"\nfile that we've provided.\nThis test creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," of cat and dog populations and then computes their sum. Note\nthat there is no value for 1993 because that year does not appear in either ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries"),"."))),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"You may not add additional public methods to this class. You're welcome to add additional private methods.")),(0,i.kt)("h3",{id:"timeseries-tips"},"TimeSeries Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries")," objects should have no instance variables. A ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries")," is-a ",(0,i.kt)("inlineCode",{parentName:"li"},"TreeMap"),". That means your ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries"),"\nclass also has access to all methods that a TreeMap has;\nsee ",(0,i.kt)("a",{parentName:"li",href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/TreeMap.html"},"the TreeMap API"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Several methods require that you compare the data of two ",(0,i.kt)("inlineCode",{parentName:"strong"},"TimeSeries"),". You should not have any code which fills in a zero if a year or value is unavailable.")),(0,i.kt)("li",{parentName:"ul"},"The provided ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeriesTest")," class provides a simple test of the ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries")," class. Feel free to add your own tests.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Note that the unit tests we gave you ",(0,i.kt)("strong",{parentName:"li"},"do not")," evaluate the correctness of the ",(0,i.kt)("inlineCode",{parentName:"li"},"dividedBy")," method."))),(0,i.kt)("li",{parentName:"ul"},"You'll notice in ",(0,i.kt)("inlineCode",{parentName:"li"},"testFromSpec()")," that we did not directly compare ",(0,i.kt)("inlineCode",{parentName:"li"},"expectedTotal")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"totalPopulation.data()"),". This\nis because doubles are prone to rounding errors, especially after division operations (for reasons that you will learn\nin 61C). Thus, ",(0,i.kt)("inlineCode",{parentName:"li"},"assertThat(x).isEqualTo(y)")," may unexpectedly\nreturn false when ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"y")," are doubles. Instead, you should use ",(0,i.kt)("inlineCode",{parentName:"li"},"assertThat(x).isWithin(1E-10).of(y)"),", which returns\ntrue as long as ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"y")," are within ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"1"),(0,i.kt)("msup",{parentName:"mrow"},(0,i.kt)("mn",{parentName:"msup"},"0"),(0,i.kt)("mrow",{parentName:"msup"},(0,i.kt)("mo",{parentName:"mrow"},"\u2212"),(0,i.kt)("mn",{parentName:"mrow"},"10")))),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"10^{-10}")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"1"),(0,i.kt)("span",{parentName:"span",className:"mord"},(0,i.kt)("span",{parentName:"span",className:"mord"},"0"),(0,i.kt)("span",{parentName:"span",className:"msupsub"},(0,i.kt)("span",{parentName:"span",className:"vlist-t"},(0,i.kt)("span",{parentName:"span",className:"vlist-r"},(0,i.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,i.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,i.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,i.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,i.kt)("span",{parentName:"span",className:"mord mtight"},(0,i.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,i.kt)("span",{parentName:"span",className:"mord mtight"},"10")))))))))))))," of each other."),(0,i.kt)("li",{parentName:"ul"},"You may assume that the ",(0,i.kt)("inlineCode",{parentName:"li"},"dividedBy")," operation never divides by zero.")),(0,i.kt)("h2",{id:"ngrammap"},"NGramMap"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap")," class will provide various convenient methods for interacting with Google's NGrams dataset. This task is\nmore open-ended and challenging than the creation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," class. As with ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries"),", you'll be filling in\nthe methods of an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap.java")," file. ",(0,i.kt)("strong",{parentName:"p"},"NGramMap should not extend any class.")),(0,i.kt)("p",null,"If you call a method that returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries"),", and there is no available data for the given method call, you should return an empty ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries"),". For example, ",(0,i.kt)("inlineCode",{parentName:"p"},'ngm.weightHistory("asdfasdf")')," should return a ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," with nothing in it, since ",(0,i.kt)("inlineCode",{parentName:"p"},'"asdfasdf"')," is not a word in the dataset. As another example, ",(0,i.kt)("inlineCode",{parentName:"p"},'ngm.countHistory("adopt", 1400, 1410)')," should also return a ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," with nothing in it,\nsince ",(0,i.kt)("inlineCode",{parentName:"p"},'"adopt"')," has no data during those years."),(0,i.kt)("p",null,":::task"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Fill out the ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap")," class (located in the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/ngrams/NGramMap.java")," file) according to\nthe API provided in the file. Once again, be sure to read the comments above each method.\n:::")),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"For an example of an ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap")," at work, the ",(0,i.kt)("inlineCode",{parentName:"p"},"testOnLargeFile()")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMapTest")," creates an ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap")," from the\n",(0,i.kt)("inlineCode",{parentName:"p"},"top_14377_words.csv")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"total_counts.csv"),' files (described below). It then performs various operations related to the\noccurrences of the words \\"fish\\" and \\"dog\\" in the period between 1850 and 1933.'))),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"You may not add additional public methods to this class. You're welcome to add additional private methods.")),(0,i.kt)("h3",{id:"input-file-formats"},"Input File Formats"),(0,i.kt)("p",null,'The NGram dataset comes in two different file types. The first type is a "words file". Each line of a words file\nprovides tab separated information about the history of a particular word in English during a given year.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"airport     2007    175702  32788\nairport     2008    173294  31271\nrequest     2005    646179  81592\nrequest     2006    677820  86967\nrequest     2007    697645  92342\nrequest     2008    795265  125775\nwandered    2005    83769   32682\nwandered    2006    87688   34647\nwandered    2007    108634  40101\nwandered    2008    171015  64395\n")),(0,i.kt)("p",null,"The first entry in each row is the word. The second entry is the year. The third entry is the number of times that the\nword appeared in any book that year. The fourth entry is the number of distinct sources that contain that word. ",(0,i.kt)("strong",{parentName:"p"},"Your\nprogram should ignore this fourth column."),' For example, from the text file above, we can observe that the word "wandered"\nappeared 171,015 times during the year 2008, and these appearances were spread across 64,395 distinct texts. For this\nproject, we never care about the fourth entry (total number of volumes).'),(0,i.kt)("p",null,'The other type of file is a "counts file". Each line of a counts file provides comma separated information about the\ntotal corpus of data available for each calendar year.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"1470,984,10,1\n1472,117652,902,2\n1475,328918,1162,1\n1476,20502,186,2\n1477,376341,2479,2\n")),(0,i.kt)("p",null,"The first entry in each row is the year. The second is the total number of words recorded from all texts that year. The\nthird number is the total number of pages of text from that year. The fourth is the total number of distinct sources\nfrom that year. Your program should ignore the third and fourth columns. For example, we see that Google has exactly one\nEnglish language text from the year 1470, and that it contains 984 words and 10 pages. For the purposes of our project\nthe 10 and the 1 are irrelevant."),(0,i.kt)("p",null,"You may wonder why one file is tab separated and the other is comma separated. I didn't do it, Google did. Luckily, this\ndifference won't be too hard to handle."),(0,i.kt)("h3",{id:"ngrammap-tips"},"NGramMap Tips"),(0,i.kt)("p",null,"There is a lot to think about for this part of the project. We're trying to mimic the situation in the real world where\nyou have some big open-ended problem and have to figure out the approach from scratch. This can be intimidating! It will\nlikely take some time and a lot of experimentation to figure out how to proceed. To help keep things from being too\ndifficult, we've at least provided a list of methods to implement. Keep in mind that in the real world (and in proj2b\nand proj3), even the list of methods will be your choice."),(0,i.kt)("p",null,"Your code should be fast enough that you can create an ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"top_14377_words.csv"),". Loading should take less than\n60 seconds (maybe a bit longer on an older computer). If your computer has enough memory, you should also be able to\nload ",(0,i.kt)("inlineCode",{parentName:"p"},"top_49887_words.csv"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The bulk of your work in this class will be implementing the constructor. You'll need to parse through the provided\ndata files and store this data in a data structure (or structures) of your choice.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This choice is important, since picking the right data structure(s) can make your life a lot easier when\nimplementing the rest of the methods. Thus, we recommend taking a look at the rest of the methods first to help\nyou decide what data structure might be best; then, begin implementing the constructor."))),(0,i.kt)("li",{parentName:"ul"},"Avoid using a HashMap or TreeMap as\nan ",(0,i.kt)("a",{parentName:"li",href:"https://docs.google.com/presentation/d/1j2vivowiaZWepIjUoWj6Cx3CdJiyuYslxkg8GsT8kxM/pub?start=false&loop=false&delayms=3000&slide=id.g631db3c57_38"},"actual type argument"),"\nfor your maps. This is usually a sign that what you actually want is a custom defined type. In other words, if your\ninstance variables include a nested mapping that looks like ",(0,i.kt)("inlineCode",{parentName:"li"},"HashMap<blah, HashMap<blah, blah>>"),", then a ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries"),"\nor some other class you come up with might be useful to keep in mind instead."),(0,i.kt)("li",{parentName:"ul"},"We have not taught you how to read files in Java. We recommend using the ",(0,i.kt)("inlineCode",{parentName:"li"},"In")," class. The official documentation can be\nfound ",(0,i.kt)("a",{parentName:"li",href:"https://introcs.cs.princeton.edu/java/stdlib/javadoc/In.html"},"here"),". However, you're welcome to use whatever\ntechnique you'd like that you learn about online. We provide an example class ",(0,i.kt)("inlineCode",{parentName:"li"},"FileReaderDemo.java")," that gives\nexamples of how to use ",(0,i.kt)("inlineCode",{parentName:"li"},"In"),"."),(0,i.kt)("li",{parentName:"ul"},"If you use ",(0,i.kt)("inlineCode",{parentName:"li"},"In"),", don't use ",(0,i.kt)("inlineCode",{parentName:"li"},"readAllLines")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"readAllStrings"),". These methods are slow. Instead, read inputs one chunk\nat a time. See ",(0,i.kt)("inlineCode",{parentName:"li"},"src/main/FileReaderDemo.java")," for an example.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Additionally, to check if there are any lines left in a file, you should use ",(0,i.kt)("inlineCode",{parentName:"li"},"hasNextLine")," (and not ",(0,i.kt)("inlineCode",{parentName:"li"},"isEmpty"),")."))),(0,i.kt)("li",{parentName:"ul"},"Our provided tests only cover some methods, but some methods are only tested on a very large file. You will need to\nwrite additional tests.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Rather than using one of the large input files (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"top_14377_words.csv"),"), we recommend starting with one of the\nsmaller input files, either ",(0,i.kt)("inlineCode",{parentName:"li"},"very_short.csv")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"words_that_start_with_q.csv"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Like in TimeSeries, you should not have any code which fills in a zero if a value is unavailable.")),(0,i.kt)("li",{parentName:"ul"},"If it helps speed up your code, you can assume year arguments are between 1400 and 2100. These variables are stored as constants ",(0,i.kt)("inlineCode",{parentName:"li"},"MIN_YEAR")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"MAX_YEAR")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries")," class."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NGramMap")," should not extend any other class."),(0,i.kt)("li",{parentName:"ul"},"Your methods should be simple! If you pick the right data structures, the methods should be relatively short."),(0,i.kt)("li",{parentName:"ul"},"If the word is invalid, return an empty ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries"),".")),(0,i.kt)("h2",{id:"historytexthandler"},"HistoryTextHandler"),(0,i.kt)("p",null,"In this final part of Project 2A, we'll do a bit of software engineering to set up a web server that can handle\nNgordnetQueries. While this content isn't strictly related to\ndata structures, it is incredibly important to be able to take projects and deploy them for real world use."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," You should only begin this part when you are fairly confident that ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap")," are working properly."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In your web browser, open up the ",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet_2a.html")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"static")," folder. You can do this from your finder\nmenu in your operating system, or by right-clicking on the ",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet_2a.html"),' in IntelliJ, clicking "Open in", then\n"Browser". You can use whatever browser you want, though TAs will be most familiar with Chrome. You\'ll see a web\nbrowser based interface that will ultimately (when you\'re done with the project) allow a user to enter a list of\nwords and display a visualization.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Try entering "cat, dog" into the "words" box, then click ',(0,i.kt)("inlineCode",{parentName:"p"},"History (Text)"),'. You\'ll see that nothing useful shows up.\nOptional: If you open the developer tools in your web browser (see Google for how to do this), you\'ll see an error\nthat looks like either "CONNECTION_REFUSED" or "INVALID_URL". The problem is that the Javascript tries to access a\nserver to generate the results, but there is no web server running that can handle the request to see the history of\ncat and dog.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.Main")," class. This class's ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," method first creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"NgordnetServer")," object. The API for this\nclass is as follows: First, we call ",(0,i.kt)("inlineCode",{parentName:"p"},"startUp")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"NgordnetServer"),' object, then we "register" one or\nmore ',(0,i.kt)("inlineCode",{parentName:"p"},"NgordnetQueryHandler")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," command. The precise details here are beyond the scope of our class."),(0,i.kt)("p",{parentName:"li"},"The basic idea is that when you call ",(0,i.kt)("inlineCode",{parentName:"p"},'hns.register("historytext", new DummyHistoryTextHandler(ngm))'),", an object of\ntype ",(0,i.kt)("inlineCode",{parentName:"p"},"DummyHistoryTextHandler")," is created that will handle any clicks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"History (Text)")," button.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Try running the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.Main")," class. In the terminal output in IntelliJ you should see the\nline: ",(0,i.kt)("inlineCode",{parentName:"p"},"INFO org.eclipse.jetty.server.Server - Started..."),", which means the server started correctly. Now open the\n",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet_2a.html"),' file again, enter "cat, dog" again, then click ',(0,i.kt)("inlineCode",{parentName:"p"},"History (Text)"),". This time, you should see a\nmessage that says:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"}," You entered the following info into the browser:\n Words: [cat, dog]\n Start Year: 2000\n End Year: 2020\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Now open ",(0,i.kt)("inlineCode",{parentName:"p"},"main.DummyHistoryTextHandler"),", you'll see a ",(0,i.kt)("inlineCode",{parentName:"p"},"handle")," method. This is called whenever the user\nclicks the ",(0,i.kt)("inlineCode",{parentName:"p"},"History (Text)")," button. The expected behavior should instead be that when the user clicks ",(0,i.kt)("inlineCode",{parentName:"p"},"History (Text)")," for the prompt above, the\nfollowing text should be displayed:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cat: {2000=1.71568475416827E-5, 2001=1.6120939684412677E-5, 2002=1.61742010630623E-5, 2003=1.703155141714967E-5, 2004=1.7418408946715716E-5, 2005=1.8042211615010028E-5, 2006=1.8126126955841936E-5, 2007=1.9411504094739293E-5, 2008=1.9999492186117545E-5, 2009=2.1599428349729816E-5, 2010=2.1712564894218663E-5, 2011=2.4857238078766228E-5, 2012=2.4198586699546612E-5, 2013=2.3131865569578688E-5, 2014=2.5344693375481996E-5, 2015=2.5237182007765998E-5, 2016=2.3157514119191215E-5, 2017=2.482102172595473E-5, 2018=2.3556758130732888E-5, 2019=2.4581322086049953E-5}\ndog: {2000=3.127517699525712E-5, 2001=2.99511426723737E-5, 2002=3.0283458650225453E-5, 2003=3.1470761877596034E-5, 2004=3.2890514515432536E-5, 2005=3.753038415155302E-5, 2006=3.74430614362125E-5, 2007=3.987077208249744E-5, 2008=4.267197824115907E-5, 2009=4.81026086549733E-5, 2010=5.30567576173992E-5, 2011=6.048536820577008E-5, 2012=5.179787485962082E-5, 2013=5.0225599367200654E-5, 2014=5.5575537540090384E-5, 2015=5.44261096781696E-5, 2016=4.805214145459557E-5, 2017=5.4171157785607686E-5, 2018=5.206751570646653E-5, 2019=5.5807040409297486E-5}\n")),(0,i.kt)("p",null,"To pass on the autograder, the formatting of the output must match exactly."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"All lines of text, including the last line, should end in a new line character."),(0,i.kt)("li",{parentName:"ul"},"All whitespace and punctuation (commas, braces, colons) should follow the example above.")),(0,i.kt)("p",null,"These numbers represent the ",(0,i.kt)("strong",{parentName:"p"},"weighted popularity histories")," of the words cat and dog in the given years. Due to rounding\nerrors, your numbers may not be exactly the same as shown above. Your format should be exactly as shown above:\nspecifically the word, followed by a colon, followed by a space, followed by a string representation of the\nappropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," where key-value pairs are given as a comma-separated list inside curly braces, with an equals\nsign between the key and values. Note that you don't need to write any code to generate the string representation of\neach ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries"),", you can just use the ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," method."),(0,i.kt)("p",null,"Now it's time to implement the HistoryText button!"),(0,i.kt)("p",null,":::task"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"HistoryTextHandler.java")," that takes the given ",(0,i.kt)("inlineCode",{parentName:"p"},"NgordnetQuery")," and returns a String in the\nsame format as above."),(0,i.kt)("p",{parentName:"blockquote"},"Then, modify ",(0,i.kt)("inlineCode",{parentName:"p"},"Main.java")," so that your ",(0,i.kt)("inlineCode",{parentName:"p"},"HistoryTextHandler")," is used when someone clicks ",(0,i.kt)("inlineCode",{parentName:"p"},"History (Text)"),". In other words,\ninstead of registering ",(0,i.kt)("inlineCode",{parentName:"p"},"DummyHistoryTextHandler"),", you should register your ",(0,i.kt)("inlineCode",{parentName:"p"},"HistoryTextHandler")," class instead.\n:::")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},"You might notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"Main.java")," prints out a link when the server has started up.\nIf you find it more convenient, you can just click this link instead of opening\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet_2a.html")," file manually."))),(0,i.kt)("h3",{id:"historytexthandler-tips"},"HistoryTextHandler Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The constructor for ",(0,i.kt)("inlineCode",{parentName:"li"},"HistoryTextHandler")," should be of the following form: ",(0,i.kt)("inlineCode",{parentName:"li"},"public HistoryTextHandler(NGramMap map)"),"."),(0,i.kt)("li",{parentName:"ul"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"DummyHistoryTextHandler.java")," as a guide, pattern matching where appropriate. Being able to tinker with\nexample code and bend it to your will is an incredibly important real world skill. Experiment away, don't be afraid to\nbreak something!"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"For Project 2A"),", you can ignore the ",(0,i.kt)("inlineCode",{parentName:"li"},"k")," instance variable of ",(0,i.kt)("inlineCode",{parentName:"li"},"NgordnetQuery"),"."),(0,i.kt)("li",{parentName:"ul"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},".toString()")," method built into the ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries")," class that gets inherited from ",(0,i.kt)("inlineCode",{parentName:"li"},"TreeMap"),"."),(0,i.kt)("li",{parentName:"ul"},"For your ",(0,i.kt)("inlineCode",{parentName:"li"},"HistoryTextHandler")," to be able to do something useful, it's going to need to be able to access the data\nstored in your ",(0,i.kt)("inlineCode",{parentName:"li"},"NGramMap"),". ",(0,i.kt)("strong",{parentName:"li"},"DO NOT MAKE THE NGRAM MAP INTO A STATIC VARIABLE!"),' This is known as a "global variable"\nand is rarely the appropriate solution for any problem. Hint: Your ',(0,i.kt)("inlineCode",{parentName:"li"},"HistoryTextHandler")," class can have a constructor."),(0,i.kt)("li",{parentName:"ul"},"If word is invalid, think about how ",(0,i.kt)("inlineCode",{parentName:"li"},"NGramMap")," is handling this situation.")),(0,i.kt)("h2",{id:"historyhandler"},"HistoryHandler"),(0,i.kt)("p",null,"The text based history from the previous section is not useful for much other than auto-grading your work. Actually using\nour tool to discover interesting things will require visualization."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"main.PlotDemo")," provides example code that uses your ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap")," to generate a visual plot showing the\nweighted popularity history of the words cat and dog between 1900 and 1950. Try running it. If your ",(0,i.kt)("inlineCode",{parentName:"p"},"NGramMap")," class is correct,\nyou should see a very long string printed to your console that might look something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"iVBORw0KGg...\n")),(0,i.kt)("p",null,"This string is a base 64 encoding of an image file. To visualize it, go to ",(0,i.kt)("a",{parentName:"p",href:"https://codebeautify.org/base64-to-image-converter"},"codebeautify.org"),".\nCopy and paste this entire string into the\nwebsite, and you should see a plot similar to the one shown below:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"decoded base 64",src:a(58862).Z,width:"1058",height:"1151"})),(0,i.kt)("p",null,"What's going on here? The string your code printed IS THE IMAGE. Keep in mind that any data can be represented as a\nstring of bits. This website knows how to decode this string into the corresponding image, using a predefined standard."),(0,i.kt)("p",null,"If you look at the plotting library, this code relies on the ",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet.Plotter.generateTimeSeriesChart")," method, which\ntakes two arguments. The first is a list of strings, and the second is a ",(0,i.kt)("inlineCode",{parentName:"p"},"List<TimeSeries>"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeSeries")," are all\nplotted in a different color, and each is assigned the label given in the list of strings. Both lists must be of the\nsame length (since the ith string is the label for the ith time series)."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet.Plotter.generateTimeSeriesChart")," method returns an object of type ",(0,i.kt)("inlineCode",{parentName:"p"},"XYChart"),". This object can in turn\neither be converted into base 64 by the ",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet.Plotter.encodeChartAsString")," method, or can be displayed to the screen\ndirectly by ",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet.Plotter.displayChart"),"."),(0,i.kt)("p",null,"In your web browser, again open up the ",(0,i.kt)("inlineCode",{parentName:"p"},"ngordnet_2a.html")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"static")," folder. With your ",(0,i.kt)("inlineCode",{parentName:"p"},"main.Main"),'\nclass running, enter "cat, dog" into the "words" box, then click "history". You\'ll see the strange image below:'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"parabola and sinusoid",src:a(24355).Z,width:"1437",height:"1265"})),(0,i.kt)("p",null,"You'll note that the code is not plotting the history of cat and dog, but rather a parabola and a sinusoid. If you\nopen ",(0,i.kt)("inlineCode",{parentName:"p"},"DummyHistoryHandler"),", you'll see why."),(0,i.kt)("p",null,":::task"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"HistoryHandler.java")," that takes the given ",(0,i.kt)("inlineCode",{parentName:"p"},"NgordnetQuery")," and returns a String that contains\na base-64 encoded image of the appropriate plot."),(0,i.kt)("p",{parentName:"blockquote"},"Then, modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"Main.java")," so that your ",(0,i.kt)("inlineCode",{parentName:"p"},"HistoryHandler")," is called when someone clicks the ",(0,i.kt)("inlineCode",{parentName:"p"},"History")," button.\n:::")),(0,i.kt)("h3",{id:"historyhandler-tips"},"HistoryHandler Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The constructor for ",(0,i.kt)("inlineCode",{parentName:"li"},"HistoryHandler")," should be of the following form: ",(0,i.kt)("inlineCode",{parentName:"li"},"public HistoryHandler(NGramMap map)"),"."),(0,i.kt)("li",{parentName:"ul"},"Just like before, use ",(0,i.kt)("inlineCode",{parentName:"li"},"DummyHistoryHandler.java")," as a guide. As mentioned in the previous section, we really want you\nto learn the skill of tinkering with complex library code to get the behavior you want.")),(0,i.kt)("h2",{id:"deliverables-and-scoring"},"Deliverables and Scoring"),(0,i.kt)("p",null,"You are responsible for implementing four classes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"TimeSeries (30%)"),": Correctly implement ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeSeries.java"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NGramMap Count (20%)"),": Correctly implement ",(0,i.kt)("inlineCode",{parentName:"li"},"countHistory()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"totalCountHistory()")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"NGramMap.java"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NGramMap Weight (30%)"),": Correctly implement ",(0,i.kt)("inlineCode",{parentName:"li"},"weightHistory()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"summedWeightHistory()")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"NGramMap.java"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"HistoryTextHandler (10%)"),": Correctly implement ",(0,i.kt)("inlineCode",{parentName:"li"},"HistoryTextHandler.java"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"HistoryHandler (10%)"),": Correctly implement ",(0,i.kt)("inlineCode",{parentName:"li"},"HistoryHandler.java"),".")),(0,i.kt)("h3",{id:"submission"},"Submission"),(0,i.kt)("p",null,"To submit the project, add and commit your files, then push to your remote repository. Then, go to the relevant\nassignment on Gradescope and submit there."),(0,i.kt)("p",null,"The autograder for this assignment will have the following velocity limiting scheme:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"From the release of the project to the due date, you will have 8 tokens; each of\nthese tokens will refresh every 24 hours.")),(0,i.kt)("h2",{id:"acknowledgements"},"Acknowledgements"),(0,i.kt)("p",null,"The WordNet part of this assignment is loosely adapted from Alina Ene and Kevin\nWayne's ",(0,i.kt)("a",{parentName:"p",href:"http://www.cs.princeton.edu/courses/archive/fall14/cos226/assignments/wordnet.html"},"Wordnet assignment")," at\nPrinceton University."))}h.isMDXComponent=!0},58862:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/default_base64-db909ef8bf63ca18a34ce19827f5b5ff.png"},24355:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/default_history_plot-faea171a02e8e0597f3a79bd14a0654b.png"}}]);