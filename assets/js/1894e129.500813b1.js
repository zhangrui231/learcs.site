"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[8134],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},30044:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={title:"Lab 9 Solutions"},i="Lab 9 Solutions | CS 61A Spring 2024",l={unversionedId:"curriculum-resource/cs61a/lab/sol-lab09",id:"curriculum-resource/cs61a/lab/sol-lab09",title:"Lab 9 Solutions",description:"Lab 9 Solutions",source:"@site/docs/curriculum-resource/cs61a/lab/sol-lab09.md",sourceDirName:"curriculum-resource/cs61a/lab",slug:"/curriculum-resource/cs61a/lab/sol-lab09",permalink:"/docs/curriculum-resource/cs61a/lab/sol-lab09",draft:!1,tags:[],version:"current",frontMatter:{title:"Lab 9 Solutions"},sidebar:"tutorialSidebar",previous:{title:"Lab 8 Solutions",permalink:"/docs/curriculum-resource/cs61a/lab/sol-lab08"},next:{title:"Lab 10 Solutions",permalink:"/docs/curriculum-resource/cs61a/lab/sol-lab10"}},p={},s=[{value:"Lab 9 Solutions",id:"lab-9-solutions",level:2},{value:"Solution Files",id:"solution-files",level:2},{value:"Scheme Introduction",id:"scheme-introduction",level:2},{value:"Scheme Editor",id:"scheme-editor",level:3},{value:"Recommended VS Code Extensions",id:"recommended-vs-code-extensions",level:3},{value:"Required Questions",id:"required-questions",level:2},{value:"Getting Started Videos",id:"getting-started-videos",level:2},{value:"Q1: Over or Under",id:"q1-over-or-under",level:3},{value:"Q2: Make Adder",id:"q2-make-adder",level:3},{value:"Q3: Compose",id:"q3-compose",level:3},{value:"Q4: Repeat",id:"q4-repeat",level:3},{value:"Q5: Greatest Common Divisor",id:"q5-greatest-common-divisor",level:3},{value:"Check Your Score Locally",id:"check-your-score-locally",level:2},{value:"Submit",id:"submit",level:2}],u={toc:s},d="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lab-9-solutions--cs-61a-spring-2024"},"Lab 9 Solutions | CS 61A Spring 2024"),(0,r.kt)("h2",{id:"lab-9-solutions"},"Lab 9 Solutions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{target:"_blank",href:n(66069).Z},"lab09.zip"))),(0,r.kt)("h2",{id:"solution-files"},"Solution Files"),(0,r.kt)("h2",{id:"scheme-introduction"},"Scheme Introduction"),(0,r.kt)("p",null,"The 61A Scheme interpreter is included in each Scheme assignment. To start it, type ",(0,r.kt)("inlineCode",{parentName:"p"},"python3 scheme")," in a terminal. To load a Scheme file called ",(0,r.kt)("inlineCode",{parentName:"p"},"f.scm"),", type ",(0,r.kt)("inlineCode",{parentName:"p"},"python3 scheme -i f.scm"),". To exit the Scheme interpreter, type ",(0,r.kt)("inlineCode",{parentName:"p"},"(exit)"),"."),(0,r.kt)("h3",{id:"scheme-editor"},"Scheme Editor"),(0,r.kt)("p",null,"All Scheme assignments include a web-based editor that makes it easy to run ok tests and visualize environments. Type ",(0,r.kt)("inlineCode",{parentName:"p"},"python3 editor")," in a terminal, and the editor will open in a browser window (at ",(0,r.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:31415/"),"). To stop running the editor and return to the command line, type ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl-C")," in the terminal where you started the editor."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," button loads the current assignment's ",(0,r.kt)("inlineCode",{parentName:"p"},".scm")," file and opens a Scheme interpreter, allowing you to try evaluating different Scheme expressions."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Test")," button runs all ok tests for the assignment. Click ",(0,r.kt)("inlineCode",{parentName:"p"},"View Case")," for a failed test, then click ",(0,r.kt)("inlineCode",{parentName:"p"},"Debug")," to step through its evaluation."),(0,r.kt)("h3",{id:"recommended-vs-code-extensions"},"Recommended VS Code Extensions"),(0,r.kt)("p",null,"If you choose to use VS Code as your text editor (instead of the web-based editor), install the ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=sjhuangx.vscode-scheme"},"vscode-scheme")," extension so that parentheses are highlighted."),(0,r.kt)("p",null,"Before:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(71162).Z,width:"662",height:"188"})),(0,r.kt)("p",null,"After:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(23004).Z,width:"678",height:"184"})),(0,r.kt)("h2",{id:"required-questions"},"Required Questions"),(0,r.kt)("h2",{id:"getting-started-videos"},"Getting Started Videos"),(0,r.kt)("p",null,"These videos may provide some helpful direction for tackling the coding problems on this assignment."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"To see these videos, you should be logged into your berkeley.edu email.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://youtu.be/playlist?list=PLx38hZJ5RLZdwIF0I28zXMYAvd-BQ2nWY"},"YouTube link")),(0,r.kt)("p",null,"Consult the drop-downs below if you need a refresher on Scheme. It's okay to skip directly to the questions and refer back here should you get stuck."),(0,r.kt)("p",null,"Atomic expressions (also called ",(0,r.kt)("em",{parentName:"p"},"atoms"),") are expressions without sub-expressions, such as numbers, boolean values, and symbols."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> 1234    ; integer\n1234\nscm> 123.4   ; real number\n123.4\nscm> #f      ; the Scheme equivalent of False in Python\n#f\n")),(0,r.kt)("p",null,"A Scheme ",(0,r.kt)("em",{parentName:"p"},"symbol")," is equivalent to a Python name. A symbol evaluates to the value bound to that symbol in the current environment. (They are called symbols rather than names because they include ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," and other arithmetic symbols.)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> quotient      ; A symbol bound to a built-in procedure\n#[quotient]\nscm> +             ; A symbol bound to a built-in procedure\n#[+]\n")),(0,r.kt)("p",null,"In Scheme, ",(0,r.kt)("em",{parentName:"p"},"all")," values except ",(0,r.kt)("inlineCode",{parentName:"p"},"#f")," (equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"False")," in Python) are true values (unlike Python, which has other false values, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> #t\n#t\nscm> #f\n#f\n")),(0,r.kt)("p",null,"Scheme uses Polish prefix notation, in which the operator expression comes before the operand expressions. For example, to evaluate ",(0,r.kt)("inlineCode",{parentName:"p"},"3 * (4 + 2)"),", we write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (* 3 (+ 4 2))\n18\n")),(0,r.kt)("p",null,"Just like in Python, to evaluate a call expression:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Evaluate the operator. It should evaluate to a procedure."),(0,r.kt)("li",{parentName:"ol"},"Evaluate the operands, left to right."),(0,r.kt)("li",{parentName:"ol"},"Apply the procedure to the evaluated operands.")),(0,r.kt)("p",null,"Here are some examples using built-in procedures:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (+ 1 2)\n3\nscm> (- 10 (/ 6 2))\n7\nscm> (modulo 35 4)\n3\nscm> (even? (quotient 45 2))\n#t\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Define:")," The ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," form is used to assign values to symbols. It has the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define <symbol> <expression>)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (define pi (+ 3 0.14))\npi\nscm> pi\n3.14\n")),(0,r.kt)("p",null,"To evaluate the ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," expression:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Evaluate the final sub-expression (",(0,r.kt)("inlineCode",{parentName:"li"},"<expression>"),"), which in this case evaluates to ",(0,r.kt)("inlineCode",{parentName:"li"},"3.14"),"."),(0,r.kt)("li",{parentName:"ol"},"Bind that value to the symbol (",(0,r.kt)("inlineCode",{parentName:"li"},"symbol"),"), which in this case is ",(0,r.kt)("inlineCode",{parentName:"li"},"pi"),"."),(0,r.kt)("li",{parentName:"ol"},"Return the symbol.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"define"),' form can also define new procedures, described in the "Defining Functions" section.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"If Expressions:")," The ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," special form evaluates one of two expressions based on a predicate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(if <predicate> <if-true> <if-false>)\n")),(0,r.kt)("p",null,"The rules for evaluating an ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," special form expression are as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Evaluate the ",(0,r.kt)("inlineCode",{parentName:"li"},"<predicate>"),"."),(0,r.kt)("li",{parentName:"ol"},"If the ",(0,r.kt)("inlineCode",{parentName:"li"},"<predicate>")," evaluates to a true value (anything but ",(0,r.kt)("inlineCode",{parentName:"li"},"#f"),"), evaluate and return the value of the ",(0,r.kt)("inlineCode",{parentName:"li"},"<if-true>")," expression. Otherwise, evaluate and return the value of the ",(0,r.kt)("inlineCode",{parentName:"li"},"<if-false>")," expression.")),(0,r.kt)("p",null,"For example, this expression does not error and evaluates to 5, even though the sub-expression ",(0,r.kt)("inlineCode",{parentName:"p"},"(/ 1 (- x 3))")," would error if evaluated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (define x 3)\nx\nscm> (if (> (- x 3) 0) (/ 1 (- x 3)) (+ x 2))\n5\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<if-false>")," expression is optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (if (= x 3) (print x))\n3\n")),(0,r.kt)("p",null,"Let's compare a Scheme ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," expression with a Python ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," statement:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Scheme"),(0,r.kt)("th",{parentName:"tr",align:null},"Python")))),(0,r.kt)("p",null,"| "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (if (> x 3) 1 2)\n")),(0,r.kt)("p",null," | "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> if x > 3:\n...     1\n... else:\n...     2\n")),(0,r.kt)("p",null," |"),(0,r.kt)("p",null,"The Scheme ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," expression evaluates to a number (either 1 or 2, depending on ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"). The Python statement does not evaluate to anything, and so the 1 and 2 cannot be used or accessed."),(0,r.kt)("p",null,"Another difference between the two is that it's possible to add more lines of code into the suites of the Python ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," statement, while a Scheme ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," expression expects just a single expression in each of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<if-true>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"<if-false>")," positions."),(0,r.kt)("p",null,"One final difference is that in Scheme, you cannot write ",(0,r.kt)("inlineCode",{parentName:"p"},"elif")," clauses."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Cond Expressions:")," The ",(0,r.kt)("inlineCode",{parentName:"p"},"cond")," special form can include multiple predicates (like if/elif in Python):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(cond\n    (<p1> <e1>)\n    (<p2> <e2>)\n    ...\n    (<pn> <en>)\n    (else <else-expression>))\n")),(0,r.kt)("p",null,"The first expression in each clause is a predicate. The second expression in the clause is the return expression corresponding to its predicate. The ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," clause is optional; its ",(0,r.kt)("inlineCode",{parentName:"p"},"<else-expression>")," is the return expression if none of the predicates are true."),(0,r.kt)("p",null,"The rules of evaluation are as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Evaluate the predicates ",(0,r.kt)("inlineCode",{parentName:"li"},"<p1>"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<p2>"),", ..., ",(0,r.kt)("inlineCode",{parentName:"li"},"<pn>")," in order until one evaluates to a true value (anything but ",(0,r.kt)("inlineCode",{parentName:"li"},"#f"),")."),(0,r.kt)("li",{parentName:"ol"},"Evalaute and return the value of the return expression corresponding to the first predicate expression with a true value."),(0,r.kt)("li",{parentName:"ol"},"If none of the predicates evaluate to true values and there is an ",(0,r.kt)("inlineCode",{parentName:"li"},"else")," clause, evaluate and return ",(0,r.kt)("inlineCode",{parentName:"li"},"<else-expression>"),".")),(0,r.kt)("p",null,"For example, this ",(0,r.kt)("inlineCode",{parentName:"p"},"cond")," expression returns the nearest multiple of 3 to ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (define x 5)\nx\nscm> (cond ((= (modulo x 3) 0) x)\n            ((= (modulo x 3) 1) (- x 1))\n            ((= (modulo x 3) 2) (+ x 1)))\n6\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Lambdas:")," The ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda")," special form creates a procedure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(lambda (<param1> <param2> ...) <body>)\n")),(0,r.kt)("p",null,"This expression will create and return a procedure with the given formal parameters and body, similar to a ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda")," expression in Python."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (lambda (x y) (+ x y))        ; Returns a lambda procedure, but doesn't assign it to a name\n(lambda (x y) (+ x y))\nscm> ((lambda (x y) (+ x y)) 3 4)  ; Create and call a lambda procedure in one line\n7\n")),(0,r.kt)("p",null,"Here are equivalent expressions in Python:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> lambda x, y: x + y\n<function <lambda> at ...>\n>>> (lambda x, y: x + y)(3, 4)\n7\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<body>")," may contain multiple expressions. A scheme procedure returns the value of the last expression in its body."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," form can create a procedure and give it a name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (<symbol> <param1> <param2> ...) <body>)\n")),(0,r.kt)("p",null,"For example, this is how we would define the ",(0,r.kt)("inlineCode",{parentName:"p"},"double")," procedure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (define (double x) (* x 2))\ndouble\nscm> (double 3)\n6\n")),(0,r.kt)("p",null,"Here's an example with three arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (define (add-then-mul x y z)\n        (* (+ x y) z))\nscm> (add-then-mul 3 4 5)\n35\n")),(0,r.kt)("p",null,"When a ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," expression is evaluated, the following occurs:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a procedure with the given parameters and ",(0,r.kt)("inlineCode",{parentName:"li"},"<body>"),"."),(0,r.kt)("li",{parentName:"ol"},"Bind the procedure to the ",(0,r.kt)("inlineCode",{parentName:"li"},"<symbol>")," in the current frame."),(0,r.kt)("li",{parentName:"ol"},"Return the ",(0,r.kt)("inlineCode",{parentName:"li"},"<symbol>"),".")),(0,r.kt)("p",null,"The following two expressions are equivalent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (define add (lambda (x y) (+ x y)))\nadd\nscm> (define (add x y) (+ x y))\nadd\n")),(0,r.kt)("h3",{id:"q1-over-or-under"},"Q1: Over or Under"),(0,r.kt)("p",null,"Define a procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"over-or-under")," which takes in a number ",(0,r.kt)("inlineCode",{parentName:"p"},"num1")," and a number ",(0,r.kt)("inlineCode",{parentName:"p"},"num2")," and returns the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"-","1 if ",(0,r.kt)("inlineCode",{parentName:"li"},"num1")," is less than ",(0,r.kt)("inlineCode",{parentName:"li"},"num2")),(0,r.kt)("li",{parentName:"ul"},"0 if ",(0,r.kt)("inlineCode",{parentName:"li"},"num1")," is equal to ",(0,r.kt)("inlineCode",{parentName:"li"},"num2")),(0,r.kt)("li",{parentName:"ul"},"1 if ",(0,r.kt)("inlineCode",{parentName:"li"},"num1")," is greater than ",(0,r.kt)("inlineCode",{parentName:"li"},"num2"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Challenge: Implement this in 2 different ways using ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cond"),"!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (over-or-under num1 num2)\n  (cond\n    ((< num1 num2) -1)\n    ((= num1 num2) 0)\n    (else 1))\n)\n")),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q over_or_under\n")),(0,r.kt)("h3",{id:"q2-make-adder"},"Q2: Make Adder"),(0,r.kt)("p",null,"Write the procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"make-adder")," which takes in an initial number, ",(0,r.kt)("inlineCode",{parentName:"p"},"num"),", and then returns a procedure. This returned procedure takes in a number ",(0,r.kt)("inlineCode",{parentName:"p"},"inc")," and returns the result of ",(0,r.kt)("inlineCode",{parentName:"p"},"num + inc"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Hint"),": To return a procedure, you can either return a ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda")," expression or ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," another nested procedure. Remember that Scheme will automatically return the last clause in your procedure."),(0,r.kt)("p",{parentName:"blockquote"},"You can find documentation on the syntax of ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda")," expressions in ",(0,r.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/scheme-spec/#lambda"},"the 61A scheme specification!"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (make-adder num)\n  (lambda (inc) (+ inc num))\n)\n")),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q make_adder\n")),(0,r.kt)("h3",{id:"q3-compose"},"Q3: Compose"),(0,r.kt)("p",null,"Write the procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"composed"),", which takes in procedures ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," and outputs a new procedure. This new procedure takes in a number ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and outputs the result of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," on ",(0,r.kt)("inlineCode",{parentName:"p"},"g")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (composed f g)\n  (lambda (x) (f (g x))))\n")),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q composed\n")),(0,r.kt)("h3",{id:"q4-repeat"},"Q4: Repeat"),(0,r.kt)("p",null,"Write the procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"repeat"),", which takes in a procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," and a number ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),", and outputs a new procedure. This new procedure takes in a number ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and outputs the result of applying ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," a total of ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," times. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"scm> (define (square x) (* x x))\nsquare\nscm> ((repeat square 2) 5) ; (square (square 5))\n625\nscm> ((repeat square 3) 3) ; (square (square (square 3)))\n6561\nscm> ((repeat square 1) 7) ; (square 7)\n49\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Hint:")," The ",(0,r.kt)("inlineCode",{parentName:"p"},"composed")," function you wrote in the previous problem might be useful.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (repeat f n)\n; note: this relies on `composed` being implemented correctly\n  (if (< n 1)\n    (lambda (x) x)\n    (composed f (repeat f (- n 1)))))\n")),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q repeat\n")),(0,r.kt)("h3",{id:"q5-greatest-common-divisor"},"Q5: Greatest Common Divisor"),(0,r.kt)("p",null,"The GCD is the the greatest common divisor of two positive integers."),(0,r.kt)("p",null,"Write the procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"gcd"),", which computes the GCD of numbers ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," using Euclid's algorithm, which uses the fact that the GCD of two values is either of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the smaller value if it evenly divides the larger value, or"),(0,r.kt)("li",{parentName:"ul"},"the greatest common divisor of the smaller value and the remainder of the larger value divided by the smaller value")),(0,r.kt)("p",null,"In other words, if ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," is greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," is not divisible by ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),", then"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"gcd(a, b) = gcd(b, a % b)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You may find the provided procedures ",(0,r.kt)("inlineCode",{parentName:"p"},"min")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"max")," helpful. You can also use the built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"modulo")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"zero?")," procedures."),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre"},"scm> (modulo 10 4)\n2\nscm> (zero? (- 3 3))\n#t\nscm> (zero? 3)\n#f\n"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (max a b) (if (> a b) a b))\n(define (min a b) (if (> a b) b a))\n(define (gcd a b)\n  (cond ((zero? a) b)\n        ((zero? b) a)\n        ((= (modulo (max a b) (min a b)) 0) (min a b))\n        (else (gcd (min a b) (modulo (max a b) (min a b))))))\n")),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q gcd\n")),(0,r.kt)("h2",{id:"check-your-score-locally"},"Check Your Score Locally"),(0,r.kt)("p",null,"You can locally check your score on each question of this assignment by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok --score\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This does NOT submit the assignment!")," When you are satisfied with your score, submit the assignment to Gradescope to receive credit for it."),(0,r.kt)("h2",{id:"submit"},"Submit"),(0,r.kt)("p",null,"Submit this assignment by uploading any files you've edited ",(0,r.kt)("strong",{parentName:"p"},"to the appropriate Gradescope assignment.")," ",(0,r.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00/#submit-with-gradescope"},"Lab 00")," has detailed instructions."),(0,r.kt)("p",null,"In addition, all students who are ",(0,r.kt)("strong",{parentName:"p"},"not")," in the mega lab must complete this ",(0,r.kt)("a",{parentName:"p",href:"https://go.cs61a.org/lab-att"},"attendance form"),". Submit this form each week, whether you attend lab or missed it for a good reason. The attendance form is not required for mega section students."))}m.isMDXComponent=!0},66069:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/lab09-ec6bcbb4b97e22c5a418405bceaea5c4.zip"},23004:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/after-49c28554ee03a6642fe04e111fd59fd5.png"},71162:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/before-1fb62971706b817f8b61c7a23705e08a.png"}}]);