"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[536],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6401:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const l={sidebar_position:1,description:"cs50x practice problem  helloflask",title:"helloflask"},r="Hello, Flask - CS50x 2023",i={unversionedId:"curriculum-resource/cs50x/cs50x_en/lecture10/practice problems/helloflask",id:"curriculum-resource/cs50x/cs50x_en/lecture10/practice problems/helloflask",title:"helloflask",description:"cs50x practice problem  helloflask",source:"@site/docs/curriculum-resource/cs50x/cs50x_en/lecture10/practice problems/helloflask.md",sourceDirName:"curriculum-resource/cs50x/cs50x_en/lecture10/practice problems",slug:"/curriculum-resource/cs50x/cs50x_en/lecture10/practice problems/helloflask",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture10/practice problems/helloflask",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"cs50x practice problem  helloflask",title:"helloflask"},sidebar:"tutorialSidebar",previous:{title:"Practice Problem",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture10/practice problems/"},next:{title:"Lab",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture10/lab"}},s={},p=[{value:"Learning Goals",id:"learning-goals",level:2},{value:"Background",id:"background",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Templates",id:"templates",level:3},{value:"Forms",id:"forms",level:3},{value:"POST",id:"post",level:3},{value:"How to Test Your Code",id:"how-to-test-your-code",level:2},{value:"How to Submit",id:"how-to-submit",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...l}=e;return(0,o.kt)(c,(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hello-flask---cs50x-2023"},"Hello, Flask - CS50x 2023"),(0,o.kt)("h2",{id:"learning-goals"},(0,o.kt)("a",{parentName:"h2",href:"#learning-goals"},"Learning Goals")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Build a simple flask app to gain an understanding of how to use this framework"),(0,o.kt)("li",{parentName:"ul"},"Become familiar with Jinja, a templating language used with Flask")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"FlaskLogo",src:n(33430).Z,width:"419",height:"164"})),(0,o.kt)("h2",{id:"background"},(0,o.kt)("a",{parentName:"h2",href:"#background"},"Background")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://flask.palletsprojects.com/"},"Flask"),", a ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Microframework"},"microframework")," used for web development, can be confusing when starting out. There are multiple files of different types, and they must reside in specific folders. In this problem, we\u2019ll start with the absolute minimum\u2014a single Python file. From there we will move on to create your first full-fledged web app!"),(0,o.kt)("h2",{id:"getting-started"},(0,o.kt)("a",{parentName:"h2",href:"#getting-started"},"Getting Started")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Log into ",(0,o.kt)("a",{parentName:"li",href:"https://cs50.dev/"},"cs50.dev")," using your GitHub account."),(0,o.kt)("li",{parentName:"ol"},"Click inside the terminal window and execute ",(0,o.kt)("inlineCode",{parentName:"li"},"cd"),"."),(0,o.kt)("li",{parentName:"ol"},"Execute ",(0,o.kt)("inlineCode",{parentName:"li"},"wget https://cdn.cs50.net/2022/fall/labs/9/helloflask.zip")," followed by Enter in order to download a zip called ",(0,o.kt)("inlineCode",{parentName:"li"},"helloflask.zip")," in your codespace. Take care not to overlook the space between ",(0,o.kt)("inlineCode",{parentName:"li"},"wget")," and the following URL, or any other character for that matter!"),(0,o.kt)("li",{parentName:"ol"},"Now execute ",(0,o.kt)("inlineCode",{parentName:"li"},"unzip helloflask.zip")," to create a folder called ",(0,o.kt)("inlineCode",{parentName:"li"},"helloflask"),"."),(0,o.kt)("li",{parentName:"ol"},"You no longer need the ZIP file, so you can execute ",(0,o.kt)("inlineCode",{parentName:"li"},"rm helloflask.zip")," and respond with \u201cy\u201d followed by Enter at the prompt.")),(0,o.kt)("h2",{id:"implementation-details"},(0,o.kt)("a",{parentName:"h2",href:"#implementation-details"},"Implementation Details")),(0,o.kt)("p",null,"The most simple Flask app uses just one file, ",(0,o.kt)("inlineCode",{parentName:"p"},"app.py"),". This will create an html page and say hello. Add the following into ",(0,o.kt)("inlineCode",{parentName:"p"},"app.py")," to get started."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route("/")\ndef index():\n    return "Hello, World!"\n\n')),(0,o.kt)("p",null,"This bit of code starts by importing ",(0,o.kt)("inlineCode",{parentName:"p"},"Flask")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"flask")," library. Though we don\u2019t need to get too far into the weeds here, ",(0,o.kt)("inlineCode",{parentName:"p"},"Flask")," is what programmers call a \u201c",(0,o.kt)("a",{parentName:"p",href:"https://cs50.harvard.edu/python/2022/notes/8/#classes"},"class"),"\u201d. Suffice to say for now, it\u2019s like a template for the application we\u2019ll be building. The line ",(0,o.kt)("inlineCode",{parentName:"p"},"app = Flask(__name__)")," tells Python to create a particular app, henceforth called \u201capp\u201d, from the template. To create the particular application, we give the ",(0,o.kt)("inlineCode",{parentName:"p"},"Flask")," class the name of the current Python file (represented by ",(0,o.kt)("inlineCode",{parentName:"p"},"__name__"),"), which allows our application to find other files we might later add to it. In this case, the name of the file is also \u201capp\u201d for consistency."),(0,o.kt)("p",null,"The most mysterious line in the application you\u2019ve written is probably the one where you wrote:"),(0,o.kt)("p",null,"This kind of function is called a decorator. Decorators allow you to take a basic function, like ",(0,o.kt)("inlineCode",{parentName:"p"},"app.route"),", and extend its functionality with something custom: the function you write after the decorator. You can ",(0,o.kt)("a",{parentName:"p",href:"https://realpython.com/primer-on-python-decorators/"},"read more")," about decorators if you want, or you can just keep using them for now."),(0,o.kt)("p",null,"This line tells Flask that if an HTTP request comes in for \u201c/\u201d, the ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," function should be run. Note that, if we renamed the function to be ",(0,o.kt)("inlineCode",{parentName:"p"},"homepage"),", this line would tell Flask that\u2014every time it receives an HTTP request for \u201c/\u201d\u2014it should run the ",(0,o.kt)("inlineCode",{parentName:"p"},"homepage")," function."),(0,o.kt)("p",null,"Notice that the ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," function returns a piece of text, \u201cHello, World!\u201d. This text is what Flask will render to the user when their request to the \u201c/\u201d route is complete. The returned text could be (and often is!) the text of an entire HTML file, which the browser then renders accordingly. But it\u2019s just a piece of text for now, for brevity\u2019s sake."),(0,o.kt)("p",null,"To run your app, type ",(0,o.kt)("inlineCode",{parentName:"p"},"flask run")," into the terminal, and you will get a link to click, similar to when you run ",(0,o.kt)("inlineCode",{parentName:"p"},"http-server"),". You\u2019ve written a Flask app! Try returning different text, like ",(0,o.kt)("inlineCode",{parentName:"p"},"<h1>Hello, World!</h1>"),". How does this change what you see?"),(0,o.kt)("h3",{id:"templates"},(0,o.kt)("a",{parentName:"h3",href:"#templates"},"Templates")),(0,o.kt)("p",null,"Instead of putting HTML code right into our Python programs, it\u2019s best to move our HTML into separate files, to keep separate concerns separate. Since our app will likely include a number of similar HTML files, we can create one ",(0,o.kt)("inlineCode",{parentName:"p"},"layout.html")," file which all our HTML files \u201cextend\u201d. \u201cExtending\u201d an HTML file means to keep all of the content of that HTML file while also adding some custom content, specific to a particular page."),(0,o.kt)("p",null,"By convention, Flask puts all HTML files inside of a ",(0,o.kt)("inlineCode",{parentName:"p"},"templates")," folder. Inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"helloflask")," folder, make a folder called ",(0,o.kt)("inlineCode",{parentName:"p"},"templates")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"mkdir templates"),". All your HTML files will go in this ",(0,o.kt)("inlineCode",{parentName:"p"},"templates")," folder."),(0,o.kt)("p",null,"Inside ",(0,o.kt)("inlineCode",{parentName:"p"},"templates"),", create a ",(0,o.kt)("inlineCode",{parentName:"p"},"layout.html")," file that looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <title>Hello, Flask</title>\n    </head>\n    <body>\n        <h1>Hello, Flask</h1>\n        {% block body %}{% endblock %}\n    </body>\n</html>\n\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"{% block body %}{% endblock %}")," syntax comes from ",(0,o.kt)("a",{parentName:"p",href:"https://palletsprojects.com/p/jinja/"},"Jinja"),", which is a \u201ctemplate engine\u201d for Python. The line with ",(0,o.kt)("inlineCode",{parentName:"p"},"{% block body %}{% endblock %}")," is what makes this a layout file. If another HTML file extends ",(0,o.kt)("inlineCode",{parentName:"p"},"layout.html")," and defines a block called \u201cbody\u201d, we\u2019ll insert that block into this section of the ",(0,o.kt)("inlineCode",{parentName:"p"},"layout.html"),". A layout file can contain as many blocks as you want. Just give each one a different name."),(0,o.kt)("p",null,"Now create ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," so that it extends the template ",(0,o.kt)("inlineCode",{parentName:"p"},"layout.html"),", like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    <p>Next we\'ll put a form here and get some POST action!</p>\n{% endblock %}\n\n')),(0,o.kt)("p",null,"Finally, we\u2019ll go back to ",(0,o.kt)("inlineCode",{parentName:"p"},"app.py")," to see these changes come to life. In the initial import, we\u2019ll need a few more functions from Flask (as shown below). Then, replace the direct return of text with a call to Flask\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"render_template")," function. The purpose of the ",(0,o.kt)("inlineCode",{parentName:"p"},"render_template")," function is to preprocess ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," such that, when we give it to the browser, it also includes the HTML it \u201cinherits\u201d from ",(0,o.kt)("inlineCode",{parentName:"p"},"layout.html"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route("/")\ndef index():\n    return render_template("index.html")\n\n')),(0,o.kt)("p",null,"When you run your application now (type ",(0,o.kt)("inlineCode",{parentName:"p"},"flask run"),"!), you\u2019ll get a little more out of your app. But it isn\u2019t really interactive yet!"),(0,o.kt)("h3",{id:"forms"},(0,o.kt)("a",{parentName:"h3",href:"#forms"},"Forms")),(0,o.kt)("p",null,"HTML forms allow the user to enter data into input fields and send the data to the server, often using the POST method of the HTTP protocol. You can learn more about HTML Forms ",(0,o.kt)("a",{parentName:"p",href:"https://www.w3schools.com/html/html_forms.asp"},"here"),"."),(0,o.kt)("p",null,"Add a form to ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," so that it looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    <form action="/" method="post">\n        What is your favorite color?\n        <select name="color">\n            <option value="red">Harvard Crimson</option>\n            <option value="blue">Yale Blue</option>\n        </select>\n        <button type="submit">Submit</button>\n    </form>\n{% endblock %}\n\n')),(0,o.kt)("p",null,"Note that each form element has both a ",(0,o.kt)("em",{parentName:"p"},"name")," and a ",(0,o.kt)("em",{parentName:"p"},"value"),". The name an element is what we\u2019ll use to refer to that element. Its value is the value submitted by the form. Each get passed into ",(0,o.kt)("inlineCode",{parentName:"p"},"app.py")," for our use when the form is submitted."),(0,o.kt)("p",null,"Run your app, visit the ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," route, and submit the form. Oops! You should see the message \u201cMethod not allowed\u201d. So we\u2019ll first need to make sure Flask allows the use of the POST method on ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),"."),(0,o.kt)("h3",{id:"post"},(0,o.kt)("a",{parentName:"h3",href:"#post"},"POST")),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"app.py"),", we need to adjust our route to handle the POST request. Here is what our new ",(0,o.kt)("inlineCode",{parentName:"p"},"app.py")," looks like."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route("/", methods=["GET", "POST"])\ndef index():\n    if request.method == "GET":\n        return render_template("index.html")\n    else:\n        print("Form submitted!")\n        color = request.form.get("color")\n        return render_template("color.html", color=color)\n\n')),(0,o.kt)("p",null,"This example has some logic in it: if the user submits a GET request, we\u2019ll show them the basic ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," with a form to submit. If, though, they submit a POST request, we\u2019ll do a few different things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"print")," \u201cForm submitted!\u201d to the terminal, for debugging\u2019s sake. We should later remove this once we\u2019re satisfied our program works as intended."),(0,o.kt)("li",{parentName:"ul"},"Store the ",(0,o.kt)("em",{parentName:"li"},"value")," of the \u201ccolor\u201d input in a variable also called ",(0,o.kt)("inlineCode",{parentName:"li"},"color"),", as via ",(0,o.kt)("inlineCode",{parentName:"li"},'color = request.form.get("color")'),"."),(0,o.kt)("li",{parentName:"ul"},"Render a new HTML file, ",(0,o.kt)("inlineCode",{parentName:"li"},"color.html"),", and pass the value of the ",(0,o.kt)("inlineCode",{parentName:"li"},"color")," variable into the file under the very same name, ",(0,o.kt)("inlineCode",{parentName:"li"},"color"),".")),(0,o.kt)("p",null,"Let\u2019s create ",(0,o.kt)("inlineCode",{parentName:"p"},"color.html")," for our application to work:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    <p style="color: {{ color }}">Your favorite color is {{ color }}.</p>\n{% endblock %}\n\n')),(0,o.kt)("p",null,"Notice how we can insert the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"color")," anywhere in our HTML we\u2019d like\u2014whether as text in a sentence, or as a placeholder for the value of some CSS property."),(0,o.kt)("p",null,"We\u2019ll likely want to add some additional input validation, however, instead of simply trusting our users to send only the values \u201cblue\u201d or \u201cred\u201d via POST. What additional code could you add to ensure the colors we receive are valid colors?"),(0,o.kt)("h2",{id:"how-to-test-your-code"},(0,o.kt)("a",{parentName:"h2",href:"#how-to-test-your-code"},"How to Test Your Code")),(0,o.kt)("p",null,"Your program should behave as per the examples above."),(0,o.kt)("p",null,"No ",(0,o.kt)("inlineCode",{parentName:"p"},"check50")," for this one!"),(0,o.kt)("h2",{id:"how-to-submit"},(0,o.kt)("a",{parentName:"h2",href:"#how-to-submit"},"How to Submit")),(0,o.kt)("p",null,"No need to submit. This is a practice problem!"))}m.isMDXComponent=!0},33430:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/flask-logo-441e29a5c4a8d7b2b8d12f74d61edef3.png"}}]);