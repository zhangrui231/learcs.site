"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[3939],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(t),d=o,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return t?a.createElement(h,r(r({ref:n},p),{},{components:t})):a.createElement(h,r({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,r[1]=l;for(var u=2;u<i;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},325:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=t(87462),o=(t(67294),t(3905));const i={title:"04-functions"},r="Functions",l={unversionedId:"curriculum-resource/py4e/book/04",id:"curriculum-resource/py4e/book/04",title:"04-functions",description:"Function calls",source:"@site/docs/curriculum-resource/py4e/book/04.md",sourceDirName:"curriculum-resource/py4e/book",slug:"/curriculum-resource/py4e/book/04",permalink:"/docs/curriculum-resource/py4e/book/04",draft:!1,tags:[],version:"current",frontMatter:{title:"04-functions"},sidebar:"tutorialSidebar",previous:{title:"02-conditional",permalink:"/docs/curriculum-resource/py4e/book/03"},next:{title:"05-iterations",permalink:"/docs/curriculum-resource/py4e/book/05"}},s={},u=[{value:"Function calls",id:"function-calls",level:2},{value:"Built-in functions",id:"built-in-functions",level:2},{value:"Type conversion functions",id:"type-conversion-functions",level:2},{value:"Math functions",id:"math-functions",level:2},{value:"Random numbers",id:"random-numbers",level:2},{value:"Adding new functions",id:"adding-new-functions",level:2},{value:"Definitions and uses",id:"definitions-and-uses",level:2},{value:"Flow of execution",id:"flow-of-execution",level:2},{value:"Parameters and arguments",id:"parameters-and-arguments",level:2},{value:"Fruitful functions and void functions",id:"fruitful-functions-and-void-functions",level:2},{value:"Why functions?",id:"why-functions",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Exercises",id:"exercises",level:2}],p={toc:u},c="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"functions"},"Functions"),(0,o.kt)("h2",{id:"function-calls"},"Function calls"),(0,o.kt)("p",null,"In the context of programming, a ",(0,o.kt)("em",{parentName:"p"},"function")," is a named\nsequence of statements that performs a computation. When you define a\nfunction, you specify the name and the sequence of statements. Later,\nyou can \u201ccall\u201d the function by name. We have already seen one example of\na ",(0,o.kt)("em",{parentName:"p"},"function call"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> type(32)\n<class 'int'>\n")),(0,o.kt)("p",null,"The name of the function is ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),". The expression in\nparentheses is called the ",(0,o.kt)("em",{parentName:"p"},"argument")," of the function. The\nargument is a value or variable that we are passing into the function as\ninput to the function. The result, for the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," function,\nis the type of the argument."),(0,o.kt)("p",null,"It is common to say that a function \u201ctakes\u201d an argument and \u201creturns\u201d\na result. The result is called the ",(0,o.kt)("em",{parentName:"p"},"return value"),"."),(0,o.kt)("h2",{id:"built-in-functions"},"Built-in functions"),(0,o.kt)("p",null,"Python provides a number of important built-in functions that we can\nuse without needing to provide the function definition. The creators of\nPython wrote a set of functions to solve common problems and included\nthem in Python for us to use."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"max")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"min")," functions give us the\nlargest and smallest values in a list, respectively:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> max('Hello world')\n'w'\n>>> min('Hello world')\n' '\n>>>\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"max")," function tells us the \u201clargest character\u201d in the\nstring (which turns out to be the letter \u201cw\u201d) and the ",(0,o.kt)("inlineCode",{parentName:"p"},"min"),"\nfunction shows us the smallest character (which turns out to be a\nspace)."),(0,o.kt)("p",null,"Another very common built-in function is the ",(0,o.kt)("inlineCode",{parentName:"p"},"len"),"\nfunction which tells us how many items are in its argument. If the\nargument to ",(0,o.kt)("inlineCode",{parentName:"p"},"len")," is a string, it returns the number of\ncharacters in the string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> len('Hello world')\n11\n>>>\n")),(0,o.kt)("p",null,"These functions are not limited to looking at strings. They can\noperate on any set of values, as we will see in later chapters."),(0,o.kt)("p",null,"You should treat the names of built-in functions as reserved words\n(i.e., avoid using \u201cmax\u201d as a variable name)."),(0,o.kt)("h2",{id:"type-conversion-functions"},"Type conversion functions"),(0,o.kt)("p",null,"Python also provides built-in functions that convert values from one\ntype to another. The ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," function takes any value and\nconverts it to an integer, if it can, or complains otherwise:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> int('32')\n32\n>>> int('Hello')\nValueError: invalid literal for int() with base 10: 'Hello'\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"int")," can convert floating-point values to integers, but\nit doesn\u2019t round off; it chops off the fraction part:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> int(3.99999)\n3\n>>> int(-2.3)\n-2\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"float")," converts integers and strings to floating-point\nnumbers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> float(32)\n32.0\n>>> float('3.14159')\n3.14159\n")),(0,o.kt)("p",null,"Finally, ",(0,o.kt)("inlineCode",{parentName:"p"},"str")," converts its argument to a string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> str(32)\n'32'\n>>> str(3.14159)\n'3.14159'\n")),(0,o.kt)("h2",{id:"math-functions"},"Math functions"),(0,o.kt)("p",null,"Python has a ",(0,o.kt)("inlineCode",{parentName:"p"},"math")," module that provides most of the\nfamiliar mathematical functions. Before we can use the module, we have\nto import it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> import math\n")),(0,o.kt)("p",null,"This statement creates a ",(0,o.kt)("em",{parentName:"p"},"module object")," named math. If you\nprint the module object, you get some information about it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print(math)\n<module 'math' (built-in)>\n")),(0,o.kt)("p",null,"The module object contains the functions and variables defined in the\nmodule. To access one of the functions, you have to specify the name of\nthe module and the name of the function, separated by a dot (also known\nas a period). This format is called ",(0,o.kt)("em",{parentName:"p"},"dot notation"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> ratio = signal_power / noise_power\n>>> decibels = 10 * math.log10(ratio)\n\n>>> radians = 0.7\n>>> height = math.sin(radians)\n")),(0,o.kt)("p",null,"The first example computes the logarithm base 10 of the\nsignal-to-noise ratio. The math module also provides a function called\n",(0,o.kt)("inlineCode",{parentName:"p"},"log")," that computes logarithms base e."),(0,o.kt)("p",null,"The second example finds the sine of ",(0,o.kt)("inlineCode",{parentName:"p"},"radians"),". The name\nof the variable is a hint that ",(0,o.kt)("inlineCode",{parentName:"p"},"sin")," and the other\ntrigonometric functions ( ",(0,o.kt)("inlineCode",{parentName:"p"},"cos"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"tan"),", etc.) take\narguments in radians. To convert from degrees to radians, divide by 360\nand multiply by 2 ",(0,o.kt)("em",{parentName:"p"},"\u03c0"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> degrees = 45\n>>> radians = degrees / 360.0 * 2 * math.pi\n>>> math.sin(radians)\n0.7071067811865476\n")),(0,o.kt)("p",null,"The expression ",(0,o.kt)("inlineCode",{parentName:"p"},"math.pi")," gets the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"pi"),"\nfrom the math module. The value of this variable is an approximation of\n",(0,o.kt)("em",{parentName:"p"},"\u03c0"),", accurate to about 15\ndigits."),(0,o.kt)("p",null,"If you know your trigonometry, you can check the previous result by\ncomparing it to the square root of two divided by two:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> math.sqrt(2) / 2.0\n0.7071067811865476\n")),(0,o.kt)("h2",{id:"random-numbers"},"Random numbers"),(0,o.kt)("p",null,"Given the same inputs, most computer programs generate the same\noutputs every time, so they are said to be ",(0,o.kt)("em",{parentName:"p"},"deterministic"),".\nDeterminism is usually a good thing, since we expect the same\ncalculation to yield the same result. For some applications, though, we\nwant the computer to be unpredictable. Games are an obvious example, but\nthere are more."),(0,o.kt)("p",null,"Making a program truly nondeterministic turns out to be not so easy,\nbut there are ways to make it at least seem nondeterministic. One of\nthem is to use ",(0,o.kt)("em",{parentName:"p"},"algorithms")," that generate ",(0,o.kt)("em",{parentName:"p"},"pseudorandom"),"\nnumbers. Pseudorandom numbers are not truly random because they are\ngenerated by a deterministic computation, but just by looking at the\nnumbers it is all but impossible to distinguish them from random."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"random")," module provides functions that generate\npseudorandom numbers (which I will simply call \u201crandom\u201d from here\non)."),(0,o.kt)("p",null,"The function ",(0,o.kt)("inlineCode",{parentName:"p"},"random")," returns a random float between 0.0\nand 1.0 (including 0.0 but not 1.0). Each time you call\n",(0,o.kt)("inlineCode",{parentName:"p"},"random"),", you get the next number in a long series. To see a\nsample, run this loop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"import random\n\nfor i in range(10):\n    x = random.random()\n    print(x)\n")),(0,o.kt)("p",null,"This program produces the following list of 10 random numbers between\n0.0 and up to but not including 1.0."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"0.11132867921152356\n0.5950949227890241\n0.04820265884996877\n0.841003109276478\n0.997914947094958\n0.04842330803368111\n0.7416295948208405\n0.510535245390327\n0.27447040171978143\n0.028511805472785867\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 1:")," Run the program on your system and see\nwhat numbers you get. Run the program more than once and see what\nnumbers you get."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"random")," function is only one of many functions that\nhandle random numbers. The function ",(0,o.kt)("inlineCode",{parentName:"p"},"randint")," takes the\nparameters ",(0,o.kt)("inlineCode",{parentName:"p"},"low")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"high"),", and returns an\ninteger between ",(0,o.kt)("inlineCode",{parentName:"p"},"low")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"high")," (including\nboth)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> random.randint(5, 10)\n5\n>>> random.randint(5, 10)\n9\n")),(0,o.kt)("p",null,"To choose an element from a sequence at random, you can use\n",(0,o.kt)("inlineCode",{parentName:"p"},"choice"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> t = [1, 2, 3]\n>>> random.choice(t)\n2\n>>> random.choice(t)\n3\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"random")," module also provides functions to generate\nrandom values from continuous distributions including Gaussian,\nexponential, gamma, and a few more."),(0,o.kt)("h2",{id:"adding-new-functions"},"Adding new functions"),(0,o.kt)("p",null,"So far, we have only been using the functions that come with Python,\nbut it is also possible to add new functions. A ",(0,o.kt)("em",{parentName:"p"},"function"),"\n",(0,o.kt)("em",{parentName:"p"},"definition")," specifies the name of a new function and the sequence of\nstatements that execute when the function is called. Once we define a\nfunction, we can reuse the function over and over throughout our\nprogram."),(0,o.kt)("p",null,"Here is an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def print_lyrics():\n    print(\"I'm a lumberjack, and I'm okay.\")\n    print('I sleep all night and I work all day.')\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"def")," is a keyword that indicates that this is a function\ndefinition. The name of the function is ",(0,o.kt)("inlineCode",{parentName:"p"},"print_lyrics"),". The\nrules for function names are the same as for variable names: letters,\nnumbers and some punctuation marks are legal, but the first character\ncan\u2019t be a number. You can\u2019t use a keyword as the name of a function,\nand you should avoid having a variable and a function with the same\nname."),(0,o.kt)("p",null,"The empty parentheses after the name indicate that this function\ndoesn\u2019t take any arguments. Later we will build functions that take\narguments as their inputs."),(0,o.kt)("p",null,"The first line of the function definition is called the\n",(0,o.kt)("em",{parentName:"p"},"header"),"; the rest is called the ",(0,o.kt)("em",{parentName:"p"},"body"),". The header has to\nend with a colon and the body has to be indented. By convention, the\nindentation is always four spaces. The body can contain any number of\nstatements."),(0,o.kt)("p",null,"If you type a function definition in interactive mode, the\ninterpreter prints ellipses ( ",(0,o.kt)("em",{parentName:"p"},"\u2026"),") to let you know that the\ndefinition isn\u2019t complete:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> def print_lyrics():\n...     print(\"I'm a lumberjack, and I'm okay.\")\n...     print('I sleep all night and I work all day.')\n...\n")),(0,o.kt)("p",null,"To end the function, you have to enter an empty line (this is not\nnecessary in a script)."),(0,o.kt)("p",null,"Defining a function creates a variable with the same name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print(print_lyrics)\n<function print_lyrics at 0xb7e99e9c>\n>>> print(type(print_lyrics))\n<class 'function'>\n")),(0,o.kt)("p",null,"The value of ",(0,o.kt)("inlineCode",{parentName:"p"},"print_lyrics")," is a ",(0,o.kt)("em",{parentName:"p"},"function object"),",\nwhich has type \u201cfunction\u201d."),(0,o.kt)("p",null,"The syntax for calling the new function is the same as for built-in\nfunctions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print_lyrics()\nI'm a lumberjack, and I'm okay.\nI sleep all night and I work all day.\n")),(0,o.kt)("p",null,"Once you have defined a function, you can use it inside another\nfunction. For example, to repeat the previous refrain, we could write a\nfunction called ",(0,o.kt)("inlineCode",{parentName:"p"},"repeat_lyrics"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def repeat_lyrics():\n    print_lyrics()\n    print_lyrics()\n")),(0,o.kt)("p",null,"And then call ",(0,o.kt)("inlineCode",{parentName:"p"},"repeat_lyrics"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> repeat_lyrics()\nI'm a lumberjack, and I'm okay.\nI sleep all night and I work all day.\nI'm a lumberjack, and I'm okay.\nI sleep all night and I work all day.\n")),(0,o.kt)("p",null,"But that\u2019s not really how the song goes."),(0,o.kt)("h2",{id:"definitions-and-uses"},"Definitions and uses"),(0,o.kt)("p",null,"Pulling together the code fragments from the previous section, the\nwhole program looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def print_lyrics():\n    print(\"I'm a lumberjack, and I'm okay.\")\n    print('I sleep all night and I work all day.')\n\ndef repeat_lyrics():\n    print_lyrics()\n    print_lyrics()\n\nrepeat_lyrics()\n\n# Code: https://www.py4e.com/code3/lyrics.py\n")),(0,o.kt)("p",null,"This program has two function definitions: ",(0,o.kt)("inlineCode",{parentName:"p"},"print_lyrics"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"repeat_lyrics"),". Function definitions get executed just\nlike other statements, but the effect is to create function objects. The\nstatements inside the function do not get executed until the function is\ncalled, and the function definition generates no output."),(0,o.kt)("p",null,"As you might expect, you have to create a function before you can\nexecute it. In other words, the function definition has to be executed\nbefore the first time it is called."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 2:")," Move the last line of this program to\nthe top, so the function call appears before the definitions. Run the\nprogram and see what error message you get."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 3:")," Move the function call back to the\nbottom and move the definition of ",(0,o.kt)("inlineCode",{parentName:"p"},"print_lyrics")," after the\ndefinition of ",(0,o.kt)("inlineCode",{parentName:"p"},"repeat_lyrics"),". What happens when you run this\nprogram?"),(0,o.kt)("h2",{id:"flow-of-execution"},"Flow of execution"),(0,o.kt)("p",null,"In order to ensure that a function is defined before its first use,\nyou have to know the order in which statements are executed, which is\ncalled the ",(0,o.kt)("em",{parentName:"p"},"flow of execution"),"."),(0,o.kt)("p",null,"Execution always begins at the first statement of the program.\nStatements are executed one at a time, in order from top to bottom."),(0,o.kt)("p",null,"Function ",(0,o.kt)("em",{parentName:"p"},"definitions")," do not alter the flow of execution of\nthe program, but remember that statements inside the function are not\nexecuted until the function is called."),(0,o.kt)("p",null,"A function call is like a detour in the flow of execution. Instead of\ngoing to the next statement, the flow jumps to the body of the function,\nexecutes all the statements there, and then comes back to pick up where\nit left off."),(0,o.kt)("p",null,"That sounds simple enough, until you remember that one function can\ncall another. While in the middle of one function, the program might\nhave to execute the statements in another function. But while executing\nthat new function, the program might have to execute yet another\nfunction!"),(0,o.kt)("p",null,"Fortunately, Python is good at keeping track of where it is, so each\ntime a function completes, the program picks up where it left off in the\nfunction that called it. When it gets to the end of the program, it\nterminates."),(0,o.kt)("p",null,"What\u2019s the moral of this sordid tale? When you read a program, you\ndon\u2019t always want to read from top to bottom. Sometimes it makes more\nsense if you follow the flow of execution."),(0,o.kt)("h2",{id:"parameters-and-arguments"},"Parameters and arguments"),(0,o.kt)("p",null,"Some of the built-in functions we have seen require arguments. For\nexample, when you call ",(0,o.kt)("inlineCode",{parentName:"p"},"math.sin")," you pass a number as an\nargument. Some functions take more than one argument:\n",(0,o.kt)("inlineCode",{parentName:"p"},"math.pow")," takes two, the base and the exponent."),(0,o.kt)("p",null,"Inside the function, the arguments are assigned to variables called\n",(0,o.kt)("em",{parentName:"p"},"parameters"),". Here is an example of a user-defined function that\ntakes an argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def print_twice(bruce):\n    print(bruce)\n    print(bruce)\n")),(0,o.kt)("p",null,"This function assigns the argument to a parameter named\n",(0,o.kt)("inlineCode",{parentName:"p"},"bruce"),". When the function is called, it prints the value of\nthe parameter (whatever it is) twice."),(0,o.kt)("p",null,"This function works with any value that can be printed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print_twice('Spam')\nSpam\nSpam\n>>> print_twice(17)\n17\n17\n>>> import math\n>>> print_twice(math.pi)\n3.141592653589793\n3.141592653589793\n")),(0,o.kt)("p",null,"The same rules of composition that apply to built-in functions also\napply to user-defined functions, so we can use any kind of expression as\nan argument for ",(0,o.kt)("inlineCode",{parentName:"p"},"print_twice"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print_twice('Spam '*4)\nSpam Spam Spam Spam\nSpam Spam Spam Spam\n>>> print_twice(math.cos(math.pi))\n-1.0\n-1.0\n")),(0,o.kt)("p",null,"The argument is evaluated before the function is called, so in the\nexamples the expressions ",(0,o.kt)("inlineCode",{parentName:"p"},"'Spam '*4")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"math.cos(math.pi)")," are only evaluated once."),(0,o.kt)("p",null,"You can also use a variable as an argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> michael = 'Eric, the half a bee.'\n>>> print_twice(michael)\nEric, the half a bee.\nEric, the half a bee.\n")),(0,o.kt)("p",null,"The name of the variable we pass as an argument\n( ",(0,o.kt)("inlineCode",{parentName:"p"},"michael"),") has nothing to do with the name of the parameter\n( ",(0,o.kt)("inlineCode",{parentName:"p"},"bruce"),"). It doesn\u2019t matter what the value was called back\nhome (in the caller); here in ",(0,o.kt)("inlineCode",{parentName:"p"},"print_twice"),", we call\neverybody ",(0,o.kt)("inlineCode",{parentName:"p"},"bruce"),"."),(0,o.kt)("h2",{id:"fruitful-functions-and-void-functions"},"Fruitful functions and void functions"),(0,o.kt)("p",null,"Some of the functions we are using, such as the math functions, yield\nresults; for lack of a better name, I call them ",(0,o.kt)("em",{parentName:"p"},"fruitful"),"\n",(0,o.kt)("em",{parentName:"p"},"functions"),". Other functions, like ",(0,o.kt)("inlineCode",{parentName:"p"},"print_twice"),", perform\nan action but don\u2019t return a value. They are called ",(0,o.kt)("em",{parentName:"p"},"void"),"\n",(0,o.kt)("em",{parentName:"p"},"functions"),"."),(0,o.kt)("p",null,"When you call a fruitful function, you almost always want to do\nsomething with the result; for example, you might assign it to a\nvariable or use it as part of an expression:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x = math.cos(radians)\ngolden = (math.sqrt(5) + 1) / 2\n")),(0,o.kt)("p",null,"When you call a function in interactive mode, Python displays the\nresult:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> math.sqrt(5)\n2.23606797749979\n")),(0,o.kt)("p",null,"But in a script, if you call a fruitful function and do not store the\nresult of the function in a variable, the return value vanishes into the\nmist!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"math.sqrt(5)\n")),(0,o.kt)("p",null,"This script computes the square root of 5, but since it doesn\u2019t store\nthe result in a variable or display the result, it is not very\nuseful."),(0,o.kt)("p",null,"Void functions might display something on the screen or have some\nother effect, but they don\u2019t have a return value. If you try to assign\nthe result to a variable, you get a special value called\n",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> result = print_twice('Bing')\nBing\nBing\n>>> print(result)\nNone\n")),(0,o.kt)("p",null,"The value ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," is not the same as the string \u201cNone\u201d. It\nis a special value that has its own type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},">>> print(type(None))\n<class 'NoneType'>\n")),(0,o.kt)("p",null,"To return a result from a function, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"return"),"\nstatement in our function. For example, we could make a very simple\nfunction called ",(0,o.kt)("inlineCode",{parentName:"p"},"addtwo")," that adds two numbers together and\nreturns a result."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def addtwo(a, b):\n    added = a + b\n    return added\n\nx = addtwo(3, 5)\nprint(x)\n\n# Code: https://www.py4e.com/code3/addtwo.py\n")),(0,o.kt)("p",null,"When this script executes, the ",(0,o.kt)("inlineCode",{parentName:"p"},"print")," statement will\nprint out \u201c8\u201d because the ",(0,o.kt)("inlineCode",{parentName:"p"},"addtwo")," function was called with 3\nand 5 as arguments. Within the function, the parameters ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"b")," were 3 and 5 respectively. The function computed the\nsum of the two numbers and placed it in the local function variable\nnamed ",(0,o.kt)("inlineCode",{parentName:"p"},"added"),". Then it used the ",(0,o.kt)("inlineCode",{parentName:"p"},"return")," statement\nto send the computed value back to the calling code as the function\nresult, which was assigned to the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," and printed\nout."),(0,o.kt)("h2",{id:"why-functions"},"Why functions?"),(0,o.kt)("p",null,"It may not be clear why it is worth the trouble to divide a program\ninto functions. There are several reasons:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Creating a new function gives you an opportunity to name a group\nof statements, which makes your program easier to read, understand, and\ndebug.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Functions can make a program smaller by eliminating repetitive\ncode. Later, if you make a change, you only have to make it in one\nplace.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Dividing a long program into functions allows you to debug the\nparts one at a time and then assemble them into a working\nwhole.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Well-designed functions are often useful for many programs. Once\nyou write and debug one, you can reuse it."))),(0,o.kt)("p",null,"Throughout the rest of the book, often we will use a function\ndefinition to explain a concept. Part of the skill of creating and using\nfunctions is to have a function properly capture an idea such as \u201cfind\nthe smallest value in a list of values\u201d. Later we will show you code\nthat finds the smallest in a list of values and we will present it to\nyou as a function named ",(0,o.kt)("inlineCode",{parentName:"p"},"min")," which takes a list of values as\nits argument and returns the smallest value in the list."),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"If you are using a text editor to write your scripts, you might run\ninto problems with spaces and tabs. The best way to avoid these problems\nis to use spaces exclusively (no tabs). Most text editors that know\nabout Python do this by default, but some don\u2019t."),(0,o.kt)("p",null,"Tabs and spaces are usually invisible, which makes them hard to\ndebug, so try to find an editor that manages indentation for you."),(0,o.kt)("p",null,"Also, don\u2019t forget to save your program before you run it. Some\ndevelopment environments do this automatically, but some don\u2019t. In that\ncase, the program you are looking at in the text editor is not the same\nas the program you are running."),(0,o.kt)("p",null,"Debugging can take a long time if you keep running the same incorrect\nprogram over and over!"),(0,o.kt)("p",null,"Make sure that the code you are looking at is the code you are\nrunning. If you\u2019re not sure, put something like\n",(0,o.kt)("inlineCode",{parentName:"p"},'print("hello")')," at the beginning of the program and run it\nagain. If you don\u2019t see ",(0,o.kt)("inlineCode",{parentName:"p"},"hello"),", you\u2019re not running the right\nprogram!"),(0,o.kt)("h2",{id:"glossary"},"Glossary"),(0,o.kt)("p",null,"algorithm\nA general process for solving a category of problems.\nargument\nA value provided to a function when the function is called. This value\nis assigned to the corresponding parameter in the function.\nbody\nThe sequence of statements inside a function definition.\ncomposition\nUsing an expression as part of a larger expression, or a statement as\npart of a larger statement.\ndeterministic\nPertaining to a program that does the same thing each time it runs,\ngiven the same inputs.\ndot notation\nThe syntax for calling a function in another module by specifying the\nmodule name followed by a dot (period) and the function name.\nflow of execution\nThe order in which statements are executed during a program run.\nfruitful function\nA function that returns a value.\nfunction\nA named sequence of statements that performs some useful operation.\nFunctions may or may not take arguments and may or may not produce a\nresult.\nfunction call\nA statement that executes a function. It consists of the function name\nfollowed by an argument list.\nfunction definition\nA statement that creates a new function, specifying its name,\nparameters, and the statements it executes.\nfunction object\nA value created by a function definition. The name of the function is a\nvariable that refers to a function object.\nheader\nThe first line of a function definition.\nimport statement\nA statement that reads a module file and creates a module object.\nmodule object\nA value created by an ",(0,o.kt)("inlineCode",{parentName:"p"},"import")," statement that provides access\nto the data and code defined in a module.\nparameter\nA name used inside a function to refer to the value passed as an\nargument.\npseudorandom\nPertaining to a sequence of numbers that appear to be random, but are\ngenerated by a deterministic program.\nreturn value\nThe result of a function. If a function call is used as an expression,\nthe return value is the value of the expression.\nvoid function\nA function that does not return a value."),(0,o.kt)("h2",{id:"exercises"},"Exercises"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 4:")," What is the purpose of the \u201cdef\u201d keyword\nin Python?"),(0,o.kt)("p",null,"a) It is slang that means \u201cthe following code is really cool\u201d"),(0,o.kt)("p",null,"b) It indicates the start of a function"),(0,o.kt)("p",null,"c) It indicates that the following indented section of code is to be\nstored for later"),(0,o.kt)("p",null,"d) b and c are both true"),(0,o.kt)("p",null,"e) None of the above"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 5:")," What will the following Python program\nprint out?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'def fred():\n   print("Zap")\n\ndef jane():\n   print("ABC")\n\njane()\nfred()\njane()\n')),(0,o.kt)("p",null,"a) Zap ABC jane fred jane"),(0,o.kt)("p",null,"b) Zap ABC Zap"),(0,o.kt)("p",null,"c) ABC Zap jane"),(0,o.kt)("p",null,"d) ABC Zap ABC"),(0,o.kt)("p",null,"e) Zap Zap Zap"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 6:")," Rewrite your pay computation with\ntime-and-a-half for overtime and create a function called\n",(0,o.kt)("inlineCode",{parentName:"p"},"computepay")," which takes two parameters ( ",(0,o.kt)("inlineCode",{parentName:"p"},"hours"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"rate"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter Hours: 45\nEnter Rate: 10\nPay: 475.0\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exercise 7:")," Rewrite the grade program from the\nprevious chapter using a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"computegrade")," that\ntakes a score as its parameter and returns a grade as a string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," Score   Grade\n>= 0.9     A\n>= 0.8     B\n>= 0.7     C\n>= 0.6     D\n < 0.6     F\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter score: 0.95\nA\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter score: perfect\nBad score\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter score: 10.0\nBad score\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter score: 0.75\nC\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter score: 0.5\nF\n")),(0,o.kt)("p",null,"Run the program repeatedly to test the various different values for\ninput."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"If you find a mistake in this book, feel free to send me a fix using\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/csev/py4e/tree/master/book3"},"Github"),"."))}m.isMDXComponent=!0}}]);