"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[60989],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(a),k=i,u=c["".concat(s,".").concat(k)]||c[k]||d[k]||r;return a?n.createElement(u,l(l({ref:t},m),{},{components:a})):n.createElement(u,l({ref:t},m))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},42877:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={title:"Style Guide",description:"61B style guide."},l=void 0,o={unversionedId:"curriculum-resource/cs61b/cs61b_en/guides/style/index",id:"curriculum-resource/cs61b/cs61b_en/guides/style/index",title:"Style Guide",description:"61B style guide.",source:"@site/docs/curriculum-resource/cs61b/cs61b_en/guides/style/index.md",sourceDirName:"curriculum-resource/cs61b/cs61b_en/guides/style",slug:"/curriculum-resource/cs61b/cs61b_en/guides/style/",permalink:"/docs/curriculum-resource/cs61b/cs61b_en/guides/style/",draft:!1,tags:[],version:"current",frontMatter:{title:"Style Guide",description:"61B style guide."},sidebar:"tutorialSidebar",previous:{title:"Project 3 Partnerships",permalink:"/docs/curriculum-resource/cs61b/cs61b_en/guides/partnerships/"},next:{title:"Homework 0A Java Syntax",permalink:"/docs/curriculum-resource/cs61b/cs61b_en/homeworks/hw0/hw0a/"}},s={},p=[{value:"Whitespace",id:"whitespace",level:2},{value:"Indentation",id:"indentation",level:3},{value:"Braces",id:"braces",level:2},{value:"Comments",id:"comments",level:2},{value:"Names",id:"names",level:2},{value:"Imports",id:"imports",level:2},{value:"Assorted Java Style Conventions",id:"assorted-java-style-conventions",level:2},{value:"Avoiding Error-Prone Constructs",id:"avoiding-error-prone-constructs",level:2},{value:"Limits",id:"limits",level:2}],m={toc:p},c="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"We will ",(0,i.kt)("strong",{parentName:"p"},"not reinstate submission tokens")," for failing to check style. Plan and use correct style accordingly! You have been warned.")),(0,i.kt)("p",null,'Some notes on this style guide: we have attempted to bring it as close to the\ndefault IntelliJ style checker as possible. The style checker also includes\nsome "code quality" checks that IntelliJ does not lint.'),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("blockquote",{parentName:"admonition"},(0,i.kt)("p",{parentName:"blockquote"},'It is probably easier to get to know these rules by\nrunning the automated style checker. You can run the style checker in IntelliJ by\nright-clicking on a file in the left sidebar, and selecting "Check Style".\nThis will generate a list of style errors in the selected file.\nBe sure to save or recompile your file before running the style checker again.'))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"screenshot of intellij with right-click menu open",src:a(70914).Z,width:"969",height:"469"})),(0,i.kt)("p",null,"This style guide may also be incomplete. I've attempted to make it as\ncomprehensive as possible, but I may have missed describing some newly added\nrules."),(0,i.kt)("h2",{id:"whitespace"},"Whitespace"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Each file must end with a newline sequence.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Files may not contain horizontal tab characters. Use blanks (spaces) only for\nindentation.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Do NOT put whitespace:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Around the ",(0,i.kt)("inlineCode",{parentName:"li"},"<")," and ",(0,i.kt)("inlineCode",{parentName:"li"},">")," within a generic type designation\n(",(0,i.kt)("inlineCode",{parentName:"li"},"List<Integer>"),", not ",(0,i.kt)("inlineCode",{parentName:"li"},"List <Integer>"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"List< Integer >"),")."),(0,i.kt)("li",{parentName:"ul"},"After the prefix operators ",(0,i.kt)("inlineCode",{parentName:"li"},"!"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"--"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"++"),", unary ",(0,i.kt)("inlineCode",{parentName:"li"},"-"),", or unary ",(0,i.kt)("inlineCode",{parentName:"li"},"+"),"."),(0,i.kt)("li",{parentName:"ul"},"Before the tokens ",(0,i.kt)("inlineCode",{parentName:"li"},";")," or the suffix operators ",(0,i.kt)("inlineCode",{parentName:"li"},"--")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"++"),"."),(0,i.kt)("li",{parentName:"ul"},"After ",(0,i.kt)("inlineCode",{parentName:"li"},"(")," or before ",(0,i.kt)("inlineCode",{parentName:"li"},")"),"."),(0,i.kt)("li",{parentName:"ul"},"After ",(0,i.kt)("inlineCode",{parentName:"li"},".")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"DO put whitespace:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"After ",(0,i.kt)("inlineCode",{parentName:"li"},";"),", ",(0,i.kt)("inlineCode",{parentName:"li"},","),", or type casts (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"(String) x"),", not ",(0,i.kt)("inlineCode",{parentName:"li"},"(String)x"),")."),(0,i.kt)("li",{parentName:"ul"},"Around binary operators (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"+"),") and comparison operators."),(0,i.kt)("li",{parentName:"ul"},"Around assignment operators (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"="),", ",(0,i.kt)("inlineCode",{parentName:"li"},"+="),")."),(0,i.kt)("li",{parentName:"ul"},"Around ",(0,i.kt)("inlineCode",{parentName:"li"},"?")," and ",(0,i.kt)("inlineCode",{parentName:"li"},":")," in the ternary conditional operator (",(0,i.kt)("inlineCode",{parentName:"li"},"x > 0 ? x : -x"),")."),(0,i.kt)("li",{parentName:"ul"},"Around the keywords ",(0,i.kt)("inlineCode",{parentName:"li"},"assert"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"catch"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"do"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"else"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"finally"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"for"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"return"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"try"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"while"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In general, if you need to use multiple lines for a single statement, break\n(insert newlines in) lines before an operator, as in"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"... + 20 * X\n    + Y;\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Do not separate a method name from the ",(0,i.kt)("inlineCode",{parentName:"p"},"(")," in a method call with blanks.\nHowever, you may separate them with a newline followed by blanks (for\nindentation) on long lines."))),(0,i.kt)("h3",{id:"indentation"},"Indentation"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The basic indentation step is 4 spaces.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Indent code by the basic indentation step for each block level (blocks are\ngenerally enclosed in ",(0,i.kt)("inlineCode",{parentName:"p"},"{")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"}"),"), as in"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"if (x > 0) {\n   r = -x;\n} else {\n   r = x;\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Indent ",(0,i.kt)("inlineCode",{parentName:"p"},"case")," labels an indent past their enclosing ",(0,i.kt)("inlineCode",{parentName:"p"},"switch"),", as in"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"switch (op) {\n   case '+':\n         addOpnds(x, y);\n         break;\n   default:\n         ERROR();\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Indent continued lines by the basic indentation step."))),(0,i.kt)("h2",{id:"braces"},"Braces"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"{")," ",(0,i.kt)("inlineCode",{parentName:"p"},"}")," braces around the statements of all ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"do"),", and\n'for' statements.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Place a ",(0,i.kt)("inlineCode",{parentName:"p"},"}")," brace on the same line as a following ",(0,i.kt)("inlineCode",{parentName:"p"},"else"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"finally"),",\nor ",(0,i.kt)("inlineCode",{parentName:"p"},"catch"),", as in"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"if (x > 0) {\n   y = -x;\n} else {\n   y = x;\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Put the ",(0,i.kt)("inlineCode",{parentName:"p"},"{")," that opens a block at the end of a line. Generally, it goes\nat the end of the ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"switch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"do"),", method header, or\nclass header that contains it. If line length forces it to the\nnext line, do not indent it, and put it alone on the line."))),(0,i.kt)("h2",{id:"comments"},"Comments"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Methods should have javadoc comments explaining the behavior, parameters\n(using @param tags or otherwise), and return type.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Methods that return non-void values must describe them in their Javadoc\ncomment either with a "@return" tag or in a phrase in running text that\ncontains the word "return", "returning", or "returns".')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Each Javadoc comment must start with a properly formed sentence, starting\nwith a capital letter and ending with a period."))),(0,i.kt)("h2",{id:"names"},"Names"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Names of static final constants must be in all capitals (e.g., RED,\nDEFAULT_NAME).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Names of parameters, local variables, and methods must start with a\nlower-case letter, or consist of a single, upper-case letter.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Names of types (classes), including type parameters, must start with\na capital letter.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Names of packages must start with a lower-case letter.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Names of instance variables and non-final class (static) variables must\nstart with either a lower-case letter or "',"_",'".'))),(0,i.kt)("h2",{id:"imports"},"Imports"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Do not import the same class or static member twice.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Do not import classes or members that you do not use."))),(0,i.kt)("h2",{id:"assorted-java-style-conventions"},"Assorted Java Style Conventions"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Write array types with the "[]" after the element-type name, not after\nthe declarator. Write "String[] names", not "String names[]".')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Write any modifiers for methods, classes, or fields in the following order:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"public, protected, or private."),(0,i.kt)("li",{parentName:"ol"},"abstract or static."),(0,i.kt)("li",{parentName:"ol"},"final, transient, or volatile."),(0,i.kt)("li",{parentName:"ol"},"synchronized."),(0,i.kt)("li",{parentName:"ol"},"native."),(0,i.kt)("li",{parentName:"ol"},"strictfp."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Do not explicitly modify methods, fields, or classes where the modification\nis redundant:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},'Do not label methods in interfaces or annotations as "public"\nor "abstract".'),(0,i.kt)("li",{parentName:"ol"},'Do not label fields in interfaces or annotations as "static", "public",\nor "final".'),(0,i.kt)("li",{parentName:"ol"},'Do not label methods in final classes as "final".'),(0,i.kt)("li",{parentName:"ol"},'Do not label nested interfaces "static".'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Do not use empty blocks ('{ }' with only whitespace or comments inside)\nfor control statements. There is one exception: a catch block may consist\nsolely of comments having the form"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/* Ignore EXCEPTIONNAME. */\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Avoid "magic numbers" in code by giving them symbolic names, as in'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public static final int MAX_SIZE = 100;\n")),(0,i.kt)("p",{parentName:"li"},"Exceptions are the numerals -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0.25, 0.5.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Do not try to catch the exceptions Exception, RuntimeError, or Error.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Write "b" rather than "b == true" and "!b" rather than "b == false".')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Replace"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"if (condition) {\n   return true;\n} else {\n   return false;\n}\n")),(0,i.kt)("p",{parentName:"li"},"with just"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"return condition;\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Only static final fields of classes may be public. Other fields must be\nprivate or protected. This applies to nested classes as well.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Classes that have only static methods and fields must not have a public\n(or defaulted) constructor.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Classes that have only private constructors must be declared "final".'))),(0,i.kt)("h2",{id:"avoiding-error-prone-constructs"},"Avoiding Error-Prone Constructs"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'If a class overrides "equals", it must also override "hashCode". This will\napply after we learn about ',(0,i.kt)("inlineCode",{parentName:"p"},"hashCode"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Local variables and parameters must not hide or shadow field names. The preferred\nway to handle, e.g., getter/setter methods that simply control a field\nis to prefix the field name with "',"_",'", as in'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public double getWidth() {\n   return _width;\n}\n\npublic void setWidth(double width) {\n   _width = width;\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Do not use nested assignments, such as "if ((x = next()) != null) ...".\nAlthough this can be useful in C, it is almost never necessary in Java.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Include a "default" case in every "switch" statement.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'End every arm of a "switch" statement either with a "break" statement\nor a comment of the form'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/* fall through */\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Do not compare String literals with "==". Write'),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'if (x.equals("something"))\n')),(0,i.kt)("p",{parentName:"li"},"and not"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},'if (x == "something")\n')),(0,i.kt)("p",{parentName:"li"},'There are cases where you really want to use "==", but you are unlikely to\nencounter them in this class.'))),(0,i.kt)("h2",{id:"limits"},"Limits"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"No file may be longer than 2000 lines.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"No line may be longer than 120 characters.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"No method may be longer than 80 lines.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"No method may have more than 8 parameters.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Every file must contain exactly one outer class (nested classes are OK)."))))}d.isMDXComponent=!0},70914:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/intellij_style_checker-e9ccc8beae84c0c6872221ab5adb0fa2.png"}}]);