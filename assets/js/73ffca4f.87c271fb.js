"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[97140],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20027:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={title:"Lab 8 Solutions"},i="Lab 8 Solutions | CS 61A Spring 2024",o={unversionedId:"curriculum-resource/cs61a/cs61a_en/lab/sol-lab08",id:"curriculum-resource/cs61a/cs61a_en/lab/sol-lab08",title:"Lab 8 Solutions",description:"Lab 8 Solutions",source:"@site/docs/curriculum-resource/cs61a/cs61a_en/lab/sol-lab08.md",sourceDirName:"curriculum-resource/cs61a/cs61a_en/lab",slug:"/curriculum-resource/cs61a/cs61a_en/lab/sol-lab08",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/lab/sol-lab08",draft:!1,tags:[],version:"current",frontMatter:{title:"Lab 8 Solutions"},sidebar:"tutorialSidebar",previous:{title:"Lab 7 Solutions",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/lab/sol-lab07"},next:{title:"Lab 9 Solutions",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/lab/sol-lab09"}},s={},p=[{value:"Lab 8 Solutions",id:"lab-8-solutions",level:2},{value:"Solution Files",id:"solution-files",level:2},{value:"Topics",id:"topics",level:2},{value:"Mutable Trees",id:"mutable-trees",level:2},{value:"Required Questions",id:"required-questions",level:2},{value:"Getting Started Videos",id:"getting-started-videos",level:2},{value:"Mutable Trees",id:"mutable-trees-1",level:2},{value:"Q1: WWPD: Trees",id:"q1-wwpd-trees",level:3},{value:"Q2: Cumulative Mul",id:"q2-cumulative-mul",level:3},{value:"Q3: Prune Small",id:"q3-prune-small",level:3},{value:"Check Your Score Locally",id:"check-your-score-locally",level:2},{value:"Submit",id:"submit",level:2},{value:"Optional Questions",id:"optional-questions",level:2},{value:"Q4: Delete",id:"q4-delete",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...l}=e;return(0,r.kt)(d,(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lab-8-solutions--cs-61a-spring-2024"},"Lab 8 Solutions | CS 61A Spring 2024"),(0,r.kt)("h2",{id:"lab-8-solutions"},"Lab 8 Solutions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{target:"_blank",href:n(69504).Z},"lab08.zip"))),(0,r.kt)("h2",{id:"solution-files"},"Solution Files"),(0,r.kt)("h2",{id:"topics"},"Topics"),(0,r.kt)("p",null,"Consult this section if you need a refresher on the material for this lab. It's okay to skip directly to ",(0,r.kt)("a",{parentName:"p",href:"#required-questions"},"the questions")," and refer back here should you get stuck."),(0,r.kt)("h2",{id:"mutable-trees"},"Mutable Trees"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," instance has two instance attributes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"label")," is the value stored at the root of the tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"branches")," is a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"Tree")," instances that hold the labels in the rest of the tree.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," class (with its ",(0,r.kt)("inlineCode",{parentName:"p"},"__repr__")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"__str__")," methods omitted) is defined as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'class Tree:\n    """\n    >>> t = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])\n    >>> t.label\n    3\n    >>> t.branches[0].label\n    2\n    >>> t.branches[1].is_leaf()\n    True\n    """\n    def __init__(self, label, branches=[]):\n        for b in branches:\n            assert isinstance(b, Tree)\n        self.label = label\n        self.branches = list(branches)\n\n    def is_leaf(self):\n        return not self.branches\n')),(0,r.kt)("p",null,"To construct a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," instance from a label ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," (any value) and a list of branches ",(0,r.kt)("inlineCode",{parentName:"p"},"bs")," (a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," instances) and give it the name ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),", write ",(0,r.kt)("inlineCode",{parentName:"p"},"t = Tree(x, bs)"),"."),(0,r.kt)("p",null,"For a tree ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Its root label can be any value, and ",(0,r.kt)("inlineCode",{parentName:"li"},"t.label")," evaluates to it."),(0,r.kt)("li",{parentName:"ul"},"Its branches are always ",(0,r.kt)("inlineCode",{parentName:"li"},"Tree")," instances, and ",(0,r.kt)("inlineCode",{parentName:"li"},"t.branches")," evaluates to the ",(0,r.kt)("strong",{parentName:"li"},"list")," of its branches."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"t.is_leaf()")," returns ",(0,r.kt)("inlineCode",{parentName:"li"},"True")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"t.branches")," is empty and ",(0,r.kt)("inlineCode",{parentName:"li"},"False")," otherwise."),(0,r.kt)("li",{parentName:"ul"},"To construct a leaf with label ",(0,r.kt)("inlineCode",{parentName:"li"},"x"),", write ",(0,r.kt)("inlineCode",{parentName:"li"},"Tree(x)"),".")),(0,r.kt)("p",null,"Displaying a tree ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"repr(t)")," returns a Python expression that evaluates to an equivalent tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str(t)")," returns one line for each label indented once more than its parent with children below their parents.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t = Tree(3, [Tree(1, [Tree(4), Tree(1)]), Tree(5, [Tree(9)])])\n\n>>> t         # displays the contents of repr(t)\nTree(3, [Tree(1, [Tree(4), Tree(1)]), Tree(5, [Tree(9)])])\n\n>>> print(t)  # displays the contents of str(t)\n3\n  1\n    4\n    1\n  5\n    9\n")),(0,r.kt)("p",null,"Changing (also known as mutating) a tree ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"t.label = y")," changes the root label of ",(0,r.kt)("inlineCode",{parentName:"li"},"t")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," (any value)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"t.branches = ns")," changes the branches of ",(0,r.kt)("inlineCode",{parentName:"li"},"t")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"ns")," (a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"Tree")," instances)."),(0,r.kt)("li",{parentName:"ul"},"Mutation of ",(0,r.kt)("inlineCode",{parentName:"li"},"t.branches")," will change ",(0,r.kt)("inlineCode",{parentName:"li"},"t"),". For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"t.branches.append(Tree(y))")," will add a leaf labeled ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," as the right-most branch."),(0,r.kt)("li",{parentName:"ul"},"Mutation of any branch in ",(0,r.kt)("inlineCode",{parentName:"li"},"t")," will change ",(0,r.kt)("inlineCode",{parentName:"li"},"t"),". For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"t.branches[0].label = y")," will change the root label of the left-most branch to ",(0,r.kt)("inlineCode",{parentName:"li"},"y"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t.label = 3.0\n>>> t.branches[1].label = 5.0\n>>> t.branches.append(Tree(2, [Tree(6)]))\n>>> print(t)\n3.0\n  1\n    4\n    1\n  5.0\n    9\n  2\n    6\n")),(0,r.kt)("p",null,"Here is a summary of the differences between the tree data abstraction implemented as a functional abstraction vs. implemented as a class:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"-"),(0,r.kt)("th",{parentName:"tr",align:null},"Tree constructor and selector functions"),(0,r.kt)("th",{parentName:"tr",align:null},"Tree class"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Constructing a tree"),(0,r.kt)("td",{parentName:"tr",align:null},"To construct a tree given a ",(0,r.kt)("inlineCode",{parentName:"td"},"label")," and a list of ",(0,r.kt)("inlineCode",{parentName:"td"},"branches"),", we call ",(0,r.kt)("inlineCode",{parentName:"td"},"tree(label, branches)")),(0,r.kt)("td",{parentName:"tr",align:null},"To construct a tree object given a ",(0,r.kt)("inlineCode",{parentName:"td"},"label")," and a list of ",(0,r.kt)("inlineCode",{parentName:"td"},"branches"),", we call ",(0,r.kt)("inlineCode",{parentName:"td"},"Tree(label, branches)")," (which calls the ",(0,r.kt)("inlineCode",{parentName:"td"},"Tree.__init__")," method).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Label and branches"),(0,r.kt)("td",{parentName:"tr",align:null},"To get the label or branches of a tree ",(0,r.kt)("inlineCode",{parentName:"td"},"t"),", we call ",(0,r.kt)("inlineCode",{parentName:"td"},"label(t)")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"branches(t)")," respectively"),(0,r.kt)("td",{parentName:"tr",align:null},"To get the label or branches of a tree ",(0,r.kt)("inlineCode",{parentName:"td"},"t"),", we access the instance attributes ",(0,r.kt)("inlineCode",{parentName:"td"},"t.label")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"t.branches")," respectively.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mutability"),(0,r.kt)("td",{parentName:"tr",align:null},"The functional tree data abstraction is immutable (without violating its abstraction barrier) because we cannot assign values to call expressions"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"label")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"branches")," attributes of a ",(0,r.kt)("inlineCode",{parentName:"td"},"Tree")," instance can be reassigned, mutating the tree.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Checking if a tree is a leaf"),(0,r.kt)("td",{parentName:"tr",align:null},"To check whether a tree ",(0,r.kt)("inlineCode",{parentName:"td"},"t")," is a leaf, we call the function ",(0,r.kt)("inlineCode",{parentName:"td"},"is_leaf(t)")),(0,r.kt)("td",{parentName:"tr",align:null},"To check whether a tree ",(0,r.kt)("inlineCode",{parentName:"td"},"t")," is a leaf, we call the method ",(0,r.kt)("inlineCode",{parentName:"td"},"t.is_leaf()"),". This method can only be called on ",(0,r.kt)("inlineCode",{parentName:"td"},"Tree")," objects.")))),(0,r.kt)("h2",{id:"required-questions"},"Required Questions"),(0,r.kt)("h2",{id:"getting-started-videos"},"Getting Started Videos"),(0,r.kt)("p",null,"These videos may provide some helpful direction for tackling the coding problems on this assignment."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"To see these videos, you should be logged into your berkeley.edu email.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://youtu.be/playlist?list=PLx38hZJ5RLZc8kuYZU6K1LgdeO_LSK8sL"},"YouTube link")),(0,r.kt)("h2",{id:"mutable-trees-1"},"Mutable Trees"),(0,r.kt)("h3",{id:"q1-wwpd-trees"},"Q1: WWPD: Trees"),(0,r.kt)("p",null,"Read over the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," class in ",(0,r.kt)("inlineCode",{parentName:"p"},"lab08.py"),". Make sure you understand the doctests."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'Use Ok to test your knowledge with the following "What Would Python Display?" questions:'),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre"},"python3 ok -q trees-wwpd -u\n")),(0,r.kt)("p",{parentName:"blockquote"},"Enter ",(0,r.kt)("inlineCode",{parentName:"p"},"Function")," if you believe the answer is ",(0,r.kt)("inlineCode",{parentName:"p"},"<function ...>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," if it errors, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing")," if nothing is displayed. Recall that ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," instances will be displayed the same way they are constructed.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">>> t = Tree(1, Tree(2))\n______Error\n>>> t = Tree(1, [Tree(2)])\n>>> t.label\n______1\n>>> t.branches[0]\n______Tree(2)\n>>> t.branches[0].label\n______2\n>>> t.label = t.branches[0].label\n>>> t\n______Tree(2, [Tree(2)])\n>>> t.branches.append(Tree(4, [Tree(8)]))\n>>> len(t.branches)\n______2\n>>> t.branches[0]\n______Tree(2)\n>>> t.branches[1]\n______Tree(4, [Tree(8)])\n")),(0,r.kt)("h3",{id:"q2-cumulative-mul"},"Q2: Cumulative Mul"),(0,r.kt)("p",null,"Write a function ",(0,r.kt)("inlineCode",{parentName:"p"},"cumulative_mul")," that mutates the Tree ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," so that each node's label is replaced by the product of its label and the labels of all its descendents."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Hint"),": Be careful of the order in which you mutate the current node's label and process its subtrees; which one should come first?")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'def cumulative_mul(t):\n    """Mutates t so that each node\'s label becomes the product of its own\n    label and all labels in the corresponding subtree rooted at t.\n\n    >>> t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])\n    >>> cumulative_mul(t)\n    >>> t\n    Tree(105, [Tree(15, [Tree(5)]), Tree(7)])\n    >>> otherTree = Tree(2, [Tree(1, [Tree(3), Tree(4), Tree(5)]), Tree(6, [Tree(7)])])\n    >>> cumulative_mul(otherTree)\n    >>> otherTree\n    Tree(5040, [Tree(60, [Tree(3), Tree(4), Tree(5)]), Tree(42, [Tree(7)])])\n    """\nfor b in t.branches:\n        cumulative_mul(b)\n    total = t.label\n    for b in t.branches:\n        total *= b.label\n    t.label = total\n\n# Alternate solution using only one loop\ndef cumulative_mul(t):\n    for b in t.branches:\n        cumulative_mul(b)\n        t.label *= b.label\n')),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q cumulative_mul\n")),(0,r.kt)("h3",{id:"q3-prune-small"},"Q3: Prune Small"),(0,r.kt)("p",null,"Removing some nodes from a tree is called ",(0,r.kt)("em",{parentName:"p"},"pruning")," the tree."),(0,r.kt)("p",null,"Complete the function ",(0,r.kt)("inlineCode",{parentName:"p"},"prune_small")," that takes in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," and a number ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),". For each node with more than ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," branches, keep only the ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," branches with the smallest labels and remove (",(0,r.kt)("em",{parentName:"p"},"prune"),") the rest."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Hint"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"max")," function takes in an ",(0,r.kt)("inlineCode",{parentName:"p"},"iterable")," as well as an optional ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," argument (which takes in a one-argument function). For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"max([-7, 2, -1], key=abs)")," would return ",(0,r.kt)("inlineCode",{parentName:"p"},"-7")," since ",(0,r.kt)("inlineCode",{parentName:"p"},"abs(-7)")," is greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"abs(2)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"abs(-1)"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'def prune_small(t, n):\n    """Prune the tree mutatively, keeping only the n branches\n    of each node with the smallest labels.\n\n    >>> t1 = Tree(6)\n    >>> prune_small(t1, 2)\n    >>> t1\n    Tree(6)\n    >>> t2 = Tree(6, [Tree(3), Tree(4)])\n    >>> prune_small(t2, 1)\n    >>> t2\n    Tree(6, [Tree(3)])\n    >>> t3 = Tree(6, [Tree(1), Tree(3, [Tree(1), Tree(2), Tree(3)]), Tree(5, [Tree(3), Tree(4)])])\n    >>> prune_small(t3, 2)\n    >>> t3\n    Tree(6, [Tree(1), Tree(3, [Tree(1), Tree(2)])])\n    """\nwhile len(t.branches) > n:        largest = max(t.branches, key=lambda x: x.label)        t.branches.remove(largest)for b in t.branches:        prune_small(b, n)\n')),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q prune_small\n")),(0,r.kt)("h2",{id:"check-your-score-locally"},"Check Your Score Locally"),(0,r.kt)("p",null,"You can locally check your score on each question of this assignment by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok --score\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This does NOT submit the assignment!")," When you are satisfied with your score, submit the assignment to Gradescope to receive credit for it."),(0,r.kt)("h2",{id:"submit"},"Submit"),(0,r.kt)("p",null,"Submit this assignment by uploading any files you've edited ",(0,r.kt)("strong",{parentName:"p"},"to the appropriate Gradescope assignment.")," ",(0,r.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00/#submit-with-gradescope"},"Lab 00")," has detailed instructions."),(0,r.kt)("p",null,"In addition, all students who are ",(0,r.kt)("strong",{parentName:"p"},"not")," in the mega lab must complete this ",(0,r.kt)("a",{parentName:"p",href:"https://go.cs61a.org/lab-att"},"attendance form"),". Submit this form each week, whether you attend lab or missed it for a good reason. The attendance form is not required for mega section students."),(0,r.kt)("h2",{id:"optional-questions"},"Optional Questions"),(0,r.kt)("h3",{id:"q4-delete"},"Q4: Delete"),(0,r.kt)("p",null,"Implement ",(0,r.kt)("inlineCode",{parentName:"p"},"delete"),", which takes a Tree ",(0,r.kt)("inlineCode",{parentName:"p"},"t")," and removes all non-root nodes labeled ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),". The parent of each remaining node is its nearest ancestor that was not removed. The root node is never removed, even if its label is ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'def delete(t, x):\n    """Remove all nodes labeled x below the root within Tree t. When a non-leaf\n    node is deleted, the deleted node\'s children become children of its parent.\n\n    The root node will never be removed.\n\n    >>> t = Tree(3, [Tree(2, [Tree(2), Tree(2)]), Tree(2), Tree(2, [Tree(2, [Tree(2), Tree(2)])])])\n    >>> delete(t, 2)\n    >>> t\n    Tree(3)\n    >>> t = Tree(1, [Tree(2, [Tree(4, [Tree(2)]), Tree(5)]), Tree(3, [Tree(6), Tree(2)]), Tree(4)])\n    >>> delete(t, 2)\n    >>> t\n    Tree(1, [Tree(4), Tree(5), Tree(3, [Tree(6)]), Tree(4)])\n    >>> t = Tree(1, [Tree(2, [Tree(4), Tree(5)]), Tree(3, [Tree(6), Tree(2)]), Tree(2, [Tree(6),  Tree(2), Tree(7), Tree(8)]), Tree(4)])\n    >>> delete(t, 2)\n    >>> t\n    Tree(1, [Tree(4), Tree(5), Tree(3, [Tree(6)]), Tree(6), Tree(7), Tree(8), Tree(4)])\n    """\n    new_branches = []\nfor b in t.branches:        delete(b, x)        if b.label == x:\n            new_branches.extend(b.branches)        else:\n            new_branches.append(b)    t.branches = new_branches\n')),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q delete\n")))}c.isMDXComponent=!0},69504:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/lab08-83d714531d2e61b92e633daa61442a22.zip"}}]);