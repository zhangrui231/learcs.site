"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[795],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>m});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(o),h=n,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||a;return o?r.createElement(m,l(l({ref:t},u),{},{components:o})):r.createElement(m,l({ref:t},u))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,l=new Array(a);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<a;p++)l[p]=o[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,o)}h.displayName="MDXCreateElement"},7856:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=o(7462),n=(o(7294),o(3905));const a={sidebar_position:1,description:"cs50x problem set hello",title:"Hello"},l="Hello - CS50x 2023",i={unversionedId:"curriculum-resource/cs50x/lecture1/problem set/hello",id:"curriculum-resource/cs50x/lecture1/problem set/hello",title:"Hello",description:"cs50x problem set hello",source:"@site/docs/curriculum-resource/cs50x/lecture1/problem set/hello.md",sourceDirName:"curriculum-resource/cs50x/lecture1/problem set",slug:"/curriculum-resource/cs50x/lecture1/problem set/hello",permalink:"/docs/curriculum-resource/cs50x/lecture1/problem set/hello",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"cs50x problem set hello",title:"Hello"},sidebar:"tutorialSidebar",previous:{title:"Problem Set",permalink:"/docs/curriculum-resource/cs50x/lecture1/problem set/"},next:{title:"Mario Less",permalink:"/docs/curriculum-resource/cs50x/lecture1/problem set/Mario Less"}},s={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Listing Files",id:"listing-files",level:2},{value:"Compiling Programs",id:"compiling-programs",level:2},{value:"Getting User Input",id:"getting-user-input",level:2},{value:"Hints",id:"hints",level:3},{value:"Don\u2019t recall how to prompt the user for their name?",id:"dont-recall-how-to-prompt-the-user-for-their-name",level:4},{value:"Don\u2019t recall how to format a string?",id:"dont-recall-how-to-format-a-string",level:4},{value:"Use of undeclared identifier?",id:"use-of-undeclared-identifier",level:4},{value:"How to Test Your Code",id:"how-to-test-your-code",level:3},{value:"How to Submit",id:"how-to-submit",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...o}=e;return(0,n.kt)(c,(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"hello---cs50x-2023"},"Hello - CS50x 2023"),(0,n.kt)("h2",{id:"getting-started"},(0,n.kt)("a",{parentName:"h2",href:"#getting-started"},"Getting Started")),(0,n.kt)("p",null,"Recall that Visual Studio Code (aka VS Code) is a popular \u201cintegrated development environment\u201d (IDE) via which you can write code. So that you don\u2019t have to download, install, and configure your own copy of VS Code, we\u2019ll use a cloud-based version instead that has everything you\u2019ll need pre-installed."),(0,n.kt)("p",null,"Log into ",(0,n.kt)("a",{parentName:"p",href:"https://cs50.dev/"},"cs50.dev")," using your GitHub account. Once your \u201ccodespace\u201d loads, you should see that, by default, VS Code is divided into three regions. Toward the top of VS Code is your \u201ctext editor\u201d, where you\u2019ll write all of your programs. Toward the bottom of is a \u201cterminal window\u201d, a command-line interface (CLI) that allows you to explore your codespace\u2019s files and directories (aka folders), compile code, and run programs. And on the left is your file \u201cexplorer,\u201d a graphical user interface (GUI) via which you can also explore your codespace\u2019s files and directories."),(0,n.kt)("p",null,"Start by clicking inside your terminal window, then execute ",(0,n.kt)("inlineCode",{parentName:"p"},"cd")," by itself. You should find that its \u201cprompt\u201d resembles the below."),(0,n.kt)("p",null,"Click inside of that terminal window and then type"),(0,n.kt)("p",null,"followed by Enter in order to make a directory called ",(0,n.kt)("inlineCode",{parentName:"p"},"hello")," in your codespace. Take care not to overlook the space between ",(0,n.kt)("inlineCode",{parentName:"p"},"mkdir")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"hello")," or any other character for that matter!"),(0,n.kt)("p",null,"Here on out, to execute (i.e., run) a command means to type it into a terminal window and then hit Enter. Commands are \u201ccase-sensitive,\u201d so be sure not to type in uppercase when you mean lowercase or vice versa."),(0,n.kt)("p",null,"Now execute"),(0,n.kt)("p",null,"to move yourself into (i.e., open) that directory. Your prompt should now resemble the below."),(0,n.kt)("p",null,"If not, retrace your steps and see if you can determine where you went wrong!"),(0,n.kt)("p",null,"Shall we have you write your first program? Execute"),(0,n.kt)("p",null,"to create a new file called ",(0,n.kt)("inlineCode",{parentName:"p"},"hello.c"),", which should open automatically in your codespace\u2019s text editor. As soon as you save the file with command-S (on macOS) or control-S (on Windows), it should also appear in your codespace\u2019s explorer."),(0,n.kt)("p",null,"Proceed to write your first program by typing precisely these lines into ",(0,n.kt)("inlineCode",{parentName:"p"},"hello.c"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'#include <stdio.h>\n\nint main(void)\n{\n    printf("hello, world\\n");\n}\n\n')),(0,n.kt)("p",null,"Notice how VS Code adds \u201csyntax highlighting\u201d (i.e., color) as you type, though VS Code\u2019s choice of colors might differ from this problem set\u2019s. Those colors aren\u2019t actually saved inside of the file itself; they\u2019re just added by VS Code to make certain syntax stand out. Had you not saved the file as ",(0,n.kt)("inlineCode",{parentName:"p"},"hello.c")," from the start, VS Code wouldn\u2019t know (per the filename\u2019s extension) that you\u2019re writing C code, in which case those colors would be absent."),(0,n.kt)("h2",{id:"listing-files"},(0,n.kt)("a",{parentName:"h2",href:"#listing-files"},"Listing Files")),(0,n.kt)("p",null,"Next, in your terminal window, immediately to the right of the prompt (",(0,n.kt)("inlineCode",{parentName:"p"},"hello/ $"),"), execute"),(0,n.kt)("p",null,"You should see just ",(0,n.kt)("inlineCode",{parentName:"p"},"hello.c"),"? That\u2019s because you\u2019ve just listed the files in your ",(0,n.kt)("inlineCode",{parentName:"p"},"hello")," folder. In particular, you executed a command called ",(0,n.kt)("inlineCode",{parentName:"p"},"ls"),", which is shorthand for \u201clist.\u201d (It\u2019s such a frequently used command that its authors called it just ",(0,n.kt)("inlineCode",{parentName:"p"},"ls")," to save keystrokes.) Make sense?"),(0,n.kt)("h2",{id:"compiling-programs"},(0,n.kt)("a",{parentName:"h2",href:"#compiling-programs"},"Compiling Programs")),(0,n.kt)("p",null,"Now, before we can execute the ",(0,n.kt)("inlineCode",{parentName:"p"},"hello.c")," program, recall that we must ",(0,n.kt)("em",{parentName:"p"},"compile")," it with a ",(0,n.kt)("em",{parentName:"p"},"compiler"),", translating it from ",(0,n.kt)("em",{parentName:"p"},"source code")," into ",(0,n.kt)("em",{parentName:"p"},"machine code")," (i.e., zeroes and ones). Execute the command below to do just that:"),(0,n.kt)("p",null,"And then execute this one again:"),(0,n.kt)("p",null,"This time, you should see not only ",(0,n.kt)("inlineCode",{parentName:"p"},"hello.c")," but ",(0,n.kt)("inlineCode",{parentName:"p"},"hello")," listed as well? You\u2019ve now translated the source code in ",(0,n.kt)("inlineCode",{parentName:"p"},"hello.c")," into machine code in ",(0,n.kt)("inlineCode",{parentName:"p"},"hello"),"."),(0,n.kt)("p",null,"Now execute the program itself by executing the below."),(0,n.kt)("p",null,"Hello, world, indeed!"),(0,n.kt)("h2",{id:"getting-user-input"},(0,n.kt)("a",{parentName:"h2",href:"#getting-user-input"},"Getting User Input")),(0,n.kt)("p",null,"Suffice it to say, no matter how you compile or execute this program, it only ever prints ",(0,n.kt)("inlineCode",{parentName:"p"},"hello, world"),". Let\u2019s personalize it a bit, just as we did in class."),(0,n.kt)("p",null,"Modify this program in such a way that it first prompts the user for their name and then prints ",(0,n.kt)("inlineCode",{parentName:"p"},"hello, so-and-so"),", where ",(0,n.kt)("inlineCode",{parentName:"p"},"so-and-so")," is their actual name."),(0,n.kt)("p",null,"As before, be sure to compile your program with:"),(0,n.kt)("p",null,"And be sure to execute your program, testing it a few times with different inputs, with:"),(0,n.kt)("h3",{id:"hints"},(0,n.kt)("a",{parentName:"h3",href:"#hints"},"Hints")),(0,n.kt)("h4",{id:"dont-recall-how-to-prompt-the-user-for-their-name"},(0,n.kt)("a",{parentName:"h4",href:"#dont-recall-how-to-prompt-the-user-for-their-name"},"Don\u2019t recall how to prompt the user for their name?")),(0,n.kt)("p",null,"Recall that you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"get_string")," as follows, storing its ",(0,n.kt)("em",{parentName:"p"},"return value")," in a variable called ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," of type ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'string name = get_string("What\'s your name? ");\n\n')),(0,n.kt)("h4",{id:"dont-recall-how-to-format-a-string"},(0,n.kt)("a",{parentName:"h4",href:"#dont-recall-how-to-format-a-string"},"Don\u2019t recall how to format a string?")),(0,n.kt)("p",null,"Don\u2019t recall how to join (i.e., concatenate) the user\u2019s name with a greeting? Recall that you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"printf")," not only to print but to format a string (hence, the ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"printf"),"), a la the below, wherein ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," is a ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'printf("hello, %s\\n", name);\n\n')),(0,n.kt)("h4",{id:"use-of-undeclared-identifier"},(0,n.kt)("a",{parentName:"h4",href:"#use-of-undeclared-identifier"},"Use of undeclared identifier?")),(0,n.kt)("p",null,"Seeing the below, perhaps atop other errors?"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"error: use of undeclared identifier 'string'; did you mean 'stdin'?\n\n")),(0,n.kt)("p",null,"Recall that, to use ",(0,n.kt)("inlineCode",{parentName:"p"},"get_string"),", you need to include ",(0,n.kt)("inlineCode",{parentName:"p"},"cs50.h")," (in which ",(0,n.kt)("inlineCode",{parentName:"p"},"get_string")," is ",(0,n.kt)("em",{parentName:"p"},"declared"),") atop a file, as with:"),(0,n.kt)("h3",{id:"how-to-test-your-code"},(0,n.kt)("a",{parentName:"h3",href:"#how-to-test-your-code"},"How to Test Your Code")),(0,n.kt)("p",null,"Execute the below to evaluate the correctness of your code using ",(0,n.kt)("inlineCode",{parentName:"p"},"check50"),", a command-line program that will output happy faces whenever your code passes CS50\u2019s automated tests and sad faces whenever it doesn\u2019t! But be sure to compile and test it yourself as well!"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"check50 cs50/problems/2023/x/hello\n\n")),(0,n.kt)("p",null,"Execute the below to evaluate the style of your code using ",(0,n.kt)("inlineCode",{parentName:"p"},"style50"),", a command-line program that will output additions (in green) and deletions (in red) that you should make to your program in order to improve its style. If you have trouble seeing those colors, ",(0,n.kt)("inlineCode",{parentName:"p"},"style50")," supports other ",(0,n.kt)("a",{parentName:"p",href:"https://cs50.readthedocs.io/style50/"},"modes")," too!"),(0,n.kt)("h2",{id:"how-to-submit"},(0,n.kt)("a",{parentName:"h2",href:"#how-to-submit"},"How to Submit")),(0,n.kt)("p",null,"In your terminal, execute the below to submit your work."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"submit50 cs50/problems/2023/x/hello\n\n")))}d.isMDXComponent=!0}}]);