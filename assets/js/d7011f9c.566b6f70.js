"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[15942],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,h=d["".concat(p,".").concat(c)]||d[c]||u[c]||i;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},58771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:1,description:"lecture9 Flask Notes | \u8bfe\u7a0b\u7b14\u8bb0",title:"Notes"},l="Lecture 9 - CS50x 2023",o={unversionedId:"curriculum-resource/cs50x/cs50x_en/lecture10/notes",id:"curriculum-resource/cs50x/cs50x_en/lecture10/notes",title:"Notes",description:"lecture9 Flask Notes | \u8bfe\u7a0b\u7b14\u8bb0",source:"@site/docs/curriculum-resource/cs50x/cs50x_en/lecture10/notes.md",sourceDirName:"curriculum-resource/cs50x/cs50x_en/lecture10",slug:"/curriculum-resource/cs50x/cs50x_en/lecture10/notes",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture10/notes",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"lecture9 Flask Notes | \u8bfe\u7a0b\u7b14\u8bb0",title:"Notes"},sidebar:"tutorialSidebar",previous:{title:"lecture9 Flask",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture10/"},next:{title:"Problem Set",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture10/problem set/"}},p={},s=[{value:"Welcome!",id:"welcome",level:2},{value:"Static to Dynamic",id:"static-to-dynamic",level:2},{value:"Flask",id:"flask",level:2},{value:"Layout",id:"layout",level:2},{value:"POST",id:"post",level:2},{value:"Frosh IMs",id:"frosh-ims",level:2},{value:"Flask and SQL",id:"flask-and-sql",level:2},{value:"Session",id:"session",level:2},{value:"Store",id:"store",level:2},{value:"API",id:"api",level:2},{value:"JSON",id:"json",level:2},{value:"Summing Up",id:"summing-up",level:2}],m={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lecture-9---cs50x-2023"},"Lecture 9 - CS50x 2023"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#welcome"},"Welcome!")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#static-to-dynamic"},"Static to Dynamic")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#flask"},"Flask")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#layout"},"Layout")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#post"},"POST")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#frosh-ims"},"Frosh IMs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#flask-and-sql"},"Flask and SQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#session"},"Session")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#store"},"Store")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#api"},"API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#json"},"JSON")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#summing-up"},"Summing Up"))),(0,r.kt)("h2",{id:"welcome"},"Welcome!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In previous weeks, you have learned numerous programming languages, techniques, and strategies."),(0,r.kt)("li",{parentName:"ul"},"Indeed, this class has been far less of a ",(0,r.kt)("em",{parentName:"li"},"C class")," or ",(0,r.kt)("em",{parentName:"li"},"Python class")," and far more of a ",(0,r.kt)("em",{parentName:"li"},"programming class"),", such that you can go on to follow future trends."),(0,r.kt)("li",{parentName:"ul"},"In these past several weeks, you have learned ",(0,r.kt)("em",{parentName:"li"},"how to learn")," about programming."),(0,r.kt)("li",{parentName:"ul"},"Today, we will be moving from HTML and CSS into combining HTML, CSS, SQL, Python, and JavaScript so you can create your own web applications.")),(0,r.kt)("h2",{id:"static-to-dynamic"},"Static to Dynamic"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Up until this point, all HTML you saw was pre-written and static."),(0,r.kt)("li",{parentName:"ul"},"In the past, when you visited a page, the browser downloaded an HTML page, and you were able to view it."),(0,r.kt)("li",{parentName:"ul"},"Dynamic pages refer to the ability of Python and similar languages to create HTML files on-the-fly. Accordingly, you can have web pages that are generated by options selected by your user."),(0,r.kt)("li",{parentName:"ul"},"You have used ",(0,r.kt)("inlineCode",{parentName:"li"},"http-server")," in the past to serve your web pages. Today, we are going to utilize a new server that can parse out a web address and perform actions based on the URL provided.")),(0,r.kt)("h2",{id:"flask"},"Flask"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"Flask")," is a third-party library that allows you to host web applications using the Flask framework within Python.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can run flask by executing ",(0,r.kt)("inlineCode",{parentName:"p"},"flask run"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To do so, you will need a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," and a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"templates"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To get started, create a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," and create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," with the following code:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <meta name="viewport" content="initial-scale=1, width=device-width">\n        <title>hello</title>\n    </head>\n    <body>\n        hello, {{ name }}\n    </body>\n</html>\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice the double ",(0,r.kt)("inlineCode",{parentName:"p"},"{{ name }}")," that is a placeholder for something that will be later provided by our Flask server.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Then, in the same folder that the ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," folder appears, create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," and add the following code:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"# Greets user\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    return render_template("index.html", name=request.args.get("name", "world"))\n\n```\n\nNotice that this code defines `app` as the Flask application. Then, it defines the `/` route of `app` as returning the contents of `index.html` with the argument of `name`. By default, the `request.args.get` function will look for the `name` being provided by the user. If no name is provided, it will default to `world`.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Finally, add a final file in the same folder as ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," called ",(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt")," that has only a single line of code:"),(0,r.kt)("p",{parentName:"li"},"Notice only ",(0,r.kt)("inlineCode",{parentName:"p"},"Flask")," appears in this file.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can run this file by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"flask run")," in the terminal window. If Flask does not run, ensure that your syntax is correct in each of the files above. Further, if Flask will not run, make sure your files are organized as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"/templates\n    index.html\napp.py\nrequirements.txt\n\n")),(0,r.kt)("p",{parentName:"li"},"Once you get it running, you will be prompted to click a link. Once you navigate to that webpage, try adding ",(0,r.kt)("inlineCode",{parentName:"p"},"?name=[Your Name]")," to the base URL in your browser\u2019s URL bar.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Improving upon our program, we know that most users will not type arguments into the address bar. Instead, programmers rely upon users to fill out forms on web pages. Accordingly, we can modify index.html as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <meta name="viewport" content="initial-scale=1, width=device-width">\n        <title>hello</title>\n    </head>\n    <body>\n        <form action="/greet" method="get">\n            <input autocomplete="off" autofocus name="name" placeholder="Name" type="text">\n            <button type="submit">Greet</button>\n        </form>\n    </body>\n</html>\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice that a form is now created that takes the user\u2019s name and then passes it off to a route called ",(0,r.kt)("inlineCode",{parentName:"p"},"/greet"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Further, we can change ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"# Adds a form, second route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    return render_template("index.html")\n\n\n@app.route("/greet")\ndef greet():\n    return render_template("greet.html", name=request.args.get("name", "world"))\n\n```\n\nNotice that the default path will display a form for the user to input their name. The `/greet` route will pass the `name` to that web page.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To finalize this implementation, you will need another template for ",(0,r.kt)("inlineCode",{parentName:"p"},"greet.html")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <meta name="viewport" content="initial-scale=1, width=device-width">\n        <title>hello</title>\n    </head>\n    <body>\n        hello, {{ name }}\n    </body>\n</html>\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice that this route will now render the greeting to the user, followed by their name."))),(0,r.kt)("h2",{id:"layout"},"Layout"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Both of our web pages, ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"greet.html"),", have much of the same data. Wouldn\u2019t it be nice to allow the body to be unique, but copy the same layout from page to page?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"First, create a new template called ",(0,r.kt)("inlineCode",{parentName:"p"},"layout.html")," and write code as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <meta name="viewport" content="initial-scale=1, width=device-width">\n        <title>hello</title>\n    </head>\n    <body>\n        {% block body %}{% endblock %}\n    </body>\n</html>\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice that the ",(0,r.kt)("inlineCode",{parentName:"p"},"{% block body %}{% endblock %}")," allows for the insertion of other code from other HTML files.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Then, modify your ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n\n    <form action="/greet" method="get">\n        <input autocomplete="off" autofocus name="name" placeholder="Name" type="text">\n        <button type="submit">Greet</button>\n    </form>\n\n{% endblock %}\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice that the line ",(0,r.kt)("inlineCode",{parentName:"p"},'{% extends "layout.html" %}')," tells the server where to get the layout of this page. Then, the ",(0,r.kt)("inlineCode",{parentName:"p"},"{% block body %}{% endblock %}")," tells what code to be inserted into ",(0,r.kt)("inlineCode",{parentName:"p"},"layout.html"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Finally, change ",(0,r.kt)("inlineCode",{parentName:"p"},"greet.html")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    hello, {{ name }}\n{% endblock %}\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice how this code is shorter and more compact."))),(0,r.kt)("h2",{id:"post"},"POST"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can imagine scenarios where it is not safe to utilize ",(0,r.kt)("inlineCode",{parentName:"p"},"get"),", as usernames and passwords would show up in the URL.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can utilize the method ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," to help with this problem by modifying ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"# Switches to POST\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    return render_template("index.html")\n\n\n@app.route("/greet", methods=["POST"])\ndef greet():\n    return render_template("greet.html", name=request.form.get("name", "world"))\n\n```\n\nNotice that `POST` is added to the `/greet` route, and that we use `request.form.get` rather than `request.args.get`.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"This tells the server to look ",(0,r.kt)("em",{parentName:"p"},"deeper")," in the virtual envelope and not reveal the items in ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," in the URL.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Still, this code can be advanced further by utilizing a single route for both ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"post"),". To do this, modify ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"# Uses a single route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/", methods=["GET", "POST"])\ndef index():\n    if request.method == "POST":\n        return render_template("greet.html", name=request.form.get("name", "world"))\n    return render_template("index.html")\n\n```\n\nNotice that both `get` and `post` are done in a single routing. However, `request.method` is utilized to properly route based upon the type of routing requested by the user.\n')),(0,r.kt)("h2",{id:"frosh-ims"},"Frosh IMs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Frosh IMs or ",(0,r.kt)("em",{parentName:"p"},"froshims")," is a web application that allows students to register for intermural sports.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a folder by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"mkdir froshims")," in the terminal window. Then, type ",(0,r.kt)("inlineCode",{parentName:"p"},"cd froshims")," to browse to this folder. Within, create a directory called templates by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"mkdir templates"),". Finally, type ",(0,r.kt)("inlineCode",{parentName:"p"},"code app.py")," and write code as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'# Implements a registration form using a select menu\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\nSPORTS = [\n    "Basketball",\n    "Soccer",\n    "Ultimate Frisbee"\n]\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    return render_template("index.html", sports=SPORTS)\n\n\n@app.route("/register", methods=["POST"])\ndef register():\n\n    # Validate submission\n    if not request.form.get("name") or request.form.get("sport") not in SPORTS:\n        return render_template("failure.html")\n\n    # Confirm registration\n    return render_template("success.html")\n\n```\n\nNotice that a `failure` option is provided, such that a failure message will be displayed to the user if the `name` or `sport` field is not properly filled out.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Next, create a file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"code templates/index.html")," and write code as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    <h1>Register</h1>\n    <form action="/register" method="post">\n        <input autocomplete="off" autofocus name="name" placeholder="Name" type="text">\n        <select name="sport">\n            <option disabled selected>Sport</option>\n            {% for sport in sports %}\n                <option value="{{ sport }}">{{ sport }}</option>\n            {% endfor %}\n        </select>\n        <button type="submit">Register</button>\n    </form>\n{% endblock %}\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Next, create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"layout.html")," by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"code templates/layout.html")," and write code as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <meta name="viewport" content="initial-scale=1, width=device-width">\n        <title>froshims</title>\n    </head>\n    <body>\n        {% block body %}{% endblock %}\n    </body>\n</html>\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fourth, create a file in templates called ",(0,r.kt)("inlineCode",{parentName:"p"},"success.html")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    You are registered!\n{% endblock %}\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Finally, create a file in templates called ",(0,r.kt)("inlineCode",{parentName:"p"},"failure.html")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    You are not registered!\n{% endblock %}\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can imagine how we might want to accept the registration of many different registrants. We can improve ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'# Implements a registration form, storing registrants in a dictionary, with error messages\n\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\nREGISTRANTS = {}\n\nSPORTS = [\n    "Basketball",\n    "Soccer",\n    "Ultimate Frisbee"\n]\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    return render_template("index.html", sports=SPORTS)\n\n\n@app.route("/register", methods=["POST"])\ndef register():\n\n    # Validate name\n    name = request.form.get("name")\n    if not name:\n        return render_template("error.html", message="Missing name")\n\n    # Validate sport\n    sport = request.form.get("sport")\n    if not sport:\n        return render_template("error.html", message="Missing sport")\n    if sport not in SPORTS:\n        return render_template("error.html", message="Invalid sport")\n\n    # Remember registrant\n    REGISTRANTS[name] = sport\n\n    # Confirm registration\n    return redirect("/registrants")\n\n\n@app.route("/registrants")\ndef registrants():\n    return render_template("registrants.html", registrants=REGISTRANTS)\n\n```\n\nNotice that a dictionary called `REGISTRANTS` is used to log the `sport` selected by `REGISTRANTS[name]`. Also, notice that `registrants=REGISTRANTS` passes the dictionary on to this template.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Further, create a new template called ",(0,r.kt)("inlineCode",{parentName:"p"},"registrants.html")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    <h1>Registrants</h1>\n    <table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Sport</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for name in registrants %}\n                <tr>\n                    <td>{{ name }}</td>\n                    <td>{{ registrants[name] }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n{% endblock %}\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice that ",(0,r.kt)("inlineCode",{parentName:"p"},"{% for name in registrants %}...{% endfor %}")," will iterate through each of the registrants. Very powerful to be able to iterate on a dynamic web page!")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Executing ",(0,r.kt)("inlineCode",{parentName:"p"},"flask run")," and entering numerous names and sports, you can browse to ",(0,r.kt)("inlineCode",{parentName:"p"},"/registrants")," to view what data has been logged.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You now have a web application! However, there are some security flaws! Because everything is client-side, an adversary could change the HTML and ",(0,r.kt)("em",{parentName:"p"},"hack")," a website. Further, this data will not persist if the server is shut down. Could there be some way we could have our data persist even when the server restarts?"))),(0,r.kt)("h2",{id:"flask-and-sql"},"Flask and SQL"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Just as we have seen how Python can interface with a SQL database, we can combine the power of Flask, Python, and SQL to create a web application where data will persist!")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"To implement this, you will need to take a number of steps.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"First, modify ",(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt")," as follows:")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    <h1>Register</h1>\n    <form action="/register" method="post">\n        <input autocomplete="off" autofocus name="name" placeholder="Name" type="text">\n        {% for sport in sports %}\n            <input name="sport" type="radio" value="{{ sport }}"> {{ sport }}\n        {% endfor %}\n        <button type="submit">Register</button>\n    </form>\n{% endblock %}\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"layout.html")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <meta name="viewport" content="initial-scale=1, width=device-width">\n        <title>froshims</title>\n    </head>\n    <body>\n        {% block body %}{% endblock %}\n    </body>\n</html>\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Ensure ",(0,r.kt)("inlineCode",{parentName:"p"},"failure.html")," appears as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    You are not registered!\n{% endblock %}\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"registrants.html")," to appear as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n    <h1>Registrants</h1>\n    <table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Sport</th>\n                <th></th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for registrant in registrants %}\n                <tr>\n                    <td>{{ registrant.name }}</td>\n                    <td>{{ registrant.sport }}</td>\n                    <td>\n                        <form action="/deregister" method="post">\n                            <input name="id" type="hidden" value="{{ registrant.id }}">\n                            <button type="submit">Deregister</button>\n                        </form>\n                    </td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n{% endblock %}\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice that a hidden value ",(0,r.kt)("inlineCode",{parentName:"p"},"registrant.id")," is included such that it\u2019s possible to use this ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," later in ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Finally, modify ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'# Implements a registration form, storing registrants in a SQLite database, with support for deregistration\n\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL("sqlite:///froshims.db")\n\nSPORTS = [\n    "Basketball",\n    "Soccer",\n    "Ultimate Frisbee"\n]\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    return render_template("index.html", sports=SPORTS)\n\n\n@app.route("/deregister", methods=["POST"])\ndef deregister():\n\n    # Forget registrant\n    id = request.form.get("id")\n    if id:\n        db.execute("DELETE FROM registrants WHERE id = ?", id)\n    return redirect("/registrants")\n\n\n@app.route("/register", methods=["POST"])\ndef register():\n\n    # Validate submission\n    name = request.form.get("name")\n    sport = request.form.get("sport")\n    if not name or sport not in SPORTS:\n        return render_template("failure.html")\n\n    # Remember registrant\n    db.execute("INSERT INTO registrants (name, sport) VALUES(?, ?)", name, sport)\n\n    # Confirm registration\n    return redirect("/registrants")\n\n\n@app.route("/registrants")\ndef registrants():\n    registrants = db.execute("SELECT * FROM registrants")\n    return render_template("registrants.html", registrants=registrants)\n\n```\n\nNotice that the `cs50` library is utilized. A route is included for `register` for the `post` method. This route will take the name and sport taken from the registration form and execute a SQL query to add the `name` and the `sport` to the `registrants` table. The `deregister` routes to a SQL query that will grab the user\u2019s `id` and utilize that information to deregister this individual.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can read more in the ",(0,r.kt)("a",{parentName:"li",href:"https://flask.palletsprojects.com/"},"Flask documentation"),".")),(0,r.kt)("h2",{id:"session"},"Session"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"While the above code is useful from an administrative standpoint, where a back-office administrator could add and remove individuals from the database, one can imagine how this code is not safe to implement on a public server.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For one, bad actors could make decisions on behalf of other users by hitting the deregister button \u2013 effectively deleting their recorded answer from the server.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Web services like Google use login credentials to ensure users only have access to the right data.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can actually implement this itself using ",(0,r.kt)("em",{parentName:"p"},"cookies"),". Cookies are small files that are stored on your computer, such that your computer can communicate with the server and effectively say, \u201cI\u2019m an authorized user that has already logged in.\u201d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In the simplest form, we can implement this by creating a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"login")," and then adding the following files.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"First, create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt")," that reads as follows:"),(0,r.kt)("p",{parentName:"li"},"Notice that in addition to ",(0,r.kt)("inlineCode",{parentName:"p"},"Flask"),", we also include ",(0,r.kt)("inlineCode",{parentName:"p"},"Flask-Session"),", which is required to support login sessions.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Second, in a ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," folder, create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"layout.html")," that appears as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <meta name="viewport" content="initial-scale=1, width=device-width">\n        <title>store</title>\n    </head>\n    <body>\n        {% block body %}{% endblock %}\n    </body>\n</html>\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice this provides a very simple layout with a title and a body.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Third, create a file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," that appears as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n\n    {% if session["name"] %}\n        You are logged in as {{ session["name"] }}. <a href="/logout">Log out</a>.\n    {% else %}\n        You are not logged in. <a href="/login">Log in</a>.\n    {% endif %}\n\n{% endblock %}\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice that this file looks to see if ",(0,r.kt)("inlineCode",{parentName:"p"},'session["name"]')," exists. If it does, it will display a welcome message. If not, it will recommend you browse to a page to log in.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fourth, create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"login.html")," and add the following code:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% extends "layout.html" %}\n\n{% block body %}\n\n    <form action="/login" method="post">\n        <input autocomplete="off" autofocus name="name" placeholder="Name" type="text">\n        <button type="submit">Log In</button>\n    </form>\n\n{% endblock %}\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice this is the layout of a basic login page.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Finally, create a file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"login")," folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py")," and write code as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'from flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Configure session\napp.config["SESSION_PERMANENT"] = False\napp.config["SESSION_TYPE"] = "filesystem"\nSession(app)\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    if not session.get("name"):\n        return redirect("/login")\n    return render_template("index.html")\n\n\n@app.route("/login", methods=["GET", "POST"])\ndef login():\n    if request.method == "POST":\n        session["name"] = request.form.get("name")\n        return redirect("/")\n    return render_template("login.html")\n\n\n@app.route("/logout")\ndef logout():\n    session["name"] = None\n    return redirect("/")\n\n```\n\nNotice the modified _imports_ at the top of the file, including `session`, which will allow for you to support sessions. Most important, notice how `session["name"]` is used in the `login` and `logout` routes. The `login` route will assign the login name provided and assign it to `session["name"]`. However, in the `logout` route, the logging out is implemented by simply setting `session["name"]` to `None`.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can read more about sessions in the ",(0,r.kt)("a",{parentName:"li",href:"https://flask.palletsprojects.com/en/2.2.x/api/?highlight=session#flask.session"},"Flask documentation"),".")),(0,r.kt)("h2",{id:"store"},"Store"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Moving on to a final example of utilizing Flask\u2019s ability to enable a session.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We examined the following code for ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py"),". The following code was shown:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'from cs50 import SQL\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Connect to database\ndb = SQL("sqlite:///store.db")\n\n# Configure session\napp.config["SESSION_PERMANENT"] = False\napp.config["SESSION_TYPE"] = "filesystem"\nSession(app)\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    books = db.execute("SELECT * FROM books")\n    return render_template("books.html", books=books)\n\n\n@app.route("/cart", methods=["GET", "POST"])\ndef cart():\n\n    # Ensure cart exists\n    if "cart" not in session:\n        session["cart"] = []\n\n    # POST\n    if request.method == "POST":\n        id = request.form.get("id")\n        if id:\n            session["cart"].append(id)\n        return redirect("/cart")\n\n    # GET\n    books = db.execute("SELECT * FROM books WHERE id IN (?)", session["cart"])\n    return render_template("cart.html", books=books)\n\n```\n\nNotice that `cart` is implemented using a list. Items can be added to this list using the `Add to Cart` buttons in `books.html`. When clicking such a button, the `post` method is invoked, where the `id` of the item is appended to the `cart`. When viewing the cart, invoking the `get` method, SQL is executed to display a list of the books in the cart.\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An ",(0,r.kt)("em",{parentName:"p"},"application program interface")," or ",(0,r.kt)("em",{parentName:"p"},"API")," is a series of specifications that allow you to interface with another service. For example, we could utilize IMDB\u2019s API to interface with their database. We might even integrate APIs for handling specific types of data downloadable from a server.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We looked at an example called ",(0,r.kt)("inlineCode",{parentName:"p"},"shows"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Looking at ",(0,r.kt)("inlineCode",{parentName:"p"},"app.py"),", we saw the following:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'# Searches for shows using Ajax\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL("sqlite:///shows.db")\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'@app.route("/")\ndef index():\n    return render_template("index.html")\n\n\n@app.route("/search")\ndef search():\n    q = request.args.get("q")\n    if q:\n        shows = db.execute("SELECT * FROM shows WHERE title LIKE ? LIMIT 50", "%" + q + "%")\n    else:\n        shows = []\n    return render_template("search.html", shows=shows)\n\n```\n\nNotice that the `search` route executes a SQL query.\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Looking at ",(0,r.kt)("inlineCode",{parentName:"p"},"search.html"),", you\u2019ll notice that it is very simple:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'{% for show in shows %}\n    <li>{{ show["title"] }}</li>\n{% endfor %}\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice that it provides a bulleted list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Finally, looking at ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html"),", notice that ",(0,r.kt)("em",{parentName:"p"},"AJAX")," code is utilized to power the search:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'<!DOCTYPE html>\n\n<html lang="en">\n    <head>\n        <meta name="viewport" content="initial-scale=1, width=device-width">\n        <title>shows</title>\n    </head>\n    <body>\n\n        <input autocomplete="off" autofocus placeholder="Query" type="search">\n\n        <ul></ul>\n\n        <script>\n\n            let input = document.querySelector(\'input\');\n            input.addEventListener(\'input\', async function() {\n                let response = await fetch(\'/search?q=\' + input.value);\n                let shows = await response.text();\n                document.querySelector(\'ul\').innerHTML = shows;\n            });\n\n        <\/script>\n\n    </body>\n</html>\n\n')),(0,r.kt)("p",{parentName:"li"},"Notice an event listener is utilized to dynamically query the server to provide a list that matches the title provided. This will locate the ",(0,r.kt)("inlineCode",{parentName:"p"},"ul")," tag in the HTML and modify the web page accordingly to include the list of the matches.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can read more in the ",(0,r.kt)("a",{parentName:"p",href:"https://api.jquery.com/category/ajax/"},"AJAX documentation"),"."))),(0,r.kt)("h2",{id:"json"},"JSON"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"JavaScript Object Notation")," or ",(0,r.kt)("em",{parentName:"p"},"JSON")," is text file of dictionaries with keys and values. This is a raw, computer-friendly way to get lots of data.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JSON is a very useful way of getting back data from the server.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can see this in action in the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," we examined together:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"<!DOCTYPE html>\n\n<html lang=\"en\">\n    <head>\n        <meta name=\"viewport\" content=\"initial-scale=1, width=device-width\">\n        <title>shows</title>\n    </head>\n    <body>\n\n        <input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\">\n\n        <ul></ul>\n\n        <script>\n\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('<', '&lt;').replace('&', '&amp;');\n                    html += '<li>' + title + '</li>';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n\n        <\/script>\n\n    </body>\n</html>\n\n")),(0,r.kt)("p",{parentName:"li"},"While the above may be somewhat cryptic, it provides a starting point for you to research JSON on your own to see how it can be implemented in your own web applications.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can read more in the ",(0,r.kt)("a",{parentName:"p",href:"https://www.json.org/json-en.html"},"JSON documentation"),"."))),(0,r.kt)("h2",{id:"summing-up"},"Summing Up"),(0,r.kt)("p",null,"In this lesson, you learned how to utilize Python, SQL, and Flask to create web applications. Specifically, we discussed\u2026"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GET"),(0,r.kt)("li",{parentName:"ul"},"POST"),(0,r.kt)("li",{parentName:"ul"},"Flask"),(0,r.kt)("li",{parentName:"ul"},"Session"),(0,r.kt)("li",{parentName:"ul"},"AJAX"),(0,r.kt)("li",{parentName:"ul"},"JSON")),(0,r.kt)("p",null,"See you next time for our final lecture!"))}u.isMDXComponent=!0}}]);