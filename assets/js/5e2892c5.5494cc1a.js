"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[8404],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,h=d["".concat(s,".").concat(c)]||d[c]||u[c]||o;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={title:"Lab 06 BSTMap"},r=void 0,l={unversionedId:"curriculum-resource/cs61b/labs/lab06/index",id:"curriculum-resource/cs61b/labs/lab06/index",title:"Lab 06 BSTMap",description:"FAQ",source:"@site/docs/curriculum-resource/cs61b/labs/lab06/index.md",sourceDirName:"curriculum-resource/cs61b/labs/lab06",slug:"/curriculum-resource/cs61b/labs/lab06/",permalink:"/docs/curriculum-resource/cs61b/labs/lab06/",draft:!1,tags:[],version:"current",frontMatter:{title:"Lab 06 BSTMap"},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/docs/curriculum-resource/cs61b/labs/lab05/faq"},next:{title:"Asymptotics Problems Solutions",permalink:"/docs/curriculum-resource/cs61b/labs/lab06/asymptotics-soln"}},s={},p=[{value:"FAQ",id:"faq",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Pulling from skeleton",id:"pulling-from-skeleton",level:2},{value:"<code>BSTMap</code>",id:"bstmap",level:2},{value:"Exercise: <code>BSTMap</code>",id:"exercise-bstmap",level:3},{value:"Scoring",id:"scoring",level:2},{value:"More (Ungraded) Exercises for <code>BSTMap</code>",id:"more-ungraded-exercises-for-bstmap",level:2},{value:"Submission",id:"submission",level:2},{value:"Optional: Asymptotics Problems",id:"optional-asymptotics-problems",level:2}],m={toc:p},d="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(d,(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"faq"},"FAQ"),(0,i.kt)("p",null,"The FAQ for this lab can be found ",(0,i.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/labs/lab06/faq"},"here"),"."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In this lab, you'll create ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap"),", a BST-based implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B"),"\ninterface, which represents a basic tree-based map. You will be creating this\ncompletely from scratch, using the interface provided as your guide."),(0,i.kt)("p",null,"After you've completed your implementation, you'll compare the performance of\nyour implementation to a list-based ",(0,i.kt)("inlineCode",{parentName:"p"},"Map")," implementation ",(0,i.kt)("inlineCode",{parentName:"p"},"ULLMap")," as well as the\nbuilt-in Java ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeMap")," class (which uses a BST variant known as a ",(0,i.kt)("em",{parentName:"p"},"red-black tree"),")."),(0,i.kt)("h2",{id:"pulling-from-skeleton"},"Pulling from skeleton"),(0,i.kt)("p",null,"To get the assignment, pull from the ",(0,i.kt)("inlineCode",{parentName:"p"},"skeleton")," in your personal repository: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git pull skeleton main\n")),(0,i.kt)("p",null,"This assignment is ",(0,i.kt)("inlineCode",{parentName:"p"},"lab06"),"."),(0,i.kt)("h2",{id:"bstmap"},(0,i.kt)("inlineCode",{parentName:"h2"},"BSTMap")),(0,i.kt)("p",null,"In this lab (and future labs), we may not provide as much skeleton code as in\nthe past. If you're having trouble getting started, please come in to lab or check\nout any of the resources provided! "),(0,i.kt)("p",null,"Create a class ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap")," that implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B")," interface using a BST\n(Binary Search Tree) as its core data structure. Your code will not compile until\nyou create the ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap")," class and implement all the methods in ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B"),".\nYou can implement methods one at a time by writing the method signatures\nof all the required methods, but throwing ",(0,i.kt)("inlineCode",{parentName:"p"},"UnsupportedOperationException"),"s\nfor the other implementations until you get around to actually writing them.\nRefer to this ",(0,i.kt)("a",{parentName:"p",href:"#exercise-bstmap"},"section")," on how to throw the exception."),(0,i.kt)("p",null,"In your implementation, you should ensure that generic keys ",(0,i.kt)("inlineCode",{parentName:"p"},"K")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap<K,V>"),"\nimplement\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Comparable.html"},"Comparable"),".\nThis is called a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/tutorial/java/generics/bounded.html"},(0,i.kt)("em",{parentName:"a"},"bounded type parameter")),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/tutorial/java/generics/bounded.html"},"The syntax"),"\nis a little tricky, but we've given an example below. Here, we are creating\na ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTSet")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparable")," objects. We've included the rather strange\n",(0,i.kt)("inlineCode",{parentName:"p"},"compareRoots")," for pedagogical purposes (for a ",(0,i.kt)("inlineCode",{parentName:"p"},"compareTo")," refresher, see this\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Comparable.html#compareTo(T)"},"documentation"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class BSTSet<K extends Comparable<K>> implements Set61B<K> {\n    private class BSTNode {\n        K item;\n        // ...\n    }\n\n    private BSTNode root;\n\n    /* Returns whether this BSTSet's root is greater than, equal to, or less\n     * than the other BSTSet's root, following the usual `compareTo`\n     * convention. */\n    public int compareRoots(BSTSet other) {\n        /* We are able to safely invoke `compareTo` on `n1.item` because we\n         * know that `K` extends `Comparable<K>`, so `K` is a `Comparable`, and\n         *`Comparable`s must implement `compareTo`. */\n        return this.root.item.compareTo(other.root.item);\n    }\n\n    // ...\n}\n\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You may have noticed that the syntax for a bounded type parameter uses ",(0,i.kt)("inlineCode",{parentName:"p"},"extends"),"\neven though ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparable")," is an ",(0,i.kt)("inlineCode",{parentName:"p"},"interface"),". In the context of bounded type\nparameters, ",(0,i.kt)("inlineCode",{parentName:"p"},"extends")," can mean ",(0,i.kt)("inlineCode",{parentName:"p"},"extends")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"implements"),"\n(",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/tutorial/java/generics/bounded.html"},"docs"),"). Don't ask us why - we don't know either. ",(0,i.kt)("br",null),(0,i.kt)("br",null),'\n(The syntax also implies you can "extend" ',(0,i.kt)("inlineCode",{parentName:"p"},"final")," classes such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Integer"),",\nwhich is impossible. Go Java!)")),(0,i.kt)("p",null,"Remember, the code snippet above emulates a ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," - you'll need to implement a\n",(0,i.kt)("inlineCode",{parentName:"p"},"Map"),". We recommend you use similar logic for ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap"),", with some nested node\nclass to help facilitate your implementation. Your ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap")," should have two\ngeneric parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"K")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"V"),", representing the generic types of the keys and\nvalues in your ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap"),", respectively."),(0,i.kt)("p",null,"IntelliJ has a nice feature that will generate the method signatures for you. If\nyou're implementing an interface and haven't implemented all the methods,\nIntelliJ will highlight the class signature in red. If you hover over this, you\nshould be able to select ",(0,i.kt)("inlineCode",{parentName:"p"},"Implement methods"),'. On the pop-up window, make sure you\'ve\nselected the option for "Copy JavaDoc" and "Insert @Override". Click "OK"\nand IntelliJ should populate the class with the required method signatures\n(they won\'t be functional though!) and copy over the comments. '),(0,i.kt)("p",null,"It should look something like this (",(0,i.kt)("strong",{parentName:"p"},"you don't have ",(0,i.kt)("inlineCode",{parentName:"strong"},"Set61B"),", this is just an\nexample!"),"):"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Implement methods",src:n(68146).Z,width:"758",height:"113"}),'{: style="max-height: 200;" }'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Select methods to implement",src:n(93055).Z,width:"746",height:"1197"})),(0,i.kt)("p",null,"In this example, IntelliJ will generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"clear"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"iterator"),"\nmethod signatures, because that's all our mythical ",(0,i.kt)("inlineCode",{parentName:"p"},"Set61B")," interface\nrequires. If you follow this procedure with your code, you should have all the\nmethod signatures required for ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B"),". (You can also pick and choose\nwhich signatures to generate, if you'd like.)"),(0,i.kt)("h3",{id:"exercise-bstmap"},"Exercise: ",(0,i.kt)("inlineCode",{parentName:"h3"},"BSTMap")),(0,i.kt)("p",null,"As mentioned, you'll want to create a class, ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap"),", that implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B")," interface.\nMake sure you are writing your implementation in ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap.java"),", otherwise your code might not\nrun on the autograder! The following methods are required:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void put(K key, V value)"),": Associates the specified ",(0,i.kt)("inlineCode",{parentName:"li"},"key")," with the ",(0,i.kt)("inlineCode",{parentName:"li"},"value"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"V get(K key)"),": Returns the value that is associated with ",(0,i.kt)("inlineCode",{parentName:"li"},"key"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boolean containsKey(K key)"),": Returns if this map has a mapping for the given ",(0,i.kt)("inlineCode",{parentName:"li"},"key"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int size()"),": Returns the number of key-value mappings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"void clear()"),": Removes every mapping from this map.")),(0,i.kt)("p",null,"Make sure to read through the comments for each method in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B")," interface\nto fully understand what to implement. The above descriptions are not necessarily\ncomprehensive."),(0,i.kt)("p",null,"For debugging purposes, your ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap")," should also include an additional method\n",(0,i.kt)("inlineCode",{parentName:"p"},"printInOrder()")," (not given in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B")," interface) that prints out your\n",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap")," in order of increasing Key. ",(0,i.kt)("strong",{parentName:"p"},"We will not test the result of this method,\nbut you may find this helpful for testing your implementation!")),(0,i.kt)("p",null,":::task\nImplement the ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap")," class, which implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B")," interface\nand the associated, non-optional methods. You should ensure that the keys in\nyour ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap")," are ",(0,i.kt)("inlineCode",{parentName:"p"},"Comparable")," by using a bounded type parameter. ",(0,i.kt)("br",null),(0,i.kt)("br",null),"\nWe ",(0,i.kt)("em",{parentName:"p"},"strongly recommend")," you create helper methods to facilitate your implementation\n(specifically, recursive helper methods are strongly encouraged)."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Unfortunately, most methods you need to implement rely on others for testing\npurposes (",(0,i.kt)("inlineCode",{parentName:"p"},"get")," requires ",(0,i.kt)("inlineCode",{parentName:"p"},"put"),", etc.). This makes it difficult to test most methods until\nyou implement ",(0,i.kt)("inlineCode",{parentName:"p"},"put"),". We recommend you implement the methods in the order\nspecified in ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B"),". ",(0,i.kt)("br",null),(0,i.kt)("br",null)," You can test your implementation\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"TestBSTMap.java"),"."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"There is an optional part of ",(0,i.kt)("inlineCode",{parentName:"strong"},"BSTMap"),". These methods are optional to implement:\n",(0,i.kt)("inlineCode",{parentName:"strong"},"iterator"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"remove"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"keySet"),".")," They are not required for the timing portion, described in this\n",(0,i.kt)("a",{parentName:"p",href:"#so-how-fast-is-it"},"section"),"."),(0,i.kt)("p",{parentName:"admonition"},"As mentioned, if you are not implementing the optional part, throw an\n",(0,i.kt)("inlineCode",{parentName:"p"},"UnsupportedOperationException"),", like below:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"throw new UnsupportedOperationException(); \n")),(0,i.kt)("p",{parentName:"admonition"},"If you are completing the optional part, refer to this\n",(0,i.kt)("a",{parentName:"p",href:"#more-ungraded-exercises-for-bstmap"},"section"),"\nand the comments in ",(0,i.kt)("inlineCode",{parentName:"p"},"Map61B")," for a more detailed description."),(0,i.kt)("h3",{parentName:"admonition",id:"resources"},"Resources"),(0,i.kt)("p",{parentName:"admonition"},"The following resources might prove useful:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Lecture 16 ",(0,i.kt)("a",{parentName:"li",href:"https://docs.google.com/presentation/d/1tAXgjwVKsnH7AR-iCvkDM-rQFwrg4OnKVZzqPixZWI8/edit?usp=sharing"},"slides"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ULLMap.java")," (given in ",(0,i.kt)("inlineCode",{parentName:"li"},"src/"),"), an unordered, linked-list-based ",(0,i.kt)("inlineCode",{parentName:"li"},"Map61B"),"\nimplementation."),(0,i.kt)("li",{parentName:"ul"},"To help you also get started, an algorithmic guide to ",(0,i.kt)("inlineCode",{parentName:"li"},"put")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"get")," can be\nfound ",(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=P3_Luw2M8X4"},"here"))),(0,i.kt)("h2",{parentName:"admonition",id:"so-how-fast-is-it"},"So... How Fast Is It?"),(0,i.kt)("p",{parentName:"admonition"},"There is one interactive speed test provided in ",(0,i.kt)("inlineCode",{parentName:"p"},"InsertRandomSpeedTest.java"),".\nDo not attempt to run this test before you've completed ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap"),".\nOnce you're ready, you can run the tests in IntelliJ."),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"InsertRandomSpeedTest")," class performs tests on element-insertion speed of\nyour ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ULLMap")," (provided), Java's built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"TreeMap"),", and Java's\nbuilt-in ",(0,i.kt)("inlineCode",{parentName:"p"},"HashMap")," (which you'll explore more in a later lab). It works by\nasking the user for a desired length of each String to insert, and also for an\ninput size (the number of insertions to perform). It then generates that many\nStrings of length as specified and inserts them into the maps as\n",(0,i.kt)("inlineCode",{parentName:"p"},"<String, Integer>")," pairs."),(0,i.kt)("p",{parentName:"admonition"},"Try it out and see how your data structure scales with the number of insertions\ncompared to the naive and industrial-strength implementations. Remember that\nasymptotics aren't representative on small samples, so make sure your inputs\nare sufficiently large if you are getting a confusing trend (keep in mind that there\nis a limit thought - if you enter too large of a value, the program might overflow,\nso play around with sufficiently large values). Record your results\nin a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"speedTestResults.txt"),".")),(0,i.kt)("p",null,"Run the speed tests and record your results in ",(0,i.kt)("inlineCode",{parentName:"p"},"speedTestResults.txt"),".\nThere is no standard format required for your results, but at a minimum, you\nshould include what you did and what you observed."),(0,i.kt)("h2",{id:"scoring"},"Scoring"),(0,i.kt)("p",null,"The lab is out of 5 points. There are no hidden tests on Gradescope, in the sense that\nthe score you get on Gradescope is your final score. However, there is one test not provided\nlocally, which checks for your ",(0,i.kt)("inlineCode",{parentName:"p"},"speedTestResults.txt"),". Passing the local test ",(0,i.kt)("inlineCode",{parentName:"p"},"TestBSTMap.java"),"\nmeans that you will get full credit for ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap.java"),", but not necessarily for your ",(0,i.kt)("inlineCode",{parentName:"p"},"speedTestResults.txt"),"\non Gradescope. ",(0,i.kt)("strong",{parentName:"p"},"So, for this lab, as long as you pass the relevant local tests (",(0,i.kt)("inlineCode",{parentName:"strong"},"TestBSTMap.java"),") and\nfill out the ",(0,i.kt)("inlineCode",{parentName:"strong"},"speedTestResults.txt")," file sufficiently, you will get full credit on Gradescope.")),(0,i.kt)("h2",{id:"more-ungraded-exercises-for-bstmap"},"More (Ungraded) Exercises for ",(0,i.kt)("inlineCode",{parentName:"h2"},"BSTMap")),(0,i.kt)("p",null,"These will not be graded, but you can still receive feedback using the local\ntests, specifically ",(0,i.kt)("inlineCode",{parentName:"p"},"TestBSTMapExtra.java")," (and on the autograder)."),(0,i.kt)("p",null,"Implement the methods ",(0,i.kt)("inlineCode",{parentName:"p"},"iterator()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"keySet()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"remove(K key)")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap"),"\nclass. When implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"iterator")," method, you should return an iterator\nover the ",(0,i.kt)("em",{parentName:"p"},"keys"),", in ",(0,i.kt)("em",{parentName:"p"},"sorted order"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"remove()")," is fairly\nchallenging - you'll need to implement Hibbard deletion."),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"remove"),", you should return ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," if the argument key does not exist in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap"),". Otherwise, delete the key-value pair (key, value) and return value."),(0,i.kt)("h2",{id:"submission"},"Submission"),(0,i.kt)("p",null,"Just as you did for the previous assignments, add, commit, then push your Lab 06\ncode to GitHub. Then, submit to Gradescope to test your code. "),(0,i.kt)("h2",{id:"optional-asymptotics-problems"},"Optional: Asymptotics Problems"),(0,i.kt)("p",null,"This part is also optional, and we've included it here for additional practice on asymptotics.\nCheck your answers against the ",(0,i.kt)("a",{parentName:"p",href:"/docs/curriculum-resource/cs61b/labs/lab06/asymptotics-soln"},"solutions"),"!"),(0,i.kt)("p",null,"Given ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"BSTMap")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," key-value pairs, and ",(0,i.kt)("inlineCode",{parentName:"p"},"(K, V)"),", a random key-value pair, answer the following questions."),(0,i.kt)("p",null,'Unless otherwise stated, "big-Oh" bounds (e.g. $\\mathcal{O}(N)$) and "big-Theta" bounds (e.g. $\\Theta(N)$)\nrefer to the ',(0,i.kt)("strong",{parentName:"p"},"number of comparisons")," in the given method call(s)."),(0,i.kt)("p",null,"For questions 1-7, state whether the statement is true or false. For question 8, give a runtime bound."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"B.put(K, V)")," $\\in \\mathcal{O}(\\log N)$"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"B.put(K, V)")," $\\in \\Theta(\\log N)$"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"B.put(K, V)")," $\\in \\Theta(N)$"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"B.put(K, V)")," $\\in \\mathcal{O}(N)$"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"B.put(K, V)")," $\\in \\mathcal{O}(N^2)$")),(0,i.kt)("p",null,'{:start="6"} '),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"For a fixed key ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," not equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"K"),", both ",(0,i.kt)("inlineCode",{parentName:"li"},"B.containsKey(C)")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"B.containsKey(K)")," run in $\\Omega(\\log N).$"),(0,i.kt)("li",{parentName:"ol"},"(This question is quite difficult.) Let ",(0,i.kt)("inlineCode",{parentName:"li"},"b")," be a ",(0,i.kt)("inlineCode",{parentName:"li"},"Node")," of a ",(0,i.kt)("inlineCode",{parentName:"li"},"BSTMap"),", and two subtrees rooted at ",(0,i.kt)("inlineCode",{parentName:"li"},"root"),", called ",(0,i.kt)("inlineCode",{parentName:"li"},"left")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"right"),". Further, assume the method ",(0,i.kt)("inlineCode",{parentName:"li"},"numberOfNodes(Node p)")," returns the number of nodes ($M$) of the subtree rooted at ",(0,i.kt)("inlineCode",{parentName:"li"},"p")," and runs in $\\Theta(M)$ time. What is the running time, in both the worst and best case, of ",(0,i.kt)("inlineCode",{parentName:"li"},"mystery(b.root, z)"),", assuming ",(0,i.kt)("inlineCode",{parentName:"li"},"1 <= z < numberOfNodes(b.root)"),"?")),(0,i.kt)("p",null,"Hint: See if you can work out what ",(0,i.kt)("inlineCode",{parentName:"p"},"mystery")," does first, then see how it accomplishes it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public Key mystery(Node b, int z) {\n    int numLeft = numberOfNodes(b.left);\n    if (numLeft == z - 1) {\n        return b.key;\n    } else if (numLeft > z) {\n        return mystery(b.left, z);\n    } else {\n        return mystery(b.right, z - numLeft - 1);\n    }\n}\n")))}u.isMDXComponent=!0},68146:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/implement-methods-9866c8ba22bcc331c22d4ba8df0329b9.png"},93055:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/select-methods-to-implement-2f66678c74752653846445204b0ae676.png"}}]);