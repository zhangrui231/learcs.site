"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[6612],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7461:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:5,description:"cs50x problem set Credit",title:"Credit"},i="Credit - CS50x 2023",l={unversionedId:"curriculum-resource/cs50x/lecture2/problem set/credit",id:"curriculum-resource/cs50x/lecture2/problem set/credit",title:"Credit",description:"cs50x problem set Credit",source:"@site/docs/curriculum-resource/cs50x/lecture2/problem set/credit.md",sourceDirName:"curriculum-resource/cs50x/lecture2/problem set",slug:"/curriculum-resource/cs50x/lecture2/problem set/credit",permalink:"/docs/curriculum-resource/cs50x/lecture2/problem set/credit",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"cs50x problem set Credit",title:"Credit"},sidebar:"tutorialSidebar",previous:{title:"Cash",permalink:"/docs/curriculum-resource/cs50x/lecture2/problem set/cash"},next:{title:"Notes",permalink:"/docs/curriculum-resource/cs50x/lecture2/lab"}},s={},u=[{value:"Getting Started",id:"getting-started",level:2},{value:"Credit Cards",id:"credit-cards",level:2},{value:"Luhn\u2019s Algorithm",id:"luhns-algorithm",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Walkthrough",id:"walkthrough",level:3},{value:"How to Test Your Code",id:"how-to-test-your-code",level:3},{value:"How to Submit",id:"how-to-submit",level:2}],c={toc:u},d="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"credit---cs50x-2023"},"Credit - CS50x 2023"),(0,a.kt)("h2",{id:"getting-started"},(0,a.kt)("a",{parentName:"h2",href:"#getting-started"},"Getting Started")),(0,a.kt)("p",null,"Open ",(0,a.kt)("a",{parentName:"p",href:"https://cs50.dev/"},"VS Code"),"."),(0,a.kt)("p",null,"Start by clicking inside your terminal window, then execute ",(0,a.kt)("inlineCode",{parentName:"p"},"cd")," by itself. You should find that its \u201cprompt\u201d resembles the below."),(0,a.kt)("p",null,"Click inside of that terminal window and then execute"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"wget https://cdn.cs50.net/2022/fall/psets/1/credit.zip\n\n")),(0,a.kt)("p",null,"followed by Enter in order to download a ZIP called ",(0,a.kt)("inlineCode",{parentName:"p"},"credit.zip")," in your codespace. Take care not to overlook the space between ",(0,a.kt)("inlineCode",{parentName:"p"},"wget")," and the following URL, or any other character for that matter!"),(0,a.kt)("p",null,"Now execute"),(0,a.kt)("p",null,"to create a folder called ",(0,a.kt)("inlineCode",{parentName:"p"},"credit"),". You no longer need the ZIP file, so you can execute"),(0,a.kt)("p",null,"and respond with \u201cy\u201d followed by Enter at the prompt to remove the ZIP file you downloaded."),(0,a.kt)("p",null,"Now type"),(0,a.kt)("p",null,"followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below."),(0,a.kt)("p",null,"If all was successful, you should execute"),(0,a.kt)("p",null,"and see a file named ",(0,a.kt)("inlineCode",{parentName:"p"},"credit.c"),". Executing ",(0,a.kt)("inlineCode",{parentName:"p"},"code credit.c")," should open the file where you will type your code for this problem set. If not, retrace your steps and see if you can determine where you went wrong!"),(0,a.kt)("h2",{id:"credit-cards"},(0,a.kt)("a",{parentName:"h2",href:"#credit-cards"},"Credit Cards")),(0,a.kt)("p",null,"A credit (or debit) card, of course, is a plastic card with which you can pay for goods and services. Printed on that card is a number that\u2019s also stored in a database somewhere, so that when your card is used to buy something, the creditor knows whom to bill. There are a lot of people with credit cards in this world, so those numbers are pretty long: American Express uses 15-digit numbers, MasterCard uses 16-digit numbers, and Visa uses 13- and 16-digit numbers. And those are decimal numbers (0 through 9), not binary, which means, for instance, that American Express could print as many as 10^15 = 1,000,000,000,000,000 unique cards! (That\u2019s, um, a quadrillion.)"),(0,a.kt)("p",null,"Actually, that\u2019s a bit of an exaggeration, because credit card numbers actually have some structure to them. All American Express numbers start with 34 or 37; most MasterCard numbers start with 51, 52, 53, 54, or 55 (they also have some other potential starting numbers which we won\u2019t concern ourselves with for this problem); and all Visa numbers start with 4. But credit card numbers also have a \u201cchecksum\u201d built into them, a mathematical relationship between at least one number and others. That checksum enables computers (or humans who like math) to detect typos (e.g., transpositions), if not fraudulent numbers, without having to query a database, which can be slow. Of course, a dishonest mathematician could certainly craft a fake number that nonetheless respects the mathematical constraint, so a database lookup is still necessary for more rigorous checks."),(0,a.kt)("h2",{id:"luhns-algorithm"},(0,a.kt)("a",{parentName:"h2",href:"#luhns-algorithm"},"Luhn\u2019s Algorithm")),(0,a.kt)("p",null,"So what\u2019s the secret formula? Well, most cards use an algorithm invented by Hans Peter Luhn of IBM. According to Luhn\u2019s algorithm, you can determine if a credit card number is (syntactically) valid as follows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Multiply every other digit by 2, starting with the number\u2019s second-to-last digit, and then add those products\u2019 digits together."),(0,a.kt)("li",{parentName:"ol"},"Add the sum to the sum of the digits that weren\u2019t multiplied by 2."),(0,a.kt)("li",{parentName:"ol"},"If the total\u2019s last digit is 0 (or, put more formally, if the total modulo 10 is congruent to 0), the number is valid!")),(0,a.kt)("p",null,"That\u2019s kind of confusing, so let\u2019s try an example with David\u2019s Visa: 4003600000000014."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"For the sake of discussion, let\u2019s first underline every other digit, starting with the number\u2019s second-to-last digit:"),(0,a.kt)("p",{parentName:"li"},"4003600000000014"),(0,a.kt)("p",{parentName:"li"},"Okay, let\u2019s multiply each of the underlined digits by 2:"),(0,a.kt)("p",{parentName:"li"},"1\u20222 + 0\u20222 + 0\u20222 + 0\u20222 + 0\u20222 + 6\u20222 + 0\u20222 + 4\u20222"),(0,a.kt)("p",{parentName:"li"},"That gives us:"),(0,a.kt)("p",{parentName:"li"},"2 + 0 + 0 + 0 + 0 + 12 + 0 + 8"),(0,a.kt)("p",{parentName:"li"},"Now let\u2019s add those products\u2019 digits (i.e., not the products themselves) together:"),(0,a.kt)("p",{parentName:"li"},"2 + 0 + 0 + 0 + 0 + 1 + 2 + 0 + 8 = 13")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Now let\u2019s add that sum (13) to the sum of the digits that weren\u2019t multiplied by 2 (starting from the end):"),(0,a.kt)("p",{parentName:"li"},"13 + 4 + 0 + 0 + 0 + 0 + 0 + 3 + 0 = 20")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Yup, the last digit in that sum (20) is a 0, so David\u2019s card is legit!"))),(0,a.kt)("p",null,"So, validating credit card numbers isn\u2019t hard, but it does get a bit tedious by hand. Let\u2019s write a program."),(0,a.kt)("h2",{id:"implementation-details"},(0,a.kt)("a",{parentName:"h2",href:"#implementation-details"},"Implementation Details")),(0,a.kt)("p",null,"In the file called ",(0,a.kt)("inlineCode",{parentName:"p"},"credit.c")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"credit")," directory, write a program that prompts the user for a credit card number and then reports (via ",(0,a.kt)("inlineCode",{parentName:"p"},"printf"),") whether it is a valid American Express, MasterCard, or Visa card number, per the definitions of each\u2019s format herein. So that we can automate some tests of your code, we ask that your program\u2019s last line of output be ",(0,a.kt)("inlineCode",{parentName:"p"},"AMEX\\n")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"MASTERCARD\\n")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"VISA\\n")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"INVALID\\n"),", nothing more, nothing less. For simplicity, you may assume that the user\u2019s input will be entirely numeric (i.e., devoid of hyphens, as might be printed on an actual card) and that it won\u2019t have leading zeroes. But do not assume that the user\u2019s input will fit in an ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),"! Best to use ",(0,a.kt)("inlineCode",{parentName:"p"},"get_long")," from CS50\u2019s library to get users\u2019 input. (Why?)"),(0,a.kt)("p",null,"Consider the below representative of how your own program should behave when passed a valid credit card number (sans hyphens)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ./credit\nNumber: 4003600000000014\nVISA\n\n")),(0,a.kt)("p",null,"Now, ",(0,a.kt)("inlineCode",{parentName:"p"},"get_long")," itself will reject hyphens (and more) anyway:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ./credit\nNumber: 4003-6000-0000-0014\nNumber: foo\nNumber: 4003600000000014\nVISA\n\n")),(0,a.kt)("p",null,"But it\u2019s up to you to catch inputs that are not credit card numbers (e.g., a phone number), even if numeric:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ./credit\nNumber: 6176292929\nINVALID\n\n")),(0,a.kt)("p",null,"Test out your program with a whole bunch of inputs, both valid and invalid. (We certainly will!) Here are a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.paypal.com/api/nvp-soap/payflow/integration-guide/test-transactions/#standard-test-cards"},"few card numbers")," that PayPal recommends for testing."),(0,a.kt)("p",null,"If your program behaves incorrectly on some inputs (or doesn\u2019t compile at all), time to debug!"),(0,a.kt)("h3",{id:"walkthrough"},(0,a.kt)("a",{parentName:"h3",href:"#walkthrough"},"Walkthrough")),(0,a.kt)("h3",{id:"how-to-test-your-code"},(0,a.kt)("a",{parentName:"h3",href:"#how-to-test-your-code"},"How to Test Your Code")),(0,a.kt)("p",null,"You can also execute the below to evaluate the correctness of your code using ",(0,a.kt)("inlineCode",{parentName:"p"},"check50"),". But be sure to compile and test it yourself as well!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"check50 cs50/problems/2023/x/credit\n\n")),(0,a.kt)("p",null,"Execute the below to evaluate the style of your code using ",(0,a.kt)("inlineCode",{parentName:"p"},"style50"),"."),(0,a.kt)("h2",{id:"how-to-submit"},(0,a.kt)("a",{parentName:"h2",href:"#how-to-submit"},"How to Submit")),(0,a.kt)("p",null,"In your terminal, execute the below to submit your work."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"submit50 cs50/problems/2023/x/credit\n\n")))}p.isMDXComponent=!0}}]);