"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[6738],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=d(n),p=i,m=h["".concat(s,".").concat(p)]||h[p]||u[p]||o;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},35910:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_position:2,description:"cs50x problem set runoff",title:"runoff"},r="Runoff - CS50x 2023",l={unversionedId:"curriculum-resource/cs50x/cs50x_en/lecture4/problem set/runoff",id:"curriculum-resource/cs50x/cs50x_en/lecture4/problem set/runoff",title:"runoff",description:"cs50x problem set runoff",source:"@site/docs/curriculum-resource/cs50x/cs50x_en/lecture4/problem set/runoff.md",sourceDirName:"curriculum-resource/cs50x/cs50x_en/lecture4/problem set",slug:"/curriculum-resource/cs50x/cs50x_en/lecture4/problem set/runoff",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture4/problem set/runoff",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"cs50x problem set runoff",title:"runoff"},sidebar:"tutorialSidebar",previous:{title:"plurality",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture4/problem set/plurality"},next:{title:"tideman",permalink:"/docs/curriculum-resource/cs50x/cs50x_en/lecture4/problem set/tideman"}},s={},d=[{value:"Background",id:"background",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Understanding",id:"understanding",level:2},{value:"Specification",id:"specification",level:2},{value:"<code>vote</code>",id:"vote",level:3},{value:"<code>tabulate</code>",id:"tabulate",level:3},{value:"<code>print_winner</code>",id:"print_winner",level:3},{value:"<code>find_min</code>",id:"find_min",level:3},{value:"<code>is_tie</code>",id:"is_tie",level:3},{value:"<code>eliminate</code>",id:"eliminate",level:3},{value:"Walkthrough",id:"walkthrough",level:2},{value:"Usage",id:"usage",level:2},{value:"Testing",id:"testing",level:2},{value:"How to Submit",id:"how-to-submit",level:2}],c={toc:d},h="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(h,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"runoff---cs50x-2023"},"Runoff - CS50x 2023"),(0,i.kt)("p",null,"For this program, you\u2019ll implement a program that runs a runoff election, per the below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./runoff Alice Bob Charlie\nNumber of voters: 5\nRank 1: Alice\nRank 2: Bob\nRank 3: Charlie\n\nRank 1: Alice\nRank 2: Charlie\nRank 3: Bob\n\nRank 1: Bob\nRank 2: Charlie\nRank 3: Alice\n\nRank 1: Bob\nRank 2: Alice\nRank 3: Charlie\n\nRank 1: Charlie\nRank 2: Alice\nRank 3: Bob\n\nAlice\n\n")),(0,i.kt)("h2",{id:"background"},(0,i.kt)("a",{parentName:"h2",href:"#background"},"Background")),(0,i.kt)("p",null,"You already know about plurality elections, which follow a very simple algorithm for determining the winner of an election: every voter gets one vote, and the candidate with the most votes wins."),(0,i.kt)("p",null,"But the plurality vote does have some disadvantages. What happens, for instance, in an election with three candidates, and the ballots below are cast?"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Five ballots, tie betweeen Alice and Bob",src:n(95162).Z,width:"1662",height:"456"})),(0,i.kt)("p",null,"A plurality vote would here declare a tie between Alice and Bob, since each has two votes. But is that the right outcome?"),(0,i.kt)("p",null,"There\u2019s another kind of voting system known as a ranked-choice voting system. In a ranked-choice system, voters can vote for more than one candidate. Instead of just voting for their top choice, they can rank the candidates in order of preference. The resulting ballots might therefore look like the below."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Three ballots, with ranked preferences",src:n(12502).Z,width:"1662",height:"456"})),(0,i.kt)("p",null,"Here, each voter, in addition to specifying their first preference candidate, has also indicated their second and third choices. And now, what was previously a tied election could now have a winner. The race was originally tied between Alice and Bob, so Charlie was out of the running. But the voter who chose Charlie preferred Alice over Bob, so Alice could here be declared the winner."),(0,i.kt)("p",null,"Ranked choice voting can also solve yet another potential drawback of plurality voting. Take a look at the following ballots."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Nine ballots, with ranked preferences",src:n(46915).Z,width:"1662",height:"934"})),(0,i.kt)("p",null,"Who should win this election? In a plurality vote where each voter chooses their first preference only, Charlie wins this election with four votes compared to only three for Bob and two for Alice. But a majority of the voters (5 out of the 9) would be happier with either Alice or Bob instead of Charlie. By considering ranked preferences, a voting system may be able to choose a winner that better reflects the preferences of the voters."),(0,i.kt)("p",null,"One such ranked choice voting system is the instant runoff system. In an instant runoff election, voters can rank as many candidates as they wish. If any candidate has a majority (more than 50%) of the first preference votes, that candidate is declared the winner of the election."),(0,i.kt)("p",null,"If no candidate has more than 50% of the vote, then an \u201cinstant runoff\u201d occurs. The candidate who received the fewest number of votes is eliminated from the election, and anyone who originally chose that candidate as their first preference now has their second preference considered. Why do it this way? Effectively, this simulates what would have happened if the least popular candidate had not been in the election to begin with."),(0,i.kt)("p",null,"The process repeats: if no candidate has a majority of the votes, the last place candidate is eliminated, and anyone who voted for them will instead vote for their next preference (who hasn\u2019t themselves already been eliminated). Once a candidate has a majority, that candidate is declared the winner."),(0,i.kt)("p",null,"Let\u2019s consider the nine ballots above and examine how a runoff election would take place."),(0,i.kt)("p",null,"Alice has two votes, Bob has three votes, and Charlie has four votes. To win an election with nine people, a majority (five votes) is required. Since nobody has a majority, a runoff needs to be held. Alice has the fewest number of votes (with only two), so Alice is eliminated. The voters who originally voted for Alice listed Bob as second preference, so Bob gets the extra two vote. Bob now has five votes, and Charlie still has four votes. Bob now has a majority, and Bob is declared the winner."),(0,i.kt)("p",null,"What corner cases do we need to consider here?"),(0,i.kt)("p",null,"One possibility is that there\u2019s a tie for who should get eliminated. We can handle that scenario by saying all candidates who are tied for last place will be eliminated. If every remaining candidate has the exact same number of votes, though, eliminating the tied last place candidates means eliminating everyone! So in that case, we\u2019ll have to be careful not to eliminate everyone, and just declare the election a tie between all remaining candidates."),(0,i.kt)("p",null,"Some instant runoff elections don\u2019t require voters to rank all of their preferences \u2014 so there might be five candidates in an election, but a voter might only choose two. For this problem\u2019s purposes, though, we\u2019ll ignore that particular corner case, and assume that all voters will rank all of the candidates in their preferred order."),(0,i.kt)("p",null,"Sounds a bit more complicated than a plurality vote, doesn\u2019t it? But it arguably has the benefit of being an election system where the winner of the election more accurately represents the preferences of the voters."),(0,i.kt)("h2",{id:"getting-started"},(0,i.kt)("a",{parentName:"h2",href:"#getting-started"},"Getting Started")),(0,i.kt)("p",null,"Log into ",(0,i.kt)("a",{parentName:"p",href:"https://cs50.dev/"},"cs50.dev"),", click on your terminal window, and execute ",(0,i.kt)("inlineCode",{parentName:"p"},"cd")," by itself. You should find that your terminal window\u2019s prompt resembles the below:"),(0,i.kt)("p",null,"Next execute"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"wget https://cdn.cs50.net/2022/fall/psets/3/runoff.zip\n\n")),(0,i.kt)("p",null,"in order to download a ZIP called ",(0,i.kt)("inlineCode",{parentName:"p"},"runoff.zip")," into your codespace."),(0,i.kt)("p",null,"Then execute"),(0,i.kt)("p",null,"to create a folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"runoff"),". You no longer need the ZIP file, so you can execute"),(0,i.kt)("p",null,"and respond with \u201cy\u201d followed by Enter at the prompt to remove the ZIP file you downloaded."),(0,i.kt)("p",null,"Now type"),(0,i.kt)("p",null,"followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below."),(0,i.kt)("p",null,"If all was successful, you should execute"),(0,i.kt)("p",null,"and see a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"runoff.c"),". Executing ",(0,i.kt)("inlineCode",{parentName:"p"},"code runoff.c")," should open the file where you will type your code for this problem set. If not, retrace your steps and see if you can determine where you went wrong!"),(0,i.kt)("h2",{id:"understanding"},(0,i.kt)("a",{parentName:"h2",href:"#understanding"},"Understanding")),(0,i.kt)("p",null,"Let\u2019s take a look at ",(0,i.kt)("inlineCode",{parentName:"p"},"runoff.c"),". We\u2019re defining two constants: ",(0,i.kt)("inlineCode",{parentName:"p"},"MAX_CANDIDATES")," for the maximum number of candidates in the election, and ",(0,i.kt)("inlineCode",{parentName:"p"},"MAX_VOTERS")," for the maximum number of voters in the election."),(0,i.kt)("p",null,"Next up is a two-dimensional array ",(0,i.kt)("inlineCode",{parentName:"p"},"preferences"),". The array ",(0,i.kt)("inlineCode",{parentName:"p"},"preferences[i]")," will represent all of the preferences for voter number ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),", and the integer ",(0,i.kt)("inlineCode",{parentName:"p"},"preferences[i][j]")," here will store the index of the candidate who is the ",(0,i.kt)("inlineCode",{parentName:"p"},"j"),"th preference for voter ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),"."),(0,i.kt)("p",null,"Next up is a ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"candidate"),". Every ",(0,i.kt)("inlineCode",{parentName:"p"},"candidate")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," field for their ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," representing the number of ",(0,i.kt)("inlineCode",{parentName:"p"},"votes")," they currently have, and a ",(0,i.kt)("inlineCode",{parentName:"p"},"bool")," value called ",(0,i.kt)("inlineCode",{parentName:"p"},"eliminated")," that indicates whether the candidate has been eliminated from the election. The array ",(0,i.kt)("inlineCode",{parentName:"p"},"candidates")," will keep track of all of the candidates in the election."),(0,i.kt)("p",null,"The program also has two global variables: ",(0,i.kt)("inlineCode",{parentName:"p"},"voter_count")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"candidate_count"),"."),(0,i.kt)("p",null,"Now onto ",(0,i.kt)("inlineCode",{parentName:"p"},"main"),". Notice that after determining the number of candidates and the number of voters, the main voting loop begins, giving every voter a chance to vote. As the voter enters their preferences, the ",(0,i.kt)("inlineCode",{parentName:"p"},"vote")," function is called to keep track of all of the preferences. If at any point, the ballot is deemed to be invalid, the program exits."),(0,i.kt)("p",null,"Once all of the votes are in, another loop begins: this one\u2019s going to keep looping through the runoff process of checking for a winner and eliminating the last place candidate until there is a winner."),(0,i.kt)("p",null,"The first call here is to a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"tabulate"),", which should look at all of the voters\u2019 preferences and compute the current vote totals, by looking at each voter\u2019s top choice candidate who hasn\u2019t yet been eliminated. Next, the ",(0,i.kt)("inlineCode",{parentName:"p"},"print_winner")," function should print out the winner if there is one; if there is, the program is over. But otherwise, the program needs to determine the fewest number of votes anyone still in the election received (via a call to ",(0,i.kt)("inlineCode",{parentName:"p"},"find_min"),"). If it turns out that everyone in the election is tied with the same number of votes (as determined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"is_tie")," function), the election is declared a tie; otherwise, the last-place candidate (or candidates) is eliminated from the election via a call to the ",(0,i.kt)("inlineCode",{parentName:"p"},"eliminate")," function."),(0,i.kt)("p",null,"If you look a bit further down in the file, you\u2019ll see that these functions \u2014 ",(0,i.kt)("inlineCode",{parentName:"p"},"vote"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"tabulate"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"print_winner"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"find_min"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"is_tie"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"eliminate")," \u2014 are all left to up to you to complete!"),(0,i.kt)("h2",{id:"specification"},(0,i.kt)("a",{parentName:"h2",href:"#specification"},"Specification")),(0,i.kt)("p",null,"Complete the implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"runoff.c")," in such a way that it simulates a runoff election. You should complete the implementations of the ",(0,i.kt)("inlineCode",{parentName:"p"},"vote"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"tabulate"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"print_winner"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"find_min"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"is_tie"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"eliminate")," functions, and you should not modify anything else in ",(0,i.kt)("inlineCode",{parentName:"p"},"runoff.c")," (and the inclusion of additional header files, if you\u2019d like)."),(0,i.kt)("h3",{id:"vote"},(0,i.kt)("a",{parentName:"h3",href:"#vote"},(0,i.kt)("inlineCode",{parentName:"a"},"vote"))),(0,i.kt)("p",null,"Complete the ",(0,i.kt)("inlineCode",{parentName:"p"},"vote")," function."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The function takes arguments ",(0,i.kt)("inlineCode",{parentName:"li"},"voter"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"rank"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),". If ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," is a match for the name of a valid candidate, then you should update the global preferences array to indicate that the voter ",(0,i.kt)("inlineCode",{parentName:"li"},"voter")," has that candidate as their ",(0,i.kt)("inlineCode",{parentName:"li"},"rank")," preference (where ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," is the first preference, ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," is the second preference, etc.)."),(0,i.kt)("li",{parentName:"ul"},"If the preference is successfully recorded, the function should return ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),"; the function should return ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," otherwise (if, for instance, ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," is not the name of one of the candidates)."),(0,i.kt)("li",{parentName:"ul"},"You may assume that no two candidates will have the same name.")),(0,i.kt)("p",null,"Hints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Recall that ",(0,i.kt)("inlineCode",{parentName:"li"},"candidate_count")," stores the number of candidates in the election."),(0,i.kt)("li",{parentName:"ul"},"Recall that you can use ",(0,i.kt)("a",{parentName:"li",href:"https://man.cs50.io/3/strcmp"},(0,i.kt)("inlineCode",{parentName:"a"},"strcmp"))," to compare two strings."),(0,i.kt)("li",{parentName:"ul"},"Recall that ",(0,i.kt)("inlineCode",{parentName:"li"},"preferences[i][j]")," stores the index of the candidate who is the ",(0,i.kt)("inlineCode",{parentName:"li"},"j"),"th ranked preference for the ",(0,i.kt)("inlineCode",{parentName:"li"},"i"),"th voter.")),(0,i.kt)("h3",{id:"tabulate"},(0,i.kt)("a",{parentName:"h3",href:"#tabulate"},(0,i.kt)("inlineCode",{parentName:"a"},"tabulate"))),(0,i.kt)("p",null,"Complete the ",(0,i.kt)("inlineCode",{parentName:"p"},"tabulate")," function."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The function should update the number of ",(0,i.kt)("inlineCode",{parentName:"li"},"votes")," each candidate has at this stage in the runoff."),(0,i.kt)("li",{parentName:"ul"},"Recall that at each stage in the runoff, every voter effectively votes for their top-preferred candidate who has not already been eliminated.")),(0,i.kt)("p",null,"Hints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Recall that ",(0,i.kt)("inlineCode",{parentName:"li"},"voter_count")," stores the number of voters in the election and that, for each voter in our election, we want to count one ballot."),(0,i.kt)("li",{parentName:"ul"},"Recall that for a voter ",(0,i.kt)("inlineCode",{parentName:"li"},"i"),", their top choice candidate is represented by ",(0,i.kt)("inlineCode",{parentName:"li"},"preferences[i][0]"),", their second choice candidate by ",(0,i.kt)("inlineCode",{parentName:"li"},"preferences[i][1]"),", etc."),(0,i.kt)("li",{parentName:"ul"},"Recall that the ",(0,i.kt)("inlineCode",{parentName:"li"},"candidate")," ",(0,i.kt)("inlineCode",{parentName:"li"},"struct")," has a field called ",(0,i.kt)("inlineCode",{parentName:"li"},"eliminated"),", which will be ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if the candidate has been eliminated from the election."),(0,i.kt)("li",{parentName:"ul"},"Recall that the ",(0,i.kt)("inlineCode",{parentName:"li"},"candidate")," ",(0,i.kt)("inlineCode",{parentName:"li"},"struct")," has a field called ",(0,i.kt)("inlineCode",{parentName:"li"},"votes"),", which you\u2019ll likely want to update for each voter\u2019s preferred candidate."),(0,i.kt)("li",{parentName:"ul"},"Once you\u2019ve cast a vote for a voter\u2019s first non-eliminated candidate, you\u2019ll want to stop there, not continue down their ballot! Recall that you can break out of a loop early using ",(0,i.kt)("inlineCode",{parentName:"li"},"break")," inside of a conditional.")),(0,i.kt)("h3",{id:"print_winner"},(0,i.kt)("a",{parentName:"h3",href:"#print_winner"},(0,i.kt)("inlineCode",{parentName:"a"},"print_winner"))),(0,i.kt)("p",null,"Complete the ",(0,i.kt)("inlineCode",{parentName:"p"},"print_winner")," function."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If any candidate has more than half of the vote, their name should be printed and the function should return ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,i.kt)("li",{parentName:"ul"},"If nobody has won the election yet, the function should return ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("p",null,"Hints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Recall that ",(0,i.kt)("inlineCode",{parentName:"li"},"voter_count")," stores the number of voters in the election. Given that, how would you express the number of votes needed to win the election?")),(0,i.kt)("h3",{id:"find_min"},(0,i.kt)("a",{parentName:"h3",href:"#find_min"},(0,i.kt)("inlineCode",{parentName:"a"},"find_min"))),(0,i.kt)("p",null,"Complete the ",(0,i.kt)("inlineCode",{parentName:"p"},"find_min")," function."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The function should return the minimum vote total for any candidate who is still in the election.")),(0,i.kt)("p",null,"Hints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You\u2019ll likely want to loop through the candidates to find the one who is both still in the election and has the fewest number of votes. What information should you keep track of as you loop through the candidates?")),(0,i.kt)("h3",{id:"is_tie"},(0,i.kt)("a",{parentName:"h3",href:"#is_tie"},(0,i.kt)("inlineCode",{parentName:"a"},"is_tie"))),(0,i.kt)("p",null,"Complete the ",(0,i.kt)("inlineCode",{parentName:"p"},"is_tie")," function."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The function takes an argument ",(0,i.kt)("inlineCode",{parentName:"li"},"min"),", which will be the minimum number of votes that anyone in the election currently has."),(0,i.kt)("li",{parentName:"ul"},"The function should return ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if every candidate remaining in the election has the same number of votes, and should return ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," otherwise.")),(0,i.kt)("p",null,"Hints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Recall that a tie happens if every candidate still in the election has the same number of votes. Note, too, that the ",(0,i.kt)("inlineCode",{parentName:"li"},"is_tie")," function takes an argument ",(0,i.kt)("inlineCode",{parentName:"li"},"min"),", which is the smallest number of votes any candidate currently has. How might you use that information to determine if the election is a tie (or, conversely, not a tie)?")),(0,i.kt)("h3",{id:"eliminate"},(0,i.kt)("a",{parentName:"h3",href:"#eliminate"},(0,i.kt)("inlineCode",{parentName:"a"},"eliminate"))),(0,i.kt)("p",null,"Complete the ",(0,i.kt)("inlineCode",{parentName:"p"},"eliminate")," function."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The function takes an argument ",(0,i.kt)("inlineCode",{parentName:"li"},"min"),", which will be the minimum number of votes that anyone in the election currently has."),(0,i.kt)("li",{parentName:"ul"},"The function should eliminate the candidate (or candidates) who have ",(0,i.kt)("inlineCode",{parentName:"li"},"min")," number of votes.")),(0,i.kt)("h2",{id:"walkthrough"},(0,i.kt)("a",{parentName:"h2",href:"#walkthrough"},"Walkthrough")),(0,i.kt)("h2",{id:"usage"},(0,i.kt)("a",{parentName:"h2",href:"#usage"},"Usage")),(0,i.kt)("p",null,"Your program should behave per the example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./runoff Alice Bob Charlie\nNumber of voters: 5\nRank 1: Alice\nRank 2: Charlie\nRank 3: Bob\n\nRank 1: Alice\nRank 2: Charlie\nRank 3: Bob\n\nRank 1: Bob\nRank 2: Charlie\nRank 3: Alice\n\nRank 1: Bob\nRank 2: Charlie\nRank 3: Alice\n\nRank 1: Charlie\nRank 2: Alice\nRank 3: Bob\n\nAlice\n\n")),(0,i.kt)("h2",{id:"testing"},(0,i.kt)("a",{parentName:"h2",href:"#testing"},"Testing")),(0,i.kt)("p",null,"Be sure to test your code to make sure it handles\u2026"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An election with any number of candidate (up to the ",(0,i.kt)("inlineCode",{parentName:"li"},"MAX")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"9"),")"),(0,i.kt)("li",{parentName:"ul"},"Voting for a candidate by name"),(0,i.kt)("li",{parentName:"ul"},"Invalid votes for candidates who are not on the ballot"),(0,i.kt)("li",{parentName:"ul"},"Printing the winner of the election if there is only one"),(0,i.kt)("li",{parentName:"ul"},"Not eliminating anyone in the case of a tie between all remaining candidates")),(0,i.kt)("p",null,"Execute the below to evaluate the correctness of your code using ",(0,i.kt)("inlineCode",{parentName:"p"},"check50"),". But be sure to compile and test it yourself as well!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"check50 cs50/problems/2023/x/runoff\n\n")),(0,i.kt)("p",null,"Execute the below to evaluate the style of your code using ",(0,i.kt)("inlineCode",{parentName:"p"},"style50"),"."),(0,i.kt)("h2",{id:"how-to-submit"},(0,i.kt)("a",{parentName:"h2",href:"#how-to-submit"},"How to Submit")),(0,i.kt)("p",null,"In your terminal, execute the below to submit your work."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"submit50 cs50/problems/2023/x/runoff\n\n")))}u.isMDXComponent=!0},95162:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/fptp_ballot_1-9fe9b7f53ee16b7d5c11df9db6560f1c.png"},12502:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ranked_ballot_1-5c2b4a216638b04798dd4886ffcb2db1.png"},46915:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ranked_ballot_3-346ba5d56980ee781f4b1641c7a0e40c.png"}}]);