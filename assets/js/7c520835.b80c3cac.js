"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[57584],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[p]="string"==typeof e?e:a,i[1]=u;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},27914:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"Homework 2 Higher-Order Functions"},i="Homework 2 | CS 61A Spring 2024",u={unversionedId:"curriculum-resource/cs61a/cs61a_en/homework/hw02",id:"curriculum-resource/cs61a/cs61a_en/homework/hw02",title:"Homework 2 Higher-Order Functions",description:"Homework 2: Higher-Order Functions",source:"@site/docs/curriculum-resource/cs61a/cs61a_en/homework/hw02.md",sourceDirName:"curriculum-resource/cs61a/cs61a_en/homework",slug:"/curriculum-resource/cs61a/cs61a_en/homework/hw02",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/homework/hw02",draft:!1,tags:[],version:"current",frontMatter:{title:"Homework 2 Higher-Order Functions"},sidebar:"tutorialSidebar",previous:{title:"Homework 1 Functions, Control",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/homework/hw01"},next:{title:"Homework 3 Recursion, Tree Recursion",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/homework/hw03"}},s={},l=[{value:"Homework 2: Higher-Order Functions",id:"homework-2-higher-order-functions",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Required Questions",id:"required-questions",level:2},{value:"Getting Started Videos",id:"getting-started-videos",level:2},{value:"Higher-Order Functions",id:"higher-order-functions",level:2},{value:"Q1: Product",id:"q1-product",level:3},{value:"Q2: Accumulate",id:"q2-accumulate",level:3},{value:"Q3: Make Repeater",id:"q3-make-repeater",level:3},{value:"Check Your Score Locally",id:"check-your-score-locally",level:2},{value:"Submit",id:"submit",level:2},{value:"Exam Practice",id:"exam-practice",level:2}],c={toc:l},p="wrapper";function m(e){let{components:t,...o}=e;return(0,a.kt)(p,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"homework-2--cs-61a-spring-2024"},"Homework 2 | CS 61A Spring 2024"),(0,a.kt)("h2",{id:"homework-2-higher-order-functions"},"Homework 2: Higher-Order Functions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{target:"_blank",href:n(40530).Z},"hw02.zip"))),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Due by 11:59pm on Thursday, February 1")),(0,a.kt)("h2",{id:"instructions"},"Instructions"),(0,a.kt)("p",null,"Download ",(0,a.kt)("a",{target:"_blank",href:n(40530).Z},"hw02.zip"),". Inside the archive, you will find a file called ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org//hw/hw02/hw02.py"},"hw02.py"),", along with a copy of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ok")," autograder."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Submission:")," When you are done, submit the assignment by uploading all code files you've edited to Gradescope. You may submit more than once before the deadline; only the final submission will be scored. Check that you have successfully submitted your code on Gradescope. See ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00#task-c-submitting-the-assignment"},"Lab 0")," for more instructions on submitting assignments."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Using Ok:")," If you have any questions about using Ok, please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/using-ok"},"this guide.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Readings:")," You might find the following references useful:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.composingprograms.com/pages/16-higher-order-functions.html"},"Section 1.6"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Grading:")," Homework is graded based on correctness. Each incorrect problem will decrease the total score by one point. ",(0,a.kt)("strong",{parentName:"p"},"This homework is out of 2 points.")),(0,a.kt)("h2",{id:"required-questions"},"Required Questions"),(0,a.kt)("h2",{id:"getting-started-videos"},"Getting Started Videos"),(0,a.kt)("p",null,"These videos may provide some helpful direction for tackling the coding problems on this assignment."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To see these videos, you should be logged into your berkeley.edu email.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/playlist?list=PLx38hZJ5RLZccKjCjJSv4aCdx6s0u0lo5"},"YouTube link")),(0,a.kt)("p",null,"Several doctests refer to these functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"from operator import add, mul\n\nsquare = lambda x: x * x\n\nidentity = lambda x: x\n\ntriple = lambda x: 3 * x\n\nincrement = lambda x: x + 1\n")),(0,a.kt)("h2",{id:"higher-order-functions"},"Higher-Order Functions"),(0,a.kt)("h3",{id:"q1-product"},"Q1: Product"),(0,a.kt)("p",null,"Write a function called ",(0,a.kt)("inlineCode",{parentName:"p"},"product")," that returns the product of the first ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," terms of a sequence. Specifically, ",(0,a.kt)("inlineCode",{parentName:"p"},"product")," takes in an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"term"),", a single-argument function that determines a sequence. (That is, ",(0,a.kt)("inlineCode",{parentName:"p"},"term(i)")," gives the ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),"th term of the sequence.) ",(0,a.kt)("inlineCode",{parentName:"p"},"product(n, term)")," should return ",(0,a.kt)("inlineCode",{parentName:"p"},"term(1) * ... * term(n)"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def product(n, term):\n    """Return the product of the first n terms in a sequence.\n\n    n: a positive integer\n    term:  a function that takes one argument to produce the term\n\n    >>> product(3, identity)  # 1 * 2 * 3\n    6\n    >>> product(5, identity)  # 1 * 2 * 3 * 4 * 5\n    120\n    >>> product(3, square)    # 1^2 * 2^2 * 3^2\n    36\n    >>> product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2\n    14400\n    >>> product(3, increment) # (1+1) * (2+1) * (3+1)\n    24\n    >>> product(3, triple)    # 1*3 * 2*3 * 3*3\n    162\n    """\n    "*** YOUR CODE HERE ***"\n\n')),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q product\n")),(0,a.kt)("h3",{id:"q2-accumulate"},"Q2: Accumulate"),(0,a.kt)("p",null,"Let's take a look at how ",(0,a.kt)("inlineCode",{parentName:"p"},"product")," is an instance of a more general function called ",(0,a.kt)("inlineCode",{parentName:"p"},"accumulate"),", which we would like to implement:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def accumulate(fuse, start, n, term):\n    """Return the result of fusing together the first n terms in a sequence \n    and start.  The terms to be fused are term(1), term(2), ..., term(n). \n    The function fuse is a two-argument commutative & associative function.\n\n    >>> accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5\n    15\n    >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5\n    26\n    >>> accumulate(add, 11, 0, identity) # 11 (fuse is never used)\n    11\n    >>> accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2\n    25\n    >>> accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2\n    72\n    >>> # 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)\n    >>> accumulate(lambda x, y: x + y + 1, 2, 3, square)\n    19\n    """\n    "*** YOUR CODE HERE ***"\n\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"accumulate")," has the following parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fuse"),": a two-argument function that specifies how the current term is fused with the previously accumulated terms"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start"),": value at which to start the accumulation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n"),": a non-negative integer indicating the number of terms to fuse"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"term"),": a single-argument function; ",(0,a.kt)("inlineCode",{parentName:"li"},"term(i)")," is the ",(0,a.kt)("inlineCode",{parentName:"li"},"i"),"th term of the sequence")),(0,a.kt)("p",null,"Implement ",(0,a.kt)("inlineCode",{parentName:"p"},"accumulate"),", which fuses the first ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," terms of the sequence defined by ",(0,a.kt)("inlineCode",{parentName:"p"},"term")," with the ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," value using the ",(0,a.kt)("inlineCode",{parentName:"p"},"fuse")," function."),(0,a.kt)("p",null,"For example, the result of ",(0,a.kt)("inlineCode",{parentName:"p"},"accumulate(add, 11, 3, square)")," is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"add(11,  add(square(1), add(square(2),  square(3)))) =\n    11 +     square(1) +    square(2) + square(3)    =\n    11 +     1         +    4         + 9            = 25\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Assume that ",(0,a.kt)("inlineCode",{parentName:"p"},"fuse")," is commutative, ",(0,a.kt)("inlineCode",{parentName:"p"},"fuse(a, b) == fuse(b, a)"),", and associative, ",(0,a.kt)("inlineCode",{parentName:"p"},"fuse(fuse(a, b), c) == fuse(a, fuse(b, c))"),".")),(0,a.kt)("p",null,"Then, implement ",(0,a.kt)("inlineCode",{parentName:"p"},"summation")," (from lecture) and ",(0,a.kt)("inlineCode",{parentName:"p"},"product")," as one-line calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"accumulate"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important:")," Both ",(0,a.kt)("inlineCode",{parentName:"p"},"summation_using_accumulate")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"product_using_accumulate")," should be implemented with a single line of code starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"return"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def summation_using_accumulate(n, term):\n    """Returns the sum: term(1) + ... + term(n), using accumulate.\n\n    >>> summation_using_accumulate(5, square)\n    55\n    >>> summation_using_accumulate(5, triple)\n    45\n    >>> # This test checks that the body of the function is just a return statement.\n    >>> import inspect, ast\n    >>> [type(x).__name__ for x in ast.parse(inspect.getsource(summation_using_accumulate)).body[0].body]\n    [\'Expr\', \'Return\']\n    """\n    return ____\n\ndef product_using_accumulate(n, term):\n    """Returns the product: term(1) * ... * term(n), using accumulate.\n\n    >>> product_using_accumulate(4, square)\n    576\n    >>> product_using_accumulate(6, triple)\n    524880\n    >>> # This test checks that the body of the function is just a return statement.\n    >>> import inspect, ast\n    >>> [type(x).__name__ for x in ast.parse(inspect.getsource(product_using_accumulate)).body[0].body]\n    [\'Expr\', \'Return\']\n    """\n    return ____\n\n')),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q accumulate\npython3 ok -q summation_using_accumulate\npython3 ok -q product_using_accumulate\n")),(0,a.kt)("h3",{id:"q3-make-repeater"},"Q3: Make Repeater"),(0,a.kt)("p",null,"Implement the function ",(0,a.kt)("inlineCode",{parentName:"p"},"make_repeater")," that takes a one-argument function ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," and a positive integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),". It returns a one-argument function, where ",(0,a.kt)("inlineCode",{parentName:"p"},"make_repeater(f, n)(x)")," returns the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"f(f(...f(x)...))")," in which ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," is applied ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," times to ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),". For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"make_repeater(square, 3)(5)")," squares 5 three times and returns 390625, just like ",(0,a.kt)("inlineCode",{parentName:"p"},"square(square(square(5)))"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def make_repeater(f, n):\n    """Returns the function that computes the nth application of f.\n\n    >>> add_three = make_repeater(increment, 3)\n    >>> add_three(5)\n    8\n    >>> make_repeater(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1\n    243\n    >>> make_repeater(square, 2)(5) # square(square(5))\n    625\n    >>> make_repeater(square, 3)(5) # square(square(square(5)))\n    390625\n    """\n    "*** YOUR CODE HERE ***"\n\n')),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q make_repeater\n")),(0,a.kt)("h2",{id:"check-your-score-locally"},"Check Your Score Locally"),(0,a.kt)("p",null,"You can locally check your score on each question of this assignment by running"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok --score\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This does NOT submit the assignment!")," When you are satisfied with your score, submit the assignment to Gradescope to receive credit for it."),(0,a.kt)("h2",{id:"submit"},"Submit"),(0,a.kt)("p",null,"Submit this assignment by uploading any files you've edited ",(0,a.kt)("strong",{parentName:"p"},"to the appropriate Gradescope assignment.")," ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00/#submit-with-gradescope"},"Lab 00")," has detailed instructions."),(0,a.kt)("p",null,"In addition, all students who are ",(0,a.kt)("strong",{parentName:"p"},"not")," in the mega lab must complete this ",(0,a.kt)("a",{parentName:"p",href:"https://go.cs61a.org/lab-att"},"attendance form"),". Submit this form each week, whether you attend lab or missed it for a good reason. The attendance form is not required for mega section students."),(0,a.kt)("h2",{id:"exam-practice"},"Exam Practice"),(0,a.kt)("p",null,"Here are some related questions from past exams for you to try. These are optional. There is no way to submit them."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note that exams from Spring 2020, Fall 2020, and Spring 2021 gave students access to an interpreter, so the question format may be different than other years. Regardless, the questions below are good problems to try ",(0,a.kt)("em",{parentName:"p"},"without")," access to an interpreter.")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Fall 2019 MT1 Q3: ",(0,a.kt)("a",{parentName:"li",href:"https://cs61a.org/exam/fa19/mt1/61a-fa19-mt1.pdf#page=4"},"You Again")," ","[","Higher-Order Functions","]"),(0,a.kt)("li",{parentName:"ol"},"Spring 2021 MT1 Q4: ",(0,a.kt)("a",{parentName:"li",href:"https://cs61a.org/exam/sp21/mt1/61a-sp21-mt1.pdf#page=14"},"Domain on the Range")," ","[","Higher-Order Functions","]"),(0,a.kt)("li",{parentName:"ol"},"Fall 2021 MT1 Q1b: ",(0,a.kt)("a",{parentName:"li",href:"https://cs61a.org/exam/fa21/mt1/61a-fa21-mt1.pdf#page=4"},"tik")," ","[","Functions and Expressions","]")))}m.isMDXComponent=!0},40530:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/hw02-fc1e0cc1d9607fcd962a3a175af50798.zip"}}]);