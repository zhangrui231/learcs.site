"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[26780],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,k=c["".concat(u,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(k,o(o({ref:t},s),{},{components:n})):r.createElement(k,o({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const l={},o=void 0,i={unversionedId:"curriculum-resource/cs144/sponge/lab0",id:"curriculum-resource/cs144/sponge/lab0",title:"lab0",description:"For build prereqs, see the CS144 VM setup instructions.",source:"@site/docs/curriculum-resource/cs144/sponge/lab0.md",sourceDirName:"curriculum-resource/cs144/sponge",slug:"/curriculum-resource/cs144/sponge/lab0",permalink:"/docs/curriculum-resource/cs144/sponge/lab0",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"winter 2024 Minnow \u7248",permalink:"/docs/curriculum-resource/cs144/winter_2024"},next:{title:"lab1",permalink:"/docs/curriculum-resource/cs144/sponge/lab1"}},u={},p=[{value:"Sponge quickstart",id:"sponge-quickstart",level:2},{value:"build options",id:"build-options",level:3},{value:"other useful targets",id:"other-useful-targets",level:3}],s={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"For build prereqs, see ",(0,a.kt)("a",{parentName:"p",href:"https://web.stanford.edu/class/cs144/vm_howto"},"the CS144 VM setup instructions"),"."),(0,a.kt)("h2",{id:"sponge-quickstart"},"Sponge quickstart"),(0,a.kt)("p",null,"To set up your build directory:"),(0,a.kt)("p",null,"$ mkdir -p <path/to/sponge",">","/build\n$ cd <path/to/sponge",">","/build\n$ cmake .."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," all further commands listed below should be run from the ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," dir."),(0,a.kt)("p",null,"To build:"),(0,a.kt)("p",null,"$ make"),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"-j")," switch to build in parallel, e.g.,"),(0,a.kt)("p",null,"$ make -j$(nproc)"),(0,a.kt)("p",null,"To test (after building; make sure you've got the ",(0,a.kt)("a",{parentName:"p",href:"https://web.stanford.edu/class/cs144/vm_howto"},"build prereqs")," installed!)"),(0,a.kt)("p",null,"$ make check","_","labN ","*","(replacing N with a checkpoint number)","*"),(0,a.kt)("p",null,"The first time you run ",(0,a.kt)("inlineCode",{parentName:"p"},"make check_lab..."),", it will run ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo")," to configure two ",(0,a.kt)("a",{parentName:"p",href:"https://www.kernel.org/doc/Documentation/networking/tuntap.txt"},"TUN")," devices for use during testing."),(0,a.kt)("h3",{id:"build-options"},"build options"),(0,a.kt)("p",null,"You can specify a different compiler when you run cmake:"),(0,a.kt)("p",null,"$ CC=clang CXX=clang++ cmake .."),(0,a.kt)("p",null,"You can also specify ",(0,a.kt)("inlineCode",{parentName:"p"},"CLANG_TIDY=")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"CLANG_FORMAT="),' (see "other useful targets", below).'),(0,a.kt)("p",null,"Sponge's build system supports several different build targets. By default, cmake chooses the ",(0,a.kt)("inlineCode",{parentName:"p"},"Release")," target, which enables the usual optimizations. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Debug")," target enables debugging and reduces the level of optimization. To choose the ",(0,a.kt)("inlineCode",{parentName:"p"},"Debug")," target:"),(0,a.kt)("p",null,"$ cmake .. -DCMAKE","_","BUILD","_","TYPE=Debug"),(0,a.kt)("p",null,"The following targets are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Release")," - optimizations"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Debug")," - debug symbols and ",(0,a.kt)("inlineCode",{parentName:"li"},"-Og")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RelASan")," - release build with ",(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/AddressSanitizer"},"ASan")," and ",(0,a.kt)("a",{parentName:"li",href:"https://developers.redhat.com/blog/2014/10/16/gcc-undefined-behavior-sanitizer-ubsan/"},"UBSan")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RelTSan")," - release build with ",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Thread_Sanitizer"},"ThreadSan")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DebugASan")," - debug build with ASan and UBSan"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DebugTSan")," - debug build with ThreadSan")),(0,a.kt)("p",null,"Of course, you can combine all of the above, e.g.,"),(0,a.kt)("p",null,"$ CLANG","_","TIDY=clang-tidy-6.0 CXX=clang++-6.0 .. -DCMAKE","_","BUILD","_","TYPE=Debug"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," if you want to change ",(0,a.kt)("inlineCode",{parentName:"p"},"CC"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CXX"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CLANG_TIDY"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"CLANG_FORMAT"),", you need to remove ",(0,a.kt)("inlineCode",{parentName:"p"},"build/CMakeCache.txt")," and re-run cmake. (This isn't necessary for ",(0,a.kt)("inlineCode",{parentName:"p"},"CMAKE_BUILD_TYPE"),".)"),(0,a.kt)("h3",{id:"other-useful-targets"},"other useful targets"),(0,a.kt)("p",null,"To generate documentation (you'll need ",(0,a.kt)("inlineCode",{parentName:"p"},"doxygen"),"; output will be in ",(0,a.kt)("inlineCode",{parentName:"p"},"build/doc/"),"):"),(0,a.kt)("p",null,"$ make doc"),(0,a.kt)("p",null,"To format (you'll need ",(0,a.kt)("inlineCode",{parentName:"p"},"clang-format"),"):"),(0,a.kt)("p",null,"$ make format"),(0,a.kt)("p",null,"To see all available targets,"),(0,a.kt)("p",null,"$ make help"))}d.isMDXComponent=!0}}]);