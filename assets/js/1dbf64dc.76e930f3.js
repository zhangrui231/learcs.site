"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[8338],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8329:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3,description:"cs50x problem set caesar",title:"caesar"},l="Caesar - CS50x 2023",o={unversionedId:"curriculum-resource/cs50x/lecture3/problem set/caesar",id:"curriculum-resource/cs50x/lecture3/problem set/caesar",title:"caesar",description:"cs50x problem set caesar",source:"@site/docs/curriculum-resource/cs50x/lecture3/problem set/caesar.md",sourceDirName:"curriculum-resource/cs50x/lecture3/problem set",slug:"/curriculum-resource/cs50x/lecture3/problem set/caesar",permalink:"/docs/curriculum-resource/cs50x/lecture3/problem set/caesar",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"cs50x problem set caesar",title:"caesar"},sidebar:"tutorialSidebar",previous:{title:"bulbs",permalink:"/docs/curriculum-resource/cs50x/lecture3/problem set/bulbs"},next:{title:"substitution",permalink:"/docs/curriculum-resource/cs50x/lecture3/problem set/substitution"}},p={},s=[{value:"Getting Started",id:"getting-started",level:2},{value:"Background",id:"background",level:2},{value:"Specification",id:"specification",level:2},{value:"Advice",id:"advice",level:2},{value:"Pseudocode",id:"pseudocode",level:3},{value:"Counting Command-Line Arguments",id:"counting-command-line-arguments",level:3},{value:"Checking the Key",id:"checking-the-key",level:3},{value:"Using the Key",id:"using-the-key",level:3},{value:"Walkthrough",id:"walkthrough",level:2},{value:"How to Test Your Code",id:"how-to-test-your-code",level:2},{value:"How to Submit",id:"how-to-submit",level:2}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"caesar---cs50x-2023"},"Caesar - CS50x 2023"),(0,r.kt)("p",null,"For this problem, you\u2019ll implement a program that encrypts messages using Caesar\u2019s cipher, per the below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar 13\nplaintext:  HELLO\nciphertext: URYYB\n\n")),(0,r.kt)("h2",{id:"getting-started"},(0,r.kt)("a",{parentName:"h2",href:"#getting-started"},"Getting Started")),(0,r.kt)("p",null,"Open ",(0,r.kt)("a",{parentName:"p",href:"https://cs50.dev/"},"VS Code"),"."),(0,r.kt)("p",null,"Start by clicking inside your terminal window, then execute ",(0,r.kt)("inlineCode",{parentName:"p"},"cd")," by itself. You should find that its \u201cprompt\u201d resembles the below."),(0,r.kt)("p",null,"Click inside of that terminal window and then execute"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"wget https://cdn.cs50.net/2022/fall/psets/2/caesar.zip\n\n")),(0,r.kt)("p",null,"followed by Enter in order to download a ZIP called ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar.zip")," in your codespace. Take care not to overlook the space between ",(0,r.kt)("inlineCode",{parentName:"p"},"wget")," and the following URL, or any other character for that matter!"),(0,r.kt)("p",null,"Now execute"),(0,r.kt)("p",null,"to create a folder called ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar"),". You no longer need the ZIP file, so you can execute"),(0,r.kt)("p",null,"and respond with \u201cy\u201d followed by Enter at the prompt to remove the ZIP file you downloaded."),(0,r.kt)("p",null,"Now type"),(0,r.kt)("p",null,"followed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below."),(0,r.kt)("p",null,"If all was successful, you should execute"),(0,r.kt)("p",null,"and see a file named ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar.c"),". Executing ",(0,r.kt)("inlineCode",{parentName:"p"},"code caesar.c")," should open the file where you will type your code for this problem set. If not, retrace your steps and see if you can determine where you went wrong!"),(0,r.kt)("h2",{id:"background"},(0,r.kt)("a",{parentName:"h2",href:"#background"},"Background")),(0,r.kt)("p",null,"Supposedly, Caesar (yes, that Caesar) used to \u201cencrypt\u201d (i.e., conceal in a reversible way) confidential messages by shifting each letter therein by some number of places. For instance, he might write A as B, B as C, C as D, \u2026, and, wrapping around alphabetically, Z as A. And so, to say HELLO to someone, Caesar might write IFMMP instead. Upon receiving such messages from Caesar, recipients would have to \u201cdecrypt\u201d them by shifting letters in the opposite direction by the same number of places."),(0,r.kt)("p",null,"The secrecy of this \u201ccryptosystem\u201d relied on only Caesar and the recipients knowing a secret, the number of places by which Caesar had shifted his letters (e.g., 1). Not particularly secure by modern standards, but, hey, if you\u2019re perhaps the first in the world to do it, pretty secure!"),(0,r.kt)("p",null,"Unencrypted text is generally called ",(0,r.kt)("em",{parentName:"p"},"plaintext"),". Encrypted text is generally called ",(0,r.kt)("em",{parentName:"p"},"ciphertext"),". And the secret used is called a ",(0,r.kt)("em",{parentName:"p"},"key"),"."),(0,r.kt)("p",null,"To be clear, then, here\u2019s how encrypting ",(0,r.kt)("inlineCode",{parentName:"p"},"HELLO")," with a key of yields ",(0,r.kt)("inlineCode",{parentName:"p"},"IFMMP"),":"),(0,r.kt)("p",null,"Loading, please wait"),(0,r.kt)("table",null,(0,r.kt)("tbody",null,(0,r.kt)("tr",{"data-index":"0"},(0,r.kt)("td",{colspan:"6"},(0,r.kt)("div",null,(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,"plaintext"),(0,r.kt)("span",null,"+ key"),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"H")),(0,r.kt)("span",null),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"E")),(0,r.kt)("span",null),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"L")),(0,r.kt)("span",null),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"L")),(0,r.kt)("span",null),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"O")),(0,r.kt)("span",null),(0,r.kt)("p",null)))),(0,r.kt)("tr",{"data-index":"1"},(0,r.kt)("td",{colspan:"6"},(0,r.kt)("div",null,(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,"plaintext"),(0,r.kt)("span",null,"= ciphertext"),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"H")),(0,r.kt)("span",null,(0,r.kt)("code",null,"I")),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"E")),(0,r.kt)("span",null,(0,r.kt)("code",null,"F")),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"L")),(0,r.kt)("span",null,(0,r.kt)("code",null,"M")),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"L")),(0,r.kt)("span",null,(0,r.kt)("code",null,"M")),(0,r.kt)("p",null),(0,r.kt)("p",null,(0,r.kt)("span",null)),(0,r.kt)("p",null,(0,r.kt)("code",null,"O")),(0,r.kt)("span",null,(0,r.kt)("code",null,"P")),(0,r.kt)("p",null)))))),(0,r.kt)("p",null,"More formally, Caesar\u2019s algorithm (i.e., cipher) encrypts messages by \u201crotating\u201d each letter by positions. More formally, if is some plaintext (i.e., an unencrypted message), is the character in , and is a secret key (i.e., a non-negative integer), then each letter, , in the ciphertext, , is computed as"),(0,r.kt)("p",null,"wherein here means \u201cremainder when dividing by 26.\u201d This formula perhaps makes the cipher seem more complicated than it is, but it\u2019s really just a concise way of expressing the algorithm precisely. Indeed, for the sake of discussion, think of A (or a) as , B (or b) as , \u2026, H (or h) as , I (or i) as , \u2026, and Z (or z) as . Suppose that Caesar just wants to say ",(0,r.kt)("inlineCode",{parentName:"p"},"Hi")," to someone confidentially using, this time, a key, , of 3. And so his plaintext, , is ",(0,r.kt)("inlineCode",{parentName:"p"},"Hi"),", in which case his plaintext\u2019s first character, , is ",(0,r.kt)("inlineCode",{parentName:"p"},"H")," (aka 7), and his plaintext\u2019s second character, , is ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," (aka 8). His ciphertext\u2019s first character, , is thus ",(0,r.kt)("inlineCode",{parentName:"p"},"K"),", and his ciphertext\u2019s second character, , is thus ",(0,r.kt)("inlineCode",{parentName:"p"},"L"),". Make sense?"),(0,r.kt)("p",null,"Let\u2019s write a program called ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar")," that enables you to encrypt messages using Caesar\u2019s cipher. At the time the user executes the program, they should decide, by providing a command-line argument, what the key should be in the secret message they\u2019ll provide at runtime. We shouldn\u2019t necessarily assume that the user\u2019s key is going to be a number; though you may assume that, if it is a number, it will be a positive integer."),(0,r.kt)("p",null,"Here are a few examples of how the program might work. For example, if the user inputs a key of ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," and a plaintext of ",(0,r.kt)("inlineCode",{parentName:"p"},"HELLO"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar 1\nplaintext:  HELLO\nciphertext: IFMMP\n\n")),(0,r.kt)("p",null,"Here\u2019s how the program might work if the user provides a key of ",(0,r.kt)("inlineCode",{parentName:"p"},"13")," and a plaintext of ",(0,r.kt)("inlineCode",{parentName:"p"},"hello, world"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar 13\nplaintext:  hello, world\nciphertext: uryyb, jbeyq\n\n")),(0,r.kt)("p",null,"Notice that neither the comma nor the space were \u201cshifted\u201d by the cipher. Only rotate alphabetical characters!"),(0,r.kt)("p",null,"How about one more? Here\u2019s how the program might work if the user provides a key of ",(0,r.kt)("inlineCode",{parentName:"p"},"13")," again, with a more complex plaintext:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar 13\nplaintext:  be sure to drink your Ovaltine\nciphertext: or fher gb qevax lbhe Binygvar\n\n")),(0,r.kt)("p",null,"Why?"),(0,r.kt)("p",null,"Notice that the case of the original message has been preserved. Lowercase letters remain lowercase, and uppercase letters remain uppercase."),(0,r.kt)("p",null,"And what if a user doesn\u2019t cooperate, providing a command-line argument that isn\u2019t a number? The program should remind the user how to use the program:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar HELLO\nUsage: ./caesar key\n\n")),(0,r.kt)("p",null,"Or really doesn\u2019t cooperate, providing no command-line argument at all? The program should remind the user how to use the program:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar\nUsage: ./caesar key\n\n")),(0,r.kt)("p",null,"Or really, really doesn\u2019t cooperate, providing more than one command-line argument? The program should remind the user how to use the program:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar 1 2 3\nUsage: ./caesar key\n\n")),(0,r.kt)("p",null,"Watch a Recording"),(0,r.kt)("h2",{id:"specification"},(0,r.kt)("a",{parentName:"h2",href:"#specification"},"Specification")),(0,r.kt)("p",null,"Design and implement a program, ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar"),", that encrypts messages using Caesar\u2019s cipher."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Implement your program in a file called ",(0,r.kt)("inlineCode",{parentName:"li"},"caesar.c")," in a directory called ",(0,r.kt)("inlineCode",{parentName:"li"},"caesar"),"."),(0,r.kt)("li",{parentName:"ul"},"Your program must accept a single command-line argument, a non-negative integer. Let\u2019s call it for the sake of discussion."),(0,r.kt)("li",{parentName:"ul"},"If your program is executed without any command-line arguments or with more than one command-line argument, your program should print an error message of your choice (with ",(0,r.kt)("inlineCode",{parentName:"li"},"printf"),") and return from ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," a value of ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," (which tends to signify an error) immediately."),(0,r.kt)("li",{parentName:"ul"},"If any of the characters of the command-line argument is not a decimal digit, your program should print the message ",(0,r.kt)("inlineCode",{parentName:"li"},"Usage: ./caesar key")," and return from ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," a value of ",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,r.kt)("li",{parentName:"ul"},"Do not assume that will be less than or equal to 26. Your program should work for all non-negative integral values of less than . In other words, you don\u2019t need to worry if your program eventually breaks if the user chooses a value for that\u2019s too big or almost too big to fit in an ",(0,r.kt)("inlineCode",{parentName:"li"},"int"),". (Recall that an ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," can overflow.) But, even if is greater than , alphabetical characters in your program\u2019s input should remain alphabetical characters in your program\u2019s output. For instance, if is , ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," should not become ",(0,r.kt)("inlineCode",{parentName:"li"},"\\")," even though ",(0,r.kt)("inlineCode",{parentName:"li"},"\\")," is positions away from ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," in ASCII, per ",(0,r.kt)("a",{parentName:"li",href:"https://www.asciitable.com/"},"asciitable.com"),"; ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," should become ",(0,r.kt)("inlineCode",{parentName:"li"},"B"),", since ",(0,r.kt)("inlineCode",{parentName:"li"},"B")," is positions away from ",(0,r.kt)("inlineCode",{parentName:"li"},"A"),", provided you wrap around from ",(0,r.kt)("inlineCode",{parentName:"li"},"Z")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"A"),"."),(0,r.kt)("li",{parentName:"ul"},"Your program must output ",(0,r.kt)("inlineCode",{parentName:"li"},"plaintext:")," (with two spaces but without a newline) and then prompt the user for a ",(0,r.kt)("inlineCode",{parentName:"li"},"string")," of plaintext (using ",(0,r.kt)("inlineCode",{parentName:"li"},"get_string"),")."),(0,r.kt)("li",{parentName:"ul"},"Your program must output ",(0,r.kt)("inlineCode",{parentName:"li"},"ciphertext:")," (with one space but without a newline) followed by the plaintext\u2019s corresponding ciphertext, with each alphabetical character in the plaintext \u201crotated\u201d by ",(0,r.kt)("em",{parentName:"li"},"k")," positions; non-alphabetical characters should be outputted unchanged."),(0,r.kt)("li",{parentName:"ul"},"Your program must preserve case: capitalized letters, though rotated, must remain capitalized letters; lowercase letters, though rotated, must remain lowercase letters."),(0,r.kt)("li",{parentName:"ul"},"After outputting ciphertext, you should print a newline. Your program should then exit by returning ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"main"),".")),(0,r.kt)("h2",{id:"advice"},(0,r.kt)("a",{parentName:"h2",href:"#advice"},"Advice")),(0,r.kt)("p",null,"How to begin? Let\u2019s approach this problem one step at a time."),(0,r.kt)("h3",{id:"pseudocode"},(0,r.kt)("a",{parentName:"h3",href:"#pseudocode"},"Pseudocode")),(0,r.kt)("p",null,"First write, try to write a ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function in ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar.c")," that implements the program using just pseudocode, even if not (yet!) sure how to write it in actual code."),(0,r.kt)("p",null,"Hint"),(0,r.kt)("p",null,"There\u2019s more than one way to do this, so here\u2019s just one!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"int main(void)\n{\n    // Make sure program was run with just one command-line argument\n\n    // Make sure every character in argv[1] is a digit\n\n    // Convert argv[1] from a `string` to an `int`\n\n    // Prompt user for plaintext\n\n    // For each character in the plaintext:\n\n        // Rotate the character if it's a letter\n}\n\n")),(0,r.kt)("p",null,"It\u2019s okay to edit your own pseudocode after seeing ours here, but don\u2019t simply copy/paste ours into your own!"),(0,r.kt)("h3",{id:"counting-command-line-arguments"},(0,r.kt)("a",{parentName:"h3",href:"#counting-command-line-arguments"},"Counting Command-Line Arguments")),(0,r.kt)("p",null,"Whatever your pseudocode, let\u2019s first write only the C code that checks whether the program was run with a single command-line argument before adding additional functionality."),(0,r.kt)("p",null,"Specifically, modify ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar.c")," in such a way that, if the user provides no command-line arguments, or two or more, the function prints ",(0,r.kt)("inlineCode",{parentName:"p"},'"Usage: ./caesar key\\n"')," and then returns ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", effectively exiting the program. If the user provides exactly one command-line argument, the program should print nothing and simply return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". The program should thus behave per the below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar\nUsage: ./caesar key\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar 1 2 3\nUsage: ./caesar key\n\n")),(0,r.kt)("p",null,"Hints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Recall that you can print with ",(0,r.kt)("inlineCode",{parentName:"li"},"printf"),"."),(0,r.kt)("li",{parentName:"ul"},"Recall that a function can return a value with ",(0,r.kt)("inlineCode",{parentName:"li"},"return"),"."),(0,r.kt)("li",{parentName:"ul"},"Recall that ",(0,r.kt)("inlineCode",{parentName:"li"},"argc")," contains the number of command-line arguments passed to a program, plus the program\u2019s own name.")),(0,r.kt)("h3",{id:"checking-the-key"},(0,r.kt)("a",{parentName:"h3",href:"#checking-the-key"},"Checking the Key")),(0,r.kt)("p",null,"Now that your program is (hopefully!) accepting input as prescribed, it\u2019s time for another step."),(0,r.kt)("p",null,"Add to ",(0,r.kt)("inlineCode",{parentName:"p"},"caesar.c"),", below ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),", a function called, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"only_digits")," that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," as an argument and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if that ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," contains only digits, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," through ",(0,r.kt)("inlineCode",{parentName:"p"},"9"),", else it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". Be sure to add the function\u2019s prototype above ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," as well."),(0,r.kt)("p",null,"Hints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Odds are you\u2019ll want a prototype like:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"bool only_digits(string s);\n\n")),(0,r.kt)("p",{parentName:"li"},"And be sure to include ",(0,r.kt)("inlineCode",{parentName:"p"},"cs50.h")," atop your file, so that the compiler recognizes ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," (and ",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Recall that a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," is just an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"char"),"s.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Recall that ",(0,r.kt)("inlineCode",{parentName:"p"},"strlen"),", declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"string.h"),", calculates the length of a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You might find ",(0,r.kt)("inlineCode",{parentName:"p"},"isdigit"),", declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"ctype.h"),", to be helpful, per ",(0,r.kt)("a",{parentName:"p",href:"https://manual.cs50.io/"},"manual.cs50.io"),". But note that it only checks one ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," at a time!"))),(0,r.kt)("p",null,"Then modify ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," in such a way that it calls ",(0,r.kt)("inlineCode",{parentName:"p"},"only_digits")," on ",(0,r.kt)("inlineCode",{parentName:"p"},"argv[1]"),". If that function returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", then ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," should print ",(0,r.kt)("inlineCode",{parentName:"p"},'"Usage: ./caesar key\\n"')," and return ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),". Else ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," should simply return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". The program should thus behave per the below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./caesar banana\nUsage: ./caesar key\n\n")),(0,r.kt)("h3",{id:"using-the-key"},(0,r.kt)("a",{parentName:"h3",href:"#using-the-key"},"Using the Key")),(0,r.kt)("p",null,"Now modify ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," in such a way that it converts ",(0,r.kt)("inlineCode",{parentName:"p"},"argv[1]")," to an ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),". You might find ",(0,r.kt)("inlineCode",{parentName:"p"},"atoi"),", declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"stdlib.h"),", to be helpful, per ",(0,r.kt)("a",{parentName:"p",href:"https://manual.cs50.io/"},"manual.cs50.io"),". And then use ",(0,r.kt)("inlineCode",{parentName:"p"},"get_string")," to prompt the user for some plaintext with ",(0,r.kt)("inlineCode",{parentName:"p"},'"plaintext: "'),"."),(0,r.kt)("p",null,"Then, implement a function called, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"rotate"),", that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," as input and also an ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", and rotates that ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," by that many positions if it\u2019s a letter (i.e., alphabetical), wrapping around from ",(0,r.kt)("inlineCode",{parentName:"p"},"Z")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," (and from ",(0,r.kt)("inlineCode",{parentName:"p"},"z")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),") as needed. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," is not a letter, the function should instead return the same ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," unchanged."),(0,r.kt)("p",null,"Hints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Odds are you\u2019ll want a prototype like:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"char rotate(char c, int n);\n\n")),(0,r.kt)("p",{parentName:"li"},"A function call like"),(0,r.kt)("p",{parentName:"li"},"or even"),(0,r.kt)("p",{parentName:"li"},"should thus return ",(0,r.kt)("inlineCode",{parentName:"p"},"'B'"),". And a function call like"),(0,r.kt)("p",{parentName:"li"},"should return ",(0,r.kt)("inlineCode",{parentName:"p"},"'!'"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Recall that you can explicitly \u201ccast\u201d a ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," to an ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"(int)"),", and an ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," to a ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"(char)"),". Or you can do so implicitly by simply treating one as the other.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Odds are you\u2019ll want to subtract the ASCII value of ",(0,r.kt)("inlineCode",{parentName:"p"},"'A'")," from any uppercase letters, so as to treat ",(0,r.kt)("inlineCode",{parentName:"p"},"'A'")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'B'")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", and so forth, while performing arithmetic. And then add it back when done with the same.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Odds are you\u2019ll want to subtract the ASCII value of ",(0,r.kt)("inlineCode",{parentName:"p"},"'a'")," from any lowercase letters, so as to treat ",(0,r.kt)("inlineCode",{parentName:"p"},"'a'")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'b'")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", and so forth, while performing arithmetic. And then add it back when done with the same.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You might find some other functions declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"ctype.h")," to be helpful, per ",(0,r.kt)("a",{parentName:"p",href:"https://manual.cs50.io/"},"manual.cs50.io"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Odds are you\u2019ll find ",(0,r.kt)("inlineCode",{parentName:"p"},"%")," helpful when \u201cwrapping around\u201d arithmetically from a value like ",(0,r.kt)("inlineCode",{parentName:"p"},"25")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."))),(0,r.kt)("p",null,"Then modify ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," in such a way that it prints ",(0,r.kt)("inlineCode",{parentName:"p"},'"ciphertext: "')," and then iterates over every ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," in the user\u2019s plaintext, calling ",(0,r.kt)("inlineCode",{parentName:"p"},"rotate")," on each, and printing the return value thereof."),(0,r.kt)("p",null,"Hints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Recall that ",(0,r.kt)("inlineCode",{parentName:"li"},"printf")," can print a ",(0,r.kt)("inlineCode",{parentName:"li"},"char")," using ",(0,r.kt)("inlineCode",{parentName:"li"},"%c"),"."),(0,r.kt)("li",{parentName:"ul"},"If you\u2019re not seeing any output at all when you call ",(0,r.kt)("inlineCode",{parentName:"li"},"printf"),", odds are it\u2019s because you\u2019re printing characters outside of the valid ASCII range from 0 to 127. Try printing characters temporarily as numbers (using ",(0,r.kt)("inlineCode",{parentName:"li"},"%i")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"%c"),") to see what values you\u2019re printing!")),(0,r.kt)("h2",{id:"walkthrough"},(0,r.kt)("a",{parentName:"h2",href:"#walkthrough"},"Walkthrough")),(0,r.kt)("h2",{id:"how-to-test-your-code"},(0,r.kt)("a",{parentName:"h2",href:"#how-to-test-your-code"},"How to Test Your Code")),(0,r.kt)("p",null,"Execute the below to evaluate the correctness of your code using ",(0,r.kt)("inlineCode",{parentName:"p"},"check50"),". But be sure to compile and test it yourself as well!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"check50 cs50/problems/2023/x/caesar\n\n")),(0,r.kt)("p",null,"Execute the below to evaluate the style of your code using ",(0,r.kt)("inlineCode",{parentName:"p"},"style50"),"."),(0,r.kt)("h2",{id:"how-to-submit"},(0,r.kt)("a",{parentName:"h2",href:"#how-to-submit"},"How to Submit")),(0,r.kt)("p",null,"In your terminal, execute the below to submit your work."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"submit50 cs50/problems/2023/x/caesar\n\n")))}m.isMDXComponent=!0}}]);