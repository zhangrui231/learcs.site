"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[2520],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},36122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o="Homework 8 | CS 61A Spring 2024",l={unversionedId:"curriculum-resource/cs61a/homework/hw08",id:"curriculum-resource/cs61a/homework/hw08",title:"Homework 8 | CS 61A Spring 2024",description:"Homework 8: Scheme Lists",source:"@site/docs/curriculum-resource/cs61a/homework/hw08.md",sourceDirName:"curriculum-resource/cs61a/homework",slug:"/curriculum-resource/cs61a/homework/hw08",permalink:"/docs/curriculum-resource/cs61a/homework/hw08",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Homework 7 | CS 61A Spring 2024",permalink:"/docs/curriculum-resource/cs61a/homework/hw07"},next:{title:"Homework 9 | CS 61A Spring 2024",permalink:"/docs/curriculum-resource/cs61a/homework/hw09"}},s={},p=[{value:"Homework 8: Scheme Lists",id:"homework-8-scheme-lists",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Scheme Editor",id:"scheme-editor",level:3},{value:"Recommended VS Code Extensions",id:"recommended-vs-code-extensions",level:3},{value:"Required Questions",id:"required-questions",level:2},{value:"Required Questions",id:"required-questions-1",level:2},{value:"Getting Started Videos",id:"getting-started-videos",level:2},{value:"Q1: Ascending",id:"q1-ascending",level:3},{value:"Q2: My Filter",id:"q2-my-filter",level:3},{value:"Q3: Interleave",id:"q3-interleave",level:3},{value:"Q4: No Repeats",id:"q4-no-repeats",level:3},{value:"Submit",id:"submit",level:2},{value:"Exam Practice",id:"exam-practice",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(m,(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"homework-8--cs-61a-spring-2024"},"Homework 8 | CS 61A Spring 2024"),(0,r.kt)("h2",{id:"homework-8-scheme-lists"},"Homework 8: Scheme Lists"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{target:"_blank",href:n(35789).Z},"hw08.zip"))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Due by 11:59pm on Thursday, April 11")),(0,r.kt)("h2",{id:"instructions"},"Instructions"),(0,r.kt)("p",null,"Download ",(0,r.kt)("a",{target:"_blank",href:n(35789).Z},"hw08.zip"),". Inside the archive, you will find a file called ",(0,r.kt)("a",{parentName:"p",href:"https://cs61a.org//hw/hw08/hw08.scm"},"hw08.scm"),", along with a copy of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ok")," autograder."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Submission:")," When you are done, submit the assignment by uploading all code files you've edited to Gradescope. You may submit more than once before the deadline; only the final submission will be scored. Check that you have successfully submitted your code on Gradescope. See ",(0,r.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00#task-c-submitting-the-assignment"},"Lab 0")," for more instructions on submitting assignments."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Using Ok:")," If you have any questions about using Ok, please refer to ",(0,r.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/using-ok"},"this guide.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Readings:")," You might find the following references useful:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://cs61a.org/articles/scheme-spec/"},"Scheme Specification")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://cs61a.org/articles/scheme-builtins/"},"Scheme Built-in Procedure Reference"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Grading:")," Homework is graded based on correctness. Each incorrect problem will decrease the total score by one point. ",(0,r.kt)("strong",{parentName:"p"},"This homework is out of 2 points.")),(0,r.kt)("p",null,"The 61A Scheme interpreter is included in each Scheme assignment. To start it, type ",(0,r.kt)("inlineCode",{parentName:"p"},"python3 scheme")," in a terminal. To load a Scheme file called ",(0,r.kt)("inlineCode",{parentName:"p"},"f.scm"),", type ",(0,r.kt)("inlineCode",{parentName:"p"},"python3 scheme -i f.scm"),". To exit the Scheme interpreter, type ",(0,r.kt)("inlineCode",{parentName:"p"},"(exit)"),"."),(0,r.kt)("h3",{id:"scheme-editor"},"Scheme Editor"),(0,r.kt)("p",null,"All Scheme assignments include a web-based editor that makes it easy to run ok tests and visualize environments. Type ",(0,r.kt)("inlineCode",{parentName:"p"},"python3 editor")," in a terminal, and the editor will open in a browser window (at ",(0,r.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:31415/"),"). To stop running the editor and return to the command line, type ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl-C")," in the terminal where you started the editor."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," button loads the current assignment's ",(0,r.kt)("inlineCode",{parentName:"p"},".scm")," file and opens a Scheme interpreter, allowing you to try evaluating different Scheme expressions."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Test")," button runs all ok tests for the assignment. Click ",(0,r.kt)("inlineCode",{parentName:"p"},"View Case")," for a failed test, then click ",(0,r.kt)("inlineCode",{parentName:"p"},"Debug")," to step through its evaluation."),(0,r.kt)("h3",{id:"recommended-vs-code-extensions"},"Recommended VS Code Extensions"),(0,r.kt)("p",null,"If you choose to use VS Code as your text editor (instead of the web-based editor), install the ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=sjhuangx.vscode-scheme"},"vscode-scheme")," extension so that parentheses are highlighted."),(0,r.kt)("p",null,"Before:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(71162).Z,width:"662",height:"188"})),(0,r.kt)("p",null,"After:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(23004).Z,width:"678",height:"184"})),(0,r.kt)("p",null,"In addition, the 61a-bot (",(0,r.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/61a-bot"},"installation instructions"),") VS Code extension is available for Scheme homeworks. The bot is also integrated into ",(0,r.kt)("inlineCode",{parentName:"p"},"ok"),"."),(0,r.kt)("h2",{id:"required-questions"},"Required Questions"),(0,r.kt)("h2",{id:"required-questions-1"},"Required Questions"),(0,r.kt)("h2",{id:"getting-started-videos"},"Getting Started Videos"),(0,r.kt)("p",null,"These videos may provide some helpful direction for tackling the coding problems on this assignment."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"To see these videos, you should be logged into your berkeley.edu email.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://youtu.be/playlist?list=PLx38hZJ5RLZeOPmZFG6vuUl71MdfpmBLe"},"YouTube link")),(0,r.kt)("h3",{id:"q1-ascending"},"Q1: Ascending"),(0,r.kt)("p",null,"Implement a procedure called ",(0,r.kt)("inlineCode",{parentName:"p"},"ascending?"),", which takes a list of numbers ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"True")," if the numbers are in non-descending order, and ",(0,r.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,r.kt)("p",null,"A list of numbers is non-descending if each element after the first is greater than or equal to the previous element. For example..."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(1 2 3 3 4)")," is non-descending."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(1 2 3 3 2)")," is not.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Hint"),": The built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"null?")," procedure returns whether its argument is ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note"),": The question mark in ",(0,r.kt)("inlineCode",{parentName:"p"},"ascending?")," is just part of the procedure name and has no special meaning in terms of Scheme syntax. It is a common practice in Scheme to name procedures with a question mark at the end if it returns a boolean value.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (ascending? s)\n  'YOUR-CODE-HERE\n)\n")),(0,r.kt)("p",null,"Use Ok to unlock and test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q ascending -u\npython3 ok -q ascending\n")),(0,r.kt)("h3",{id:"q2-my-filter"},"Q2: My Filter"),(0,r.kt)("p",null,"Write a procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"my-filter"),", which takes a predicate ",(0,r.kt)("inlineCode",{parentName:"p"},"pred")," and a list ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),", and returns a new list containing only elements of the list that satisfy the predicate. The output should contain the elements in the same order that they appeared in the original list."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Make sure that you are not just calling the built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," function in Scheme - we are asking you to re-implement this!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (my-filter pred s)\n  'YOUR-CODE-HERE\n)\n")),(0,r.kt)("p",null,"Use Ok to unlock and test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q filter -u\npython3 ok -q filter\n")),(0,r.kt)("h3",{id:"q3-interleave"},"Q3: Interleave"),(0,r.kt)("p",null,"Implement the function ",(0,r.kt)("inlineCode",{parentName:"p"},"interleave"),", which takes two lists ",(0,r.kt)("inlineCode",{parentName:"p"},"lst1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lst2")," as arguments. ",(0,r.kt)("inlineCode",{parentName:"p"},"interleave")," should return a new list that interleaves the elements of the two lists. (In other words, the resulting list should contain elements alternating between ",(0,r.kt)("inlineCode",{parentName:"p"},"lst1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lst2"),", starting at ",(0,r.kt)("inlineCode",{parentName:"p"},"lst1"),")."),(0,r.kt)("p",null,"If one of the input lists to ",(0,r.kt)("inlineCode",{parentName:"p"},"interleave")," is shorter than the other, then ",(0,r.kt)("inlineCode",{parentName:"p"},"interleave")," should alternate elements from both lists until one list has no more elements, and then the remaining elements from the longer list should be added to the end of the new list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (interleave lst1 lst2)\n  'YOUR-CODE-HERE\n)\n")),(0,r.kt)("p",null,"Use Ok to unlock and test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q interleave -u\npython3 ok -q interleave\n")),(0,r.kt)("h3",{id:"q4-no-repeats"},"Q4: No Repeats"),(0,r.kt)("p",null,"Implement ",(0,r.kt)("inlineCode",{parentName:"p"},"no-repeats"),", which takes a list of numbers ",(0,r.kt)("inlineCode",{parentName:"p"},"s"),". It returns a list that has all of the unique elements of ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," in the order that they first appear, but no repeats."),(0,r.kt)("p",null,"For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"(no-repeats (list 5 4 5 4 2 2))")," evaluates to ",(0,r.kt)("inlineCode",{parentName:"p"},"(5 4 2)"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Hint:")," You may find it helpful to use ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda")," procedure to filter out repeats. To test if two numbers ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," are not equal, use ",(0,r.kt)("inlineCode",{parentName:"p"},"(not (= a b))"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(define (no-repeats s)\n  'YOUR-CODE-HERE\n)\n")),(0,r.kt)("p",null,"Use Ok to test your code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python3 ok -q no_repeats\n")),(0,r.kt)("h2",{id:"submit"},"Submit"),(0,r.kt)("p",null,"Submit this assignment by uploading any files you've edited ",(0,r.kt)("strong",{parentName:"p"},"to the appropriate Gradescope assignment.")," ",(0,r.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00/#submit-with-gradescope"},"Lab 00")," has detailed instructions."),(0,r.kt)("p",null,"In addition, all students who are ",(0,r.kt)("strong",{parentName:"p"},"not")," in the mega lab must complete this ",(0,r.kt)("a",{parentName:"p",href:"https://go.cs61a.org/lab-att"},"attendance form"),". Submit this form each week, whether you attend lab or missed it for a good reason. The attendance form is not required for mega section students."),(0,r.kt)("h2",{id:"exam-practice"},"Exam Practice"),(0,r.kt)("p",null,"The following are some Scheme List exam problems from previous semesters that you may find useful as additional exam practice."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://cs61a.org/exam/fa22/final/61a-fa22-final.pdf#page=20"},"Fall 2022 Final, Question 8: A Parentheses Scheme")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://cs61a.org/exam/sp22/final/61a-sp22-final.pdf#page=23"},"Spring 2022 Final, Question 11: Beadazzled, The Scheme-quel")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://cs61a.org/exam/fa21/final/61a-fa21-final.pdf#page=18"},"Fall 2021 Final, Question 4: Spice"))))}d.isMDXComponent=!0},35789:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/hw08-912d428eb7876001702e96d040d986ca.zip"},23004:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/after-49c28554ee03a6642fe04e111fd59fd5.png"},71162:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/before-1fb62971706b817f8b61c7a23705e08a.png"}}]);