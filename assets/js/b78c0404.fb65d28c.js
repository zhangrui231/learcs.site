"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[39158],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,d=c["".concat(s,".").concat(m)]||c[m]||h[m]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},17891:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"Homework 5 Generators"},i="Homework 5 | CS 61A Spring 2024",l={unversionedId:"curriculum-resource/cs61a/cs61a_en/homework/hw05",id:"curriculum-resource/cs61a/cs61a_en/homework/hw05",title:"Homework 5 Generators",description:"Homework 5: Generators",source:"@site/docs/curriculum-resource/cs61a/cs61a_en/homework/hw05.md",sourceDirName:"curriculum-resource/cs61a/cs61a_en/homework",slug:"/curriculum-resource/cs61a/cs61a_en/homework/hw05",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/homework/hw05",draft:!1,tags:[],version:"current",frontMatter:{title:"Homework 5 Generators"},sidebar:"tutorialSidebar",previous:{title:"Homework 4 Sequences, ADT Trees",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/homework/hw04"},next:{title:"Homework 6 OOP, Linked Lists",permalink:"/docs/curriculum-resource/cs61a/cs61a_en/homework/hw06"}},s={},p=[{value:"Homework 5: Generators",id:"homework-5-generators",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Required Questions",id:"required-questions",level:2},{value:"Getting Started Videos",id:"getting-started-videos",level:2},{value:"Q1: Infinite Hailstone",id:"q1-infinite-hailstone",level:3},{value:"Q2: Merge",id:"q2-merge",level:3},{value:"Q3: Yield Paths",id:"q3-yield-paths",level:3},{value:"Check Your Score Locally",id:"check-your-score-locally",level:2},{value:"Submit",id:"submit",level:2},{value:"Exam Practice",id:"exam-practice",level:2}],u={toc:p},c="wrapper";function h(e){let{components:t,...o}=e;return(0,a.kt)(c,(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"homework-5--cs-61a-spring-2024"},"Homework 5 | CS 61A Spring 2024"),(0,a.kt)("h2",{id:"homework-5-generators"},"Homework 5: Generators"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{target:"_blank",href:n(58174).Z},"hw05.zip"))),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Due by 11:59pm on Thursday, March 7")),(0,a.kt)("h2",{id:"instructions"},"Instructions"),(0,a.kt)("p",null,"Download ",(0,a.kt)("a",{target:"_blank",href:n(58174).Z},"hw05.zip"),". Inside the archive, you will find a file called ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org//hw/hw05/hw05.py"},"hw05.py"),", along with a copy of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ok")," autograder."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Submission:")," When you are done, submit the assignment by uploading all code files you've edited to Gradescope. You may submit more than once before the deadline; only the final submission will be scored. Check that you have successfully submitted your code on Gradescope. See ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00#task-c-submitting-the-assignment"},"Lab 0")," for more instructions on submitting assignments."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Using Ok:")," If you have any questions about using Ok, please refer to ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/using-ok"},"this guide.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Readings:")," You might find the following references useful:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.composingprograms.com/pages/42-implicit-sequences.html"},"Section 4.2"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Grading:")," Homework is graded based on correctness. Each incorrect problem will decrease the total score by one point. ",(0,a.kt)("strong",{parentName:"p"},"This homework is out of 2 points.")),(0,a.kt)("h2",{id:"required-questions"},"Required Questions"),(0,a.kt)("h2",{id:"getting-started-videos"},"Getting Started Videos"),(0,a.kt)("p",null,"These videos may provide some helpful direction for tackling the coding problems on this assignment."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To see these videos, you should be logged into your berkeley.edu email.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/playlist?list=PLx38hZJ5RLZcg5Zd4EMdx9fctIYVfJvnd"},"YouTube link")),(0,a.kt)("h3",{id:"q1-infinite-hailstone"},"Q1: Infinite Hailstone"),(0,a.kt)("p",null,"Write a generator function that yiels the elements of the hailstone sequence starting at number ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),". After reaching the end of the hailstone sequence, the generator should yield the value 1 indefinitely."),(0,a.kt)("p",null,"Here's a quick reminder of how the hailstone sequence is defined:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Pick a positive integer ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," as the start."),(0,a.kt)("li",{parentName:"ol"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," is even, divide it by 2."),(0,a.kt)("li",{parentName:"ol"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," is odd, multiply it by 3 and add 1."),(0,a.kt)("li",{parentName:"ol"},"Continue this process until ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," is 1.")),(0,a.kt)("p",null,"Try to write this generator function recursively. If you're stuck, you can first try writing it iteratively and then seeing how you can turn that implementation into a recursive one."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Hint:")," Since ",(0,a.kt)("inlineCode",{parentName:"p"},"hailstone")," returns a generator, you can ",(0,a.kt)("inlineCode",{parentName:"p"},"yield from")," a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"hailstone"),"!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def hailstone(n):\n    """Q1: Yields the elements of the hailstone sequence starting at n.\n       At the end of the sequence, yield 1 infinitely.\n\n    >>> hail_gen = hailstone(10)\n    >>> [next(hail_gen) for _ in range(10)]\n    [10, 5, 16, 8, 4, 2, 1, 1, 1, 1]\n    >>> next(hail_gen)\n    1\n    """\n    "*** YOUR CODE HERE ***"\n\n')),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q hailstone\n")),(0,a.kt)("h3",{id:"q2-merge"},"Q2: Merge"),(0,a.kt)("p",null,"Write a generator function ",(0,a.kt)("inlineCode",{parentName:"p"},"merge")," that takes in two infinite generators ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," that are in increasing order without duplicates and returns a generator that has all the elements of both generators, in increasing order, without duplicates."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def merge(a, b):\n    """Q2:\n    >>> def sequence(start, step):\n    ...     while True:\n    ...         yield start\n    ...         start += step\n    >>> a = sequence(2, 3) # 2, 5, 8, 11, 14, ...\n    >>> b = sequence(3, 2) # 3, 5, 7, 9, 11, 13, 15, ...\n    >>> result = merge(a, b) # 2, 3, 5, 7, 8, 9, 11, 13, 14, 15\n    >>> [next(result) for _ in range(10)]\n    [2, 3, 5, 7, 8, 9, 11, 13, 14, 15]\n    """\n    "*** YOUR CODE HERE ***"\n\n')),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q merge\n")),(0,a.kt)("h3",{id:"q3-yield-paths"},"Q3: Yield Paths"),(0,a.kt)("p",null,"Define a generator function ",(0,a.kt)("inlineCode",{parentName:"p"},"yield_paths")," which takes in a tree ",(0,a.kt)("inlineCode",{parentName:"p"},"t"),", a value ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),", and returns a generator object which yields each path from the root of ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," to a node that has label ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),"."),(0,a.kt)("p",null,"Each path should be represented as a list of the labels along that path in the tree. You may yield the paths in any order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def yield_paths(t, value):\n    """Q4: Yields all possible paths from the root of t to a node with the label\n    value as a list.\n\n    >>> t1 = tree(1, [tree(2, [tree(3), tree(4, [tree(6)]), tree(5)]), tree(5)])\n    >>> print_tree(t1)\n    1\n      2\n        3\n        4\n          6\n        5\n      5\n    >>> next(yield_paths(t1, 6))\n    [1, 2, 4, 6]\n    >>> path_to_5 = yield_paths(t1, 5)\n    >>> sorted(list(path_to_5))\n    [[1, 2, 5], [1, 5]]\n\n    >>> t2 = tree(0, [tree(2, [t1])])\n    >>> print_tree(t2)\n    0\n      2\n        1\n          2\n            3\n            4\n              6\n            5\n          5\n    >>> path_to_2 = yield_paths(t2, 2)\n    >>> sorted(list(path_to_2))\n    [[0, 2], [0, 2, 1, 2]]\n    """\n    if label(t) == value:\n        yield ____\n    for b in branches(t):\n        for ____ in ____:\n            yield ____\n\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Hint:")," If you're having trouble getting started, think about how you'd approach this problem if it wasn't a generator function. What would your recursive calls be? With a generator function, what happens if you make a \"recursive call\" within its body?")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Hint:")," Try coming up with a few simple cases of your own! How should this function work when ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," is a leaf node?")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Hint:")," Remember, it's possible to loop over generator objects because generators are iterators!")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: Remember that this problem should ",(0,a.kt)("strong",{parentName:"p"},"yield paths")," -- do not return a list of paths!")),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q yield_paths\n")),(0,a.kt)("h2",{id:"check-your-score-locally"},"Check Your Score Locally"),(0,a.kt)("p",null,"You can locally check your score on each question of this assignment by running"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok --score\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This does NOT submit the assignment!")," When you are satisfied with your score, submit the assignment to Gradescope to receive credit for it."),(0,a.kt)("h2",{id:"submit"},"Submit"),(0,a.kt)("p",null,"Submit this assignment by uploading any files you've edited ",(0,a.kt)("strong",{parentName:"p"},"to the appropriate Gradescope assignment.")," ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00/#submit-with-gradescope"},"Lab 00")," has detailed instructions."),(0,a.kt)("h2",{id:"exam-practice"},"Exam Practice"),(0,a.kt)("p",null,"Homework assignments will also contain prior exam questions for you to try. These questions have no submission component; feel free to attempt them if you'd like some practice!"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Summer 2018 Final Q7a,b: ",(0,a.kt)("a",{parentName:"li",href:"https://inst.eecs.berkeley.edu/~cs61a/su18/assets/pdfs/61a-su18-final.pdf#page=9"},"Streams and Jennyrators")),(0,a.kt)("li",{parentName:"ol"},"Spring 2019 Final Q1: ",(0,a.kt)("a",{parentName:"li",href:"https://cs61a.org/exam/sp19/final/61a-sp19-final.pdf#page=2"},"Iterators are inevitable")),(0,a.kt)("li",{parentName:"ol"},"Spring 2021 MT2 Q8: ",(0,a.kt)("a",{parentName:"li",href:"https://cs61a.org/exam/sp21/mt2/61a-sp21-mt2.pdf#page=18"},"The Tree of L-I-F-E")),(0,a.kt)("li",{parentName:"ol"},"Summer 2016 Final Q8: ",(0,a.kt)("a",{parentName:"li",href:"https://inst.eecs.berkeley.edu//~cs61a/su16/assets/pdfs/61a-su16-final.pdf#page=13"},"Zhen-erators Produce Power")),(0,a.kt)("li",{parentName:"ol"},"Spring 2018 Final Q4a: ",(0,a.kt)("a",{parentName:"li",href:"https://inst.eecs.berkeley.edu/~cs61a/sp18/assets/pdfs/61a-sp18-final.pdf#page=5"},"Apply Yourself"))))}h.isMDXComponent=!0},58174:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/hw05-5ab189d8b33bb18288447b6462c333ee.zip"}}]);