"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[92242],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>k});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),m=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=m(r),c=n,k=p["".concat(s,".").concat(c)]||p[c]||u[c]||l;return r?a.createElement(k,i(i({ref:t},d),{},{components:r})):a.createElement(k,i({ref:t},d))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:n,i[1]=o;for(var m=2;m<l;m++)i[m]=r[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},87847:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=r(87462),n=(r(67294),r(3905));const l={title:"Coverage Tests - Project 1B Array Deque 61B",description:"Project 1B Coverage Tests."},i=void 0,o={unversionedId:"curriculum-resource/cs61b/projects/proj1b/flags",id:"curriculum-resource/cs61b/projects/proj1b/flags",title:"Coverage Tests - Project 1B Array Deque 61B",description:"Project 1B Coverage Tests.",source:"@site/docs/curriculum-resource/cs61b/projects/proj1b/flags.md",sourceDirName:"curriculum-resource/cs61b/projects/proj1b",slug:"/curriculum-resource/cs61b/projects/proj1b/flags",permalink:"/docs/curriculum-resource/cs61b/projects/proj1b/flags",draft:!1,tags:[],version:"current",frontMatter:{title:"Coverage Tests - Project 1B Array Deque 61B",description:"Project 1B Coverage Tests."},sidebar:"tutorialSidebar",previous:{title:"FAQ - Project 1B Array Deque 61B",permalink:"/docs/curriculum-resource/cs61b/projects/proj1b/faq"},next:{title:"Project 1C Deque61B Enhancements",permalink:"/docs/curriculum-resource/cs61b/projects/proj1c/"}},s={},m=[{value:"Flags for add tests",id:"flags-for-add-tests",level:3},{value:"Flags for add after remove tests",id:"flags-for-add-after-remove-tests",level:3},{value:"Flags for remove Tests",id:"flags-for-remove-tests",level:3},{value:"Flags for get Tests",id:"flags-for-get-tests",level:3},{value:"Flags for size tests",id:"flags-for-size-tests",level:3},{value:"Flags for isEmpty Tests",id:"flags-for-isempty-tests",level:3},{value:"Flags for toList tests",id:"flags-for-tolist-tests",level:3},{value:"Flags for advanced resize tests",id:"flags-for-advanced-resize-tests",level:3}],d={toc:m},p="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"flags-for-add-tests"},"Flags for add tests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"add_first_from_empty"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"addFirst")," works on an empty deque."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"add_last_from_empty"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"addLast")," works on an empty deque."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"add_first_nonempty"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"addFirst")," works on a non-empty deque."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"add_last_nonempty"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"addLast")," works on a non-empty deque."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"add_first_trigger_resize"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"addFirst")," works when called on a full underlying array"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"add_last_trigger_resize"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"addLast")," works when called on a full underlying array")),(0,n.kt)("h3",{id:"flags-for-add-after-remove-tests"},"Flags for add after remove tests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"add_first_after_remove_to_empty"),": Add some elements to a deque and remove them all, then check that ",(0,n.kt)("inlineCode",{parentName:"li"},"addFirst")," still works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"add_last_after_remove_to_empty"),": Add some elements to a deque and remove them all, then check that ",(0,n.kt)("inlineCode",{parentName:"li"},"addLast")," still works.")),(0,n.kt)("h3",{id:"flags-for-remove-tests"},"Flags for remove Tests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remove_first"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"removeFirst")," works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remove_last"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"removeLast")," works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remove_first_to_empty"),": Add some elements to a deque and remove almost all of them. Check that removing the last element with ",(0,n.kt)("inlineCode",{parentName:"li"},"removeFirst")," works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remove_last_to_empty"),": Add some elements to a deque and remove almost all of them. Check that removing the last element with ",(0,n.kt)("inlineCode",{parentName:"li"},"removeLast")," works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remove_first_to_one"),": Add some elements to a deque and remove almost all of them. Check that removing the second to last element with ",(0,n.kt)("inlineCode",{parentName:"li"},"removeFirst")," works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remove_last_to_one"),": Add some elements to a deque and remove almost all of them. Check that removing the second to last element with ",(0,n.kt)("inlineCode",{parentName:"li"},"removeLast")," works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remove_first_trigger_resize"),": Called when usage factor is <= 25% and array size > 8. Checks that the array resizes appropriately."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"remove_last_trigger_resize"),": Called when usage factor is <= 25% and array size > 8. Checks that the array resizes appropriately.")),(0,n.kt)("h3",{id:"flags-for-get-tests"},"Flags for get Tests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"get_valid"),": Check that get works on a valid index."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"get_oob_large"),": Check that get works on a large, out of bounds index."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"get_oob_neg"),": Check that get works on a negative index.")),(0,n.kt)("h3",{id:"flags-for-size-tests"},"Flags for size tests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"size"),": Check that size works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"size_after_remove_to_empty"),": Add some elements to a deque and remove them all, then check that size still works."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"size_after_remove_from_empty"),": Remove from an empty deque, then check that size still works.")),(0,n.kt)("h3",{id:"flags-for-isempty-tests"},"Flags for isEmpty Tests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"is_empty_true"),": Check that size works on an empty deque."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"is_empty_false"),": Check that size works on a non- empty deque.")),(0,n.kt)("h3",{id:"flags-for-tolist-tests"},"Flags for toList tests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"to_list_empty"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"toList")," works with empty ",(0,n.kt)("inlineCode",{parentName:"li"},"ArrayDeque"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"to_list_nonempty"),": Check that ",(0,n.kt)("inlineCode",{parentName:"li"},"toList")," works with non-empty ",(0,n.kt)("inlineCode",{parentName:"li"},"ArrayDeque"),".")),(0,n.kt)("h3",{id:"flags-for-advanced-resize-tests"},"Flags for advanced resize tests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"resize_up_and_resize_down"),": Trigger a resize up and then a resize down in the same test.")))}u.isMDXComponent=!0}}]);