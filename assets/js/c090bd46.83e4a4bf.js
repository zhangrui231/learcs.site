"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[2063],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),p=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(o.Provider,{value:n},e.children)},k="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),k=p(t),u=a,h=k["".concat(o,".").concat(u)]||k[u]||d[u]||r;return t?i.createElement(h,l(l({ref:n},c),{},{components:t})):i.createElement(h,l({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[k]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},25024:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=t(87462),a=(t(67294),t(3905));const r={title:"Lab 7 Inheritance, Linked Lists"},l="Lab 7: Inheritance, Linked Lists",s={unversionedId:"curriculum-resource/cs61a/lab/lab07",id:"curriculum-resource/cs61a/lab/lab07",title:"Lab 7 Inheritance, Linked Lists",description:"Due by 11:59pm on Wednesday, March 13.",source:"@site/docs/curriculum-resource/cs61a/lab/lab07.md",sourceDirName:"curriculum-resource/cs61a/lab",slug:"/curriculum-resource/cs61a/lab/lab07",permalink:"/docs/curriculum-resource/cs61a/lab/lab07",draft:!1,tags:[],version:"current",frontMatter:{title:"Lab 7 Inheritance, Linked Lists"},sidebar:"tutorialSidebar",previous:{title:"Lab 6 OOP",permalink:"/docs/curriculum-resource/cs61a/lab/lab06"},next:{title:"Lab 8 Mutable Trees",permalink:"/docs/curriculum-resource/cs61a/lab/lab08"}},o={},p=[{value:"Starter Files",id:"starter-files",level:2},{value:"Required Questions",id:"required-questions",level:2},{value:"Getting Started Videos",id:"getting-started-videos",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Q1: WWPD: Inheritance ABCs",id:"q1-wwpd-inheritance-abcs",level:3},{value:"Class Practice",id:"class-practice",level:2},{value:"Q2: Retirement",id:"q2-retirement",level:3},{value:"Q3: FreeChecking",id:"q3-freechecking",level:3},{value:"Linked Lists",id:"linked-lists",level:2},{value:"Q4: WWPD: Linked Lists",id:"q4-wwpd-linked-lists",level:3},{value:"Q5: Duplicate Link",id:"q5-duplicate-link",level:3},{value:"Check Your Score Locally",id:"check-your-score-locally",level:2},{value:"Submit",id:"submit",level:2}],c={toc:p},k="wrapper";function d(e){let{components:n,...r}=e;return(0,a.kt)(k,(0,i.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lab-7-inheritance-linked-lists"},"Lab 7: Inheritance, Linked Lists"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Due by 11:59pm on Wednesday, March 13.")),(0,a.kt)("h2",{id:"starter-files"},"Starter Files"),(0,a.kt)("p",null,"Download ",(0,a.kt)("a",{target:"_blank",href:t(59419).Z},"lab07.zip"),". Inside the archive, you will find starter files for the questions in this lab, along with a copy of the ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org//lab/lab07/ok"},"Ok")," autograder."),(0,a.kt)("h2",{id:"required-questions"},"Required Questions"),(0,a.kt)("h2",{id:"getting-started-videos"},"Getting Started Videos"),(0,a.kt)("p",null,"These videos may provide some helpful direction for tackling the coding problems on this assignment."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To see these videos, you should be logged into your berkeley.edu email.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://youtu.be/playlist?list=PLx38hZJ5RLZf149ILKTCfQ11eVDRm8KS1"},"YouTube link")),(0,a.kt)("h2",{id:"inheritance"},"Inheritance"),(0,a.kt)("p",null,"Consult the drop-down if you need a refresher on Inheritance. It's okay to skip directly to the questions and refer back here should you get stuck."),(0,a.kt)("p",null,"To avoid redefining attributes and methods for similar classes, we can write a single ",(0,a.kt)("strong",{parentName:"p"},"base class")," from which more specialized classes ",(0,a.kt)("strong",{parentName:"p"},"inherit"),". For example, we can write a class called ",(0,a.kt)("inlineCode",{parentName:"p"},"Pet")," and define ",(0,a.kt)("inlineCode",{parentName:"p"},"Dog")," as a ",(0,a.kt)("strong",{parentName:"p"},"subclass")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"Pet"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'class Pet:\n\n    def __init__(self, name, owner):\n        self.is_alive = True    # It\'s alive!!!\n        self.name = name\n        self.owner = owner\n\n    def eat(self, thing):\n        print(self.name + " ate a " + str(thing) + "!")\n\n    def talk(self):\n        print(self.name)\n\nclass Dog(Pet):\n\n    def talk(self):\n        super().talk()\n        print(\'This Dog says woof!\')\n')),(0,a.kt)("p",null,"Inheritance represents a hierarchical relationship between two or more classes where one class ",(0,a.kt)("strong",{parentName:"p"},"is a")," more specific version of the other: a dog ",(0,a.kt)("strong",{parentName:"p"},"is a")," pet (We use ",(0,a.kt)("strong",{parentName:"p"},"is a")," to describe this sort of relationship in OOP languages, and not to refer to the Python ",(0,a.kt)("inlineCode",{parentName:"p"},"is")," operator)."),(0,a.kt)("p",null,"Since ",(0,a.kt)("inlineCode",{parentName:"p"},"Dog")," inherits from ",(0,a.kt)("inlineCode",{parentName:"p"},"Pet"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dog")," class will also inherit the ",(0,a.kt)("inlineCode",{parentName:"p"},"Pet")," class's methods, so we don't have to redefine ",(0,a.kt)("inlineCode",{parentName:"p"},"__init__")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"eat"),". We do want each ",(0,a.kt)("inlineCode",{parentName:"p"},"Dog")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"talk")," in a ",(0,a.kt)("inlineCode",{parentName:"p"},"Dog"),"-","specific way, so we can ",(0,a.kt)("strong",{parentName:"p"},"override")," the ",(0,a.kt)("inlineCode",{parentName:"p"},"talk")," method."),(0,a.kt)("p",null,"We can use ",(0,a.kt)("inlineCode",{parentName:"p"},"super()")," to refer to the superclass of ",(0,a.kt)("inlineCode",{parentName:"p"},"self"),", and access any superclass methods as if we were an instance of the superclass. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"super().talk()")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dog")," class will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"talk")," method from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Pet")," class, but passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dog")," instance as the ",(0,a.kt)("inlineCode",{parentName:"p"},"self"),"."),(0,a.kt)("h3",{id:"q1-wwpd-inheritance-abcs"},"Q1: WWPD: Inheritance ABCs"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Important:")," For all WWPD questions, type ",(0,a.kt)("inlineCode",{parentName:"p"},"Function")," if you believe the answer is ",(0,a.kt)("inlineCode",{parentName:"p"},"<function...>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," if it errors, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Nothing")," if nothing is displayed."),(0,a.kt)("p",{parentName:"blockquote"},'Use Ok to test your knowledge with the following "What Would Python Display?" questions:'),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre"},"python3 ok -q inheritance-abc -u\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> class A:\n...   x, y = 0, 0\n...   def __init__(self):\n...         return\n>>> class B(A):\n...   def __init__(self):\n...         return\n>>> class C(A):\n...   def __init__(self):\n...         return\n>>> print(A.x, B.x, C.x)\n____________\n>>> B.x = 2\n>>> print(A.x, B.x, C.x)\n____________\n>>> A.x += 1\n>>> print(A.x, B.x, C.x)\n____________\n>>> obj = C()\n>>> obj.y = 1\n>>> C.y == obj.y\n____________\n>>> A.y = obj.y\n>>> print(A.y, B.y, C.y, obj.y)\n____________\n")),(0,a.kt)("h2",{id:"class-practice"},"Class Practice"),(0,a.kt)("p",null,"Let's say we'd like to model a bank account that can handle interactions such as depositing funds or gaining interest on current funds. In the following questions, we will be building off of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Account")," class. Here's our current definition of the class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'class Account:\n    """An account has a balance and a holder.\n    >>> a = Account(\'John\')\n    >>> a.deposit(10)\n    10\n    >>> a.balance\n    10\n    >>> a.interest\n    0.02\n    >>> a.time_to_retire(10.25)  # 10 -> 10.2 -> 10.404\n    2\n    >>> a.balance                # Calling time_to_retire method should not change the balance\n    10\n    >>> a.time_to_retire(11)     # 10 -> 10.2 -> ... -> 11.040808032\n    5\n    >>> a.time_to_retire(100)\n    117\n    """\n    max_withdrawal = 10\n    interest = 0.02\n\n    def __init__(self, account_holder):\n        self.balance = 0\n        self.holder = account_holder\n\n    def deposit(self, amount):\n        self.balance = self.balance + amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount > self.balance:\n            return "Insufficient funds"\n        if amount > self.max_withdrawal:\n            return "Can\'t withdraw that amount"\n        self.balance = self.balance - amount\n        return self.balance\n')),(0,a.kt)("h3",{id:"q2-retirement"},"Q2: Retirement"),(0,a.kt)("p",null,"Add a ",(0,a.kt)("inlineCode",{parentName:"p"},"time_to_retire")," method to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Account")," class. This method takes in an ",(0,a.kt)("inlineCode",{parentName:"p"},"amount")," and returns how many years the holder would need to wait in order for the current ",(0,a.kt)("inlineCode",{parentName:"p"},"balance")," to grow to at least ",(0,a.kt)("inlineCode",{parentName:"p"},"amount"),", assuming that the bank adds the interest (calculated as the current ",(0,a.kt)("inlineCode",{parentName:"p"},"balance")," multiplied by the ",(0,a.kt)("inlineCode",{parentName:"p"},"interest")," rate) to the ",(0,a.kt)("inlineCode",{parentName:"p"},"balance")," at the end of each year."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    def time_to_retire(self, amount):\n        """Return the number of years until balance would grow to amount."""\n        assert self.balance > 0 and amount > 0 and self.interest > 0\n        "*** YOUR CODE HERE ***"\n\n')),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q Account\n")),(0,a.kt)("h3",{id:"q3-freechecking"},"Q3: FreeChecking"),(0,a.kt)("p",null,"Implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"FreeChecking")," class, which is like the ",(0,a.kt)("inlineCode",{parentName:"p"},"Account")," class from lecture except that it charges a withdraw fee ",(0,a.kt)("inlineCode",{parentName:"p"},"withdraw_fee")," after withdrawing ",(0,a.kt)("inlineCode",{parentName:"p"},"free_withdrawals")," number of times. If a withdrawal is unsuccessful, it still counts towards the number of free withdrawals remaining, but no fee for the withdrawal will be charged."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class FreeChecking(Account):\n    \"\"\"A bank account that charges for withdrawals, but the first two are free!\n    >>> ch = FreeChecking('Jack')\n    >>> ch.balance = 20\n    >>> ch.withdraw(100)  # First one's free. Still counts as a free withdrawal even though it was unsuccessful\n    'Insufficient funds'\n    >>> ch.withdraw(3)    # Second withdrawal is also free\n    17\n    >>> ch.balance\n    17\n    >>> ch.withdraw(3)    # Ok, two free withdrawals is enough, as free_withdrawals is only 2\n    13\n    >>> ch.withdraw(3)\n    9\n    >>> ch2 = FreeChecking('John')\n    >>> ch2.balance = 10\n    >>> ch2.withdraw(3) # No fee\n    7\n    >>> ch.withdraw(3)  # ch still charges a fee\n    5\n    >>> ch.withdraw(5)  # Not enough to cover fee + withdraw\n    'Insufficient funds'\n    \"\"\"\n    withdraw_fee = 1\n    free_withdrawals = 2\n\n    \"*** YOUR CODE HERE ***\"\n\n")),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q FreeChecking\n")),(0,a.kt)("h2",{id:"linked-lists"},"Linked Lists"),(0,a.kt)("p",null,"Consult the drop-down if you need a refresher on Linked Lists. It's okay to skip directly to the questions and refer back here should you get stuck."),(0,a.kt)("p",null,"A linked list is a data structure for storing a sequence of values. It is more efficient than a regular built-in list for certain operations, such as inserting a value in the middle of a long list. Linked lists are not built in, and so we define a class called ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," to represent them. A linked list is either a ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," instance or ",(0,a.kt)("inlineCode",{parentName:"p"},"Link.empty")," (which represents an empty linked list)."),(0,a.kt)("p",null,"A instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," has two instance attributes, ",(0,a.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"rest"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class Link:\n    \"\"\"A linked list.\n\n    >>> s = Link(1)\n    >>> s.first\n    1\n    >>> s.rest is Link.empty\n    True\n    >>> s = Link(2, Link(3, Link(4)))\n    >>> s.first = 5\n    >>> s.rest.first = 6\n    >>> s.rest.rest = Link.empty\n    >>> s                                    # Displays the contents of repr(s)\n    Link(5, Link(6))\n    >>> s.rest = Link(7, Link(Link(8, Link(9))))\n    >>> s\n    Link(5, Link(7, Link(Link(8, Link(9)))))\n    >>> print(s)                             # Prints str(s)\n    <5 7 <8 9>>\n    \"\"\"\n    empty = ()\n\n    def __init__(self, first, rest=empty):\n        assert rest is Link.empty or isinstance(rest, Link)\n        self.first = first\n        self.rest = rest\n\n    def __repr__(self):\n        if self.rest is not Link.empty:\n            rest_repr = ', ' + repr(self.rest)\n        else:\n            rest_repr = ''\n        return 'Link(' + repr(self.first) + rest_repr + ')'\n\n    def __str__(self):\n        string = '<'\n        while self.rest is not Link.empty:\n            string += str(self.first) + ' '\n            self = self.rest\n        return string + str(self.first) + '>'\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rest")," attribute of a ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," instance should always be a linked list: either another ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," instance or ",(0,a.kt)("inlineCode",{parentName:"p"},"Link.empty"),". It SHOULD NEVER be ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,a.kt)("p",null,"To check if a linked list is empty, compare it to ",(0,a.kt)("inlineCode",{parentName:"p"},"Link.empty"),". Since there is only ever one empty list, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"is")," to compare, but ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," would work too."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def is_empty(s):\n    """Return whether linked list s is empty."""\n    return s is Link.empty:\n')),(0,a.kt)("h3",{id:"q4-wwpd-linked-lists"},"Q4: WWPD: Linked Lists"),(0,a.kt)("p",null,"Read over the ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," class. Make sure you understand the doctests."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'Use Ok to test your knowledge with the following "What Would Python Display?" questions:'),(0,a.kt)("pre",{parentName:"blockquote"},(0,a.kt)("code",{parentName:"pre"},"python3 ok -q link -u\n")),(0,a.kt)("p",{parentName:"blockquote"},"Enter ",(0,a.kt)("inlineCode",{parentName:"p"},"Function")," if you believe the answer is ",(0,a.kt)("inlineCode",{parentName:"p"},"<function ...>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," if it errors, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Nothing")," if nothing is displayed."),(0,a.kt)("p",{parentName:"blockquote"},"If you get stuck, try drawing out the box-and-pointer diagram for the linked list on a piece of paper or loading the ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," class into the interpreter with ",(0,a.kt)("inlineCode",{parentName:"p"},"python3 -i lab08.py"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> link = Link(1000)\n>>> link.first\n______1000\n>>> link.rest is Link.empty\n______True\n>>> link = Link(1000, 2000)\n______AssertionError\n>>> link = Link(1000, Link())\n______TypeError\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> link = Link(1, Link(2, Link(3)))\n>>> link.first\n______1\n>>> link.rest.first\n______2\n>>> link.rest.rest.rest is Link.empty\n______True\n>>> link.first = 9001\n>>> link.first\n______9001\n>>> link.rest = link.rest.rest\n>>> link.rest.first\n______3\n>>> link = Link(1)\n>>> link.rest = link\n>>> link.rest.rest is Link.empty\n______False\n>>> link.rest.rest.rest.rest.first\n______1\n>>> link = Link(2, Link(3, Link(4)))\n>>> link2 = Link(1, link)\n>>> link2.first\n______1\n>>> link2.rest.first\n______2\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> link = Link(5, Link(6, Link(7)))\n>>> link                 # Look at the __repr__ method of Link\n______Link(5, Link(6, Link(7)))\n>>> print(link)          # Look at the __str__ method of Link\n______<5 6 7>\n")),(0,a.kt)("h3",{id:"q5-duplicate-link"},"Q5: Duplicate Link"),(0,a.kt)("p",null,"Write a function ",(0,a.kt)("inlineCode",{parentName:"p"},"duplicate_link")," that takes in a linked list ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," and a value ",(0,a.kt)("inlineCode",{parentName:"p"},"val"),". It mutates ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," so that each element equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"val")," is followed by an additional ",(0,a.kt)("inlineCode",{parentName:"p"},"val")," (a duplicate copy). It returns ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note"),": In order to insert a link into a linked list, reassign the ",(0,a.kt)("inlineCode",{parentName:"p"},"rest")," attribute of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," instances that have ",(0,a.kt)("inlineCode",{parentName:"p"},"val")," as their ",(0,a.kt)("inlineCode",{parentName:"p"},"first"),". Try drawing out a doctest to visualize!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def duplicate_link(s, val):\n    """Mutates s so that each element equal to val is followed by another val.\n\n    >>> x = Link(5, Link(4, Link(5)))\n    >>> duplicate_link(x, 5)\n    >>> x\n    Link(5, Link(5, Link(4, Link(5, Link(5)))))\n    >>> y = Link(2, Link(4, Link(6, Link(8))))\n    >>> duplicate_link(y, 10)\n    >>> y\n    Link(2, Link(4, Link(6, Link(8))))\n    >>> z = Link(1, Link(2, (Link(2, Link(3)))))\n    >>> duplicate_link(z, 2) # ensures that back to back links with val are both duplicated\n    >>> z\n    Link(1, Link(2, Link(2, Link(2, Link(2, Link(3))))))\n    """\n    "*** YOUR CODE HERE ***"\n\n')),(0,a.kt)("p",null,"Use Ok to test your code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok -q duplicate_link\n")),(0,a.kt)("h2",{id:"check-your-score-locally"},"Check Your Score Locally"),(0,a.kt)("p",null,"You can locally check your score on each question of this assignment by running"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"python3 ok --score\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This does NOT submit the assignment!")," When you are satisfied with your score, submit the assignment to Gradescope to receive credit for it."),(0,a.kt)("h2",{id:"submit"},"Submit"),(0,a.kt)("p",null,"Submit this assignment by uploading any files you've edited ",(0,a.kt)("strong",{parentName:"p"},"to the appropriate Gradescope assignment.")," ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/lab/lab00/#submit-with-gradescope"},"Lab 00")," has detailed instructions."),(0,a.kt)("p",null,"In addition, all students who are ",(0,a.kt)("strong",{parentName:"p"},"not")," in the mega lab must complete this ",(0,a.kt)("a",{parentName:"p",href:"https://go.cs61a.org/lab-att"},"attendance form"),". Submit this form each week, whether you attend lab or missed it for a good reason. The attendance form is not required for mega section students."))}d.isMDXComponent=!0},59419:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/files/lab07-a89184ac74330e0a47eab3f19e2b3b2b.zip"}}]);