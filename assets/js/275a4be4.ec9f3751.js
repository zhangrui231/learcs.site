"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[45099],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,m=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(m,i(i({ref:t},h),{},{components:n})):r.createElement(m,i({ref:t},h))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},51593:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"11-regex"},i="Regular expressions",s={unversionedId:"curriculum-resource/py4e/book/11",id:"curriculum-resource/py4e/book/11",title:"11-regex",description:"So far we have been reading through files, looking for patterns and",source:"@site/docs/curriculum-resource/py4e/book/11.md",sourceDirName:"curriculum-resource/py4e/book",slug:"/curriculum-resource/py4e/book/11",permalink:"/docs/curriculum-resource/py4e/book/11",draft:!1,tags:[],version:"current",frontMatter:{title:"11-regex"},sidebar:"tutorialSidebar",previous:{title:"10-tuples",permalink:"/docs/curriculum-resource/py4e/book/10"},next:{title:"12-network",permalink:"/docs/curriculum-resource/py4e/book/12"}},l={},p=[{value:"Character matching in regular expressions",id:"character-matching-in-regular-expressions",level:2},{value:"Extracting data using regular expressions",id:"extracting-data-using-regular-expressions",level:2},{value:"Combining searching and extracting",id:"combining-searching-and-extracting",level:2},{value:"Escape character",id:"escape-character",level:2},{value:"Summary",id:"summary",level:2},{value:"Bonus section for Unix / Linux users",id:"bonus-section-for-unix--linux-users",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Exercises",id:"exercises",level:2}],h={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"regular-expressions"},"Regular expressions"),(0,a.kt)("p",null,"So far we have been reading through files, looking for patterns and\nextracting various bits of lines that we find interesting. We have been\nusing string methods like ",(0,a.kt)("inlineCode",{parentName:"p"},"split")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"find")," and\nusing lists and string slicing to extract portions of the lines."),(0,a.kt)("p",null,"This task of searching and extracting is so common that Python has a\nvery powerful module called ",(0,a.kt)("em",{parentName:"p"},"regular expressions")," that handles\nmany of these tasks quite elegantly. The reason we have not introduced\nregular expressions earlier in the book is because while they are very\npowerful, they are a little complicated and their syntax takes some\ngetting used to."),(0,a.kt)("p",null,"Regular expressions are almost their own little programming language\nfor searching and parsing strings. As a matter of fact, entire books\nhave been written on the topic of regular expressions. In this chapter,\nwe will only cover the basics of regular expressions. For more detail on\nregular expressions, see:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Regular_expression"},"https://en.wikipedia.org/wiki/Regular","_","expression")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/library/re.html"},"https://docs.python.org/library/re.html")),(0,a.kt)("p",null,"The regular expression module ",(0,a.kt)("inlineCode",{parentName:"p"},"re")," must be imported into\nyour program before you can use it. The simplest use of the regular\nexpression module is the ",(0,a.kt)("inlineCode",{parentName:"p"},"search()")," function. The following\nprogram demonstrates a trivial use of the search function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that contain 'From'\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    if re.search('From:', line):\n        print(line)\n\n# Code: https://www.py4e.com/code3/re01.py\n")),(0,a.kt)("p",null,"We open the file, loop through each line, and use the regular\nexpression ",(0,a.kt)("inlineCode",{parentName:"p"},"search()")," to only print out lines that contain\nthe string \u201cFrom:\u201d. This program does not use the real power of regular\nexpressions, since we could have just as easily used\n",(0,a.kt)("inlineCode",{parentName:"p"},"line.find()")," to accomplish the same result."),(0,a.kt)("p",null,"The power of the regular expressions comes when we add special\ncharacters to the search string that allow us to more precisely control\nwhich lines match the string. Adding these special characters to our\nregular expression allow us to do sophisticated matching and extraction\nwhile writing very little code."),(0,a.kt)("p",null,"For example, the caret character is used in regular expressions to\nmatch \u201cthe beginning\u201d of a line. We could change our program to only\nmatch lines where \u201cFrom:\u201d was at the beginning of the line as\nfollows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that start with 'From'\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    if re.search('^From:', line):\n        print(line)\n\n# Code: https://www.py4e.com/code3/re02.py\n")),(0,a.kt)("p",null,"Now we will only match lines that ",(0,a.kt)("em",{parentName:"p"},"start with")," the string\n\u201cFrom:\u201d. This is still a very simple example that we could have done\nequivalently with the ",(0,a.kt)("inlineCode",{parentName:"p"},"startswith()")," method from the string\nmodule. But it serves to introduce the notion that regular expressions\ncontain special action characters that give us more control as to what\nwill match the regular expression."),(0,a.kt)("h2",{id:"character-matching-in-regular-expressions"},"Character matching in regular expressions"),(0,a.kt)("p",null,"There are a number of other special characters that let us build even\nmore powerful regular expressions. The most commonly used special\ncharacter is the period or full stop, which matches any character."),(0,a.kt)("p",null,"In the following example, the regular expression ",(0,a.kt)("inlineCode",{parentName:"p"},"F..m:"),"\nwould match any of the strings \u201cFrom:\u201d, \u201cFxxm:\u201d, \u201cF12m:\u201d, or \u201cF!@m:\u201d since the period characters\nin the regular expression match any character."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that start with 'F', followed by\n# 2 characters, followed by 'm:'\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    if re.search('^F..m:', line):\n        print(line)\n\n# Code: https://www.py4e.com/code3/re03.py\n")),(0,a.kt)("p",null,"This is particularly powerful when combined with the ability to\nindicate that a character can be repeated any number of times using the\n",(0,a.kt)("inlineCode",{parentName:"p"},"*")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," characters in your regular expression.\nThese special characters mean that instead of matching a single\ncharacter in the search string, they match zero-or-more characters (in\nthe case of the asterisk) or one-or-more of the characters (in the case\nof the plus sign)."),(0,a.kt)("p",null,"We can further narrow down the lines that we match using a repeated\n",(0,a.kt)("em",{parentName:"p"},"wild card")," character in the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that start with From and have an at sign\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    if re.search('^From:.+@', line):\n        print(line)\n\n# Code: https://www.py4e.com/code3/re04.py\n")),(0,a.kt)("p",null,"The search string ",(0,a.kt)("inlineCode",{parentName:"p"},"^From:.+@")," will successfully match\nlines that start with \u201cFrom:\u201d, followed by one or more characters\n( ",(0,a.kt)("inlineCode",{parentName:"p"},".+"),"), followed by an at-sign. So this will match the\nfollowing line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"From: stephen.marquard@uct.ac.za\n")),(0,a.kt)("p",null,"You can think of the ",(0,a.kt)("inlineCode",{parentName:"p"},".+")," wildcard as expanding to match\nall the characters between the colon character and the at-sign."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"From:.+@\n")),(0,a.kt)("p",null,"It is good to think of the plus and asterisk characters as \u201cpushy\u201d.\nFor example, the following string would match the last at-sign in the\nstring as the ",(0,a.kt)("inlineCode",{parentName:"p"},".+")," pushes outwards, as shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"From: stephen.marquard@uct.ac.za, csev@umich.edu, and cwen @iupui.edu\n")),(0,a.kt)("p",null,"It is possible to tell an asterisk or plus sign not to be so \u201cgreedy\u201d\nby adding another character. See the detailed documentation for\ninformation on turning off the greedy behavior."),(0,a.kt)("h2",{id:"extracting-data-using-regular-expressions"},"Extracting data using regular expressions"),(0,a.kt)("p",null,"If we want to extract data from a string in Python we can use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"findall()")," method to extract all of the substrings which\nmatch a regular expression. Let\u2019s use the example of wanting to extract\nanything that looks like an email address from any line regardless of\nformat. For example, we want to pull the email addresses from each of\nthe following lines:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\nReturn-Path: <postmaster@collab.sakaiproject.org>\n          for <source@collab.sakaiproject.org>;\nReceived: (from apache@localhost)\nAuthor: stephen.marquard@uct.ac.za\n")),(0,a.kt)("p",null,"We don\u2019t want to write code for each of the types of lines, splitting\nand slicing differently for each line. This following program uses\n",(0,a.kt)("inlineCode",{parentName:"p"},"findall()")," to find the lines with email addresses in them\nand extract one or more addresses from each of those lines."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import re\ns = 'A message from csev@umich.edu to cwen@iupui.edu about meeting @2PM'\nlst = re.findall('\\S+@\\S+', s)\nprint(lst)\n\n# Code: https://www.py4e.com/code3/re05.py\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"findall()")," method searches the string in the second\nargument and returns a list of all of the strings that look like email\naddresses. We are using a two-character sequence that matches a\nnon-whitespace character ( ",(0,a.kt)("inlineCode",{parentName:"p"},"\\S"),")."),(0,a.kt)("p",null,"The output of the program would be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"['csev@umich.edu', 'cwen@iupui.edu']\n")),(0,a.kt)("p",null,"Translating the regular expression, we are looking for substrings\nthat have at least one non-whitespace character, followed by an at-sign,\nfollowed by at least one more non-whitespace character. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"\\S+")," matches as many non-whitespace characters as\npossible."),(0,a.kt)("p",null,"The regular expression would match twice (",(0,a.kt)("a",{parentName:"p",href:"mailto:csev@umich.edu"},"csev@umich.edu")," and\n",(0,a.kt)("a",{parentName:"p",href:"mailto:cwen@iupui.edu"},"cwen@iupui.edu"),"), but it would not match the string \u201c@2PM\u201d because there are no\nnon-blank characters ",(0,a.kt)("em",{parentName:"p"},"before")," the at-sign. We can use this\nregular expression in a program to read all the lines in a file and\nprint out anything that looks like an email address as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that have an at sign between characters\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    x = re.findall('\\S+@\\S+', line)\n    if len(x) > 0:\n        print(x)\n\n# Code: https://www.py4e.com/code3/re06.py\n")),(0,a.kt)("p",null,"We read each line and then extract all the substrings that match our\nregular expression. Since ",(0,a.kt)("inlineCode",{parentName:"p"},"findall()")," returns a list, we\nsimply check if the number of elements in our returned list is more than\nzero to print only lines where we found at least one substring that\nlooks like an email address."),(0,a.kt)("p",null,"If we run the program on ",(0,a.kt)("em",{parentName:"p"},"mbox-short.txt")," we get the following\noutput:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"...\n['<source@collab.sakaiproject.org>;']\n['<source@collab.sakaiproject.org>;']\n['apache@localhost)']\n['source@collab.sakaiproject.org;']\n['cwen@iupui.edu']\n['source@collab.sakaiproject.org']\n['cwen@iupui.edu']\n['cwen@iupui.edu']\n['wagnermr@iupui.edu']\n")),(0,a.kt)("p",null,"Some of our email addresses have incorrect characters like \u201c<\u201d or\n\u201c;\u201d at the beginning or end. Let\u2019s declare that we are only interested\nin the portion of the string that starts and ends with a letter or a\nnumber."),(0,a.kt)("p",null,"To do this, we use another feature of regular expressions. Square\nbrackets are used to indicate a set of multiple acceptable characters we\nare willing to consider matching. In a sense, the ",(0,a.kt)("inlineCode",{parentName:"p"},"\\S")," is\nasking to match the set of \u201cnon-whitespace characters\u201d. Now we will be a\nlittle more explicit in terms of the characters we will match."),(0,a.kt)("p",null,"Here is our new regular expression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[a-zA-Z0-9]\\S*@\\S*[a-zA-Z]\n")),(0,a.kt)("p",null,"This is getting a little complicated and you can begin to see why\nregular expressions are their own little language unto themselves.\nTranslating this regular expression, we are looking for substrings that\nstart with a ",(0,a.kt)("em",{parentName:"p"},"single")," lowercase letter, uppercase letter, or\nnumber \u201c","[","a-zA-Z0-9","]","\u201d, followed by zero or more non-blank characters\n( ",(0,a.kt)("inlineCode",{parentName:"p"},"\\S*"),"), followed by an at-sign, followed by zero or more\nnon-blank characters ( ",(0,a.kt)("inlineCode",{parentName:"p"},"\\S*"),"), followed by an uppercase or\nlowercase letter. Note that we switched from ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," to\n",(0,a.kt)("inlineCode",{parentName:"p"},"*")," to indicate zero or more non-blank characters since\n",(0,a.kt)("inlineCode",{parentName:"p"},"[a-zA-Z0-9]")," is already one non-blank character. Remember\nthat the ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," applies to the single\ncharacter immediately to the left of the plus or asterisk."),(0,a.kt)("p",null,"If we use this expression in our program, our data is much\ncleaner:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that have an at sign between characters\n# The characters must be a letter or number\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    x = re.findall('[a-zA-Z0-9]\\S*@\\S*[a-zA-Z]', line)\n    if len(x) > 0:\n        print(x)\n\n# Code: https://www.py4e.com/code3/re07.py\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"...\n['wagnermr@iupui.edu']\n['cwen@iupui.edu']\n['postmaster@collab.sakaiproject.org']\n['200801032122.m03LMFo4005148@nakamura.uits.iupui.edu']\n['source@collab.sakaiproject.org']\n['source@collab.sakaiproject.org']\n['source@collab.sakaiproject.org']\n['apache@localhost']\n")),(0,a.kt)("p",null,"Notice that on the ",(0,a.kt)("inlineCode",{parentName:"p"},"source@collab.sakaiproject.org")," lines,\nour regular expression eliminated two letters at the end of the string\n(\u201c>;\u201d). This is because when we append ",(0,a.kt)("inlineCode",{parentName:"p"},"[a-zA-Z]")," to the\nend of our regular expression, we are demanding that whatever string the\nregular expression parser finds must end with a letter. So when it sees\nthe \u201c>\u201d at the end of \u201csakaiproject.org>;\u201d it simply stops at the\nlast \u201cmatching\u201d letter it found (i.e., the \u201cg\u201d was the last good\nmatch)."),(0,a.kt)("p",null,"Also note that the output of the program is a Python list that has a\nstring as the single element in the list."),(0,a.kt)("h2",{id:"combining-searching-and-extracting"},"Combining searching and extracting"),(0,a.kt)("p",null,"If we want to find numbers on lines that start with the string \u201cX-\u201d\nsuch as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"X-DSPAM-Confidence: 0.8475\nX-DSPAM-Probability: 0.0000\n")),(0,a.kt)("p",null,"we don\u2019t just want any floating-point numbers from any lines. We only\nwant to extract numbers from lines that have the above syntax."),(0,a.kt)("p",null,"We can construct the following regular expression to select the\nlines:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"^X-.*: [0-9.]+\n")),(0,a.kt)("p",null,"Translating this, we are saying, we want lines that start with\n",(0,a.kt)("inlineCode",{parentName:"p"},"X-"),", followed by zero or more characters ( ",(0,a.kt)("inlineCode",{parentName:"p"},".*"),"),\nfollowed by a colon ( ",(0,a.kt)("inlineCode",{parentName:"p"},":"),") and then a space. After the space\nwe are looking for one or more characters that are either a digit (0-9)\nor a period ",(0,a.kt)("inlineCode",{parentName:"p"},"[0-9.]+"),". Note that inside the square brackets,\nthe period matches an actual period (i.e., it is not a wildcard between\nthe square brackets)."),(0,a.kt)("p",null,"This is a very tight expression that will pretty much match only the\nlines we are interested in as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that start with 'X' followed by any non\n# whitespace characters and ':'\n# followed by a space and any number.\n# The number can include a decimal.\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    if re.search('^X\\S*: [0-9.]+', line):\n        print(line)\n\n# Code: https://www.py4e.com/code3/re10.py\n")),(0,a.kt)("p",null,"When we run the program, we see the data nicely filtered to show only\nthe lines we are looking for."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"X-DSPAM-Confidence: 0.8475\nX-DSPAM-Probability: 0.0000\nX-DSPAM-Confidence: 0.6178\nX-DSPAM-Probability: 0.0000\n...\n")),(0,a.kt)("p",null,"But now we have to solve the problem of extracting the numbers. While\nit would be simple enough to use ",(0,a.kt)("inlineCode",{parentName:"p"},"split"),", we can use another\nfeature of regular expressions to both search and parse the line at the\nsame time."),(0,a.kt)("p",null,"Parentheses are another special character in regular expressions.\nWhen you add parentheses to a regular expression, they are ignored when\nmatching the string. But when you are using ",(0,a.kt)("inlineCode",{parentName:"p"},"findall()"),",\nparentheses indicate that while you want the whole expression to match,\nyou only are interested in extracting a portion of the substring that\nmatches the regular expression."),(0,a.kt)("p",null,"So we make the following change to our program:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that start with 'X' followed by any\n# non whitespace characters and ':' followed by a space\n# and any number. The number can include a decimal.\n# Then print the number if it is greater than zero.\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    x = re.findall('^X\\S*: ([0-9.]+)', line)\n    if len(x) > 0:\n        print(x)\n\n# Code: https://www.py4e.com/code3/re11.py\n")),(0,a.kt)("p",null,"Instead of calling ",(0,a.kt)("inlineCode",{parentName:"p"},"search()"),", we add parentheses around\nthe part of the regular expression that represents the floating-point\nnumber to indicate we only want ",(0,a.kt)("inlineCode",{parentName:"p"},"findall()")," to give us back\nthe floating-point number portion of the matching string."),(0,a.kt)("p",null,"The output from this program is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"['0.8475']\n['0.0000']\n['0.6178']\n['0.0000']\n['0.6961']\n['0.0000']\n...\n")),(0,a.kt)("p",null,"The numbers are still in a list and need to be converted from strings\nto floating point, but we have used the power of regular expressions to\nboth search and extract the information we found interesting."),(0,a.kt)("p",null,"As another example of this technique, if you look at the file there\nare a number of lines of the form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772\n")),(0,a.kt)("p",null,"If we wanted to extract all of the revision numbers (the integer\nnumber at the end of these lines) using the same technique as above, we\ncould write the following program:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that start with 'Details: rev='\n# followed by numbers\n# Then print the number if one is found\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    x = re.findall('^Details:.*rev=([0-9]+)', line)\n    if len(x) > 0:\n        print(x)\n\n# Code: https://www.py4e.com/code3/re12.py\n")),(0,a.kt)("p",null,"Translating our regular expression, we are looking for lines that\nstart with ",(0,a.kt)("inlineCode",{parentName:"p"},"Details:"),", followed by any number of characters\n( ",(0,a.kt)("inlineCode",{parentName:"p"},".*"),"), followed by ",(0,a.kt)("inlineCode",{parentName:"p"},"rev="),", and then by one or\nmore digits. We want to find lines that match the entire expression but\nwe only want to extract the integer number at the end of the line, so we\nsurround ",(0,a.kt)("inlineCode",{parentName:"p"},"[0-9]+")," with parentheses."),(0,a.kt)("p",null,"When we run the program, we get the following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"['39772']\n['39771']\n['39770']\n['39769']\n...\n")),(0,a.kt)("p",null,"Remember that the ",(0,a.kt)("inlineCode",{parentName:"p"},"[0-9]+")," is \u201cgreedy\u201d and it tries to\nmake as large a string of digits as possible before extracting those\ndigits. This \u201cgreedy\u201d behavior is why we get all five digits for each\nnumber. The regular expression module expands in both directions until\nit encounters a non-digit, or the beginning or the end of a line."),(0,a.kt)("p",null,"Now we can use regular expressions to redo an exercise from earlier\nin the book where we were interested in the time of day of each mail\nmessage. We looked for lines of the form:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n")),(0,a.kt)("p",null,"and wanted to extract the hour of the day for each line. Previously\nwe did this with two calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"split"),". First the line was\nsplit into words and then we pulled out the fifth word and split it\nagain on the colon character to pull out the two characters we were\ninterested in."),(0,a.kt)("p",null,"While this worked, it actually results in pretty brittle code that is\nassuming the lines are nicely formatted. If you were to add enough error\nchecking (or a big try/except block) to insure that your program never\nfailed when presented with incorrectly formatted lines, the code would\nballoon to 10-15 lines of code that was pretty hard to read."),(0,a.kt)("p",null,"We can do this in a far simpler way with the following regular\nexpression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"^From .* [0-9][0-9]:\n")),(0,a.kt)("p",null,"The translation of this regular expression is that we are looking for\nlines that start with ",(0,a.kt)("inlineCode",{parentName:"p"},"From")," (note the space), followed by\nany number of characters ( ",(0,a.kt)("inlineCode",{parentName:"p"},".*"),"), followed by a space,\nfollowed by two digits ",(0,a.kt)("inlineCode",{parentName:"p"},"[0-9][0-9]"),", followed by a colon\ncharacter. This is the definition of the kinds of lines we are looking\nfor."),(0,a.kt)("p",null,"In order to pull out only the hour using ",(0,a.kt)("inlineCode",{parentName:"p"},"findall()"),", we\nadd parentheses around the two digits as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"^From .* ([0-9][0-9]):\n")),(0,a.kt)("p",null,"This results in the following program:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Search for lines that start with From and a character\n# followed by a two digit number between 00 and 99 followed by ':'\n# Then print the number if one is found\nimport re\nhand = open('mbox-short.txt')\nfor line in hand:\n    line = line.rstrip()\n    x = re.findall('^From .* ([0-9][0-9]):', line)\n    if len(x) > 0: print(x)\n\n# Code: https://www.py4e.com/code3/re13.py\n")),(0,a.kt)("p",null,"When the program runs, it produces the following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"['09']\n['18']\n['16']\n['15']\n...\n")),(0,a.kt)("h2",{id:"escape-character"},"Escape character"),(0,a.kt)("p",null,"Since we use special characters in regular expressions to match the\nbeginning or end of a line or specify wild cards, we need a way to\nindicate that these characters are \u201cnormal\u201d and we want to match the\nactual character such as a dollar sign or caret."),(0,a.kt)("p",null,"We can indicate that we want to simply match a character by prefixing\nthat character with a backslash. For example, we can find money amounts\nwith the following regular expression."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import re\nx = 'We just received $10.00 for cookies.'\ny = re.findall('\\$[0-9.]+',x)\n")),(0,a.kt)("p",null,"Since we prefix the dollar sign with a backslash, it actually matches\nthe dollar sign in the input string instead of matching the \u201cend of\nline\u201d, and the rest of the regular expression matches one or more digits\nor the period character. ",(0,a.kt)("em",{parentName:"p"},"Note:")," Inside square brackets,\ncharacters are not \u201cspecial\u201d. So when we say ",(0,a.kt)("inlineCode",{parentName:"p"},"[0-9.]"),", it\nreally means digits or a period. Outside of square brackets, a period is\nthe \u201cwild-card\u201d character and matches any character. Inside square\nbrackets, the period is a period."),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"While this only scratched the surface of regular expressions, we have\nlearned a bit about the language of regular expressions. They are search\nstrings with special characters in them that communicate your wishes to\nthe regular expression system as to what defines \u201cmatching\u201d and what is\nextracted from the matched strings. Here are some of those special\ncharacters and character sequences:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"^")," Matches the beginning of the line."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"$")," Matches the end of the line."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".")," Matches any character (a wildcard)."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\\s")," Matches a whitespace character."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\\S")," Matches a non-whitespace character (opposite of\n","\\","s)."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"*")," Applies to the immediately preceding character(s) and\nindicates to match zero or more times."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"*?")," Applies to the immediately preceding character(s) and\nindicates to match zero or more times in \u201cnon-greedy mode\u201d."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"+")," Applies to the immediately preceding character(s) and\nindicates to match one or more times."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"+?")," Applies to the immediately preceding character(s) and\nindicates to match one or more times in \u201cnon-greedy mode\u201d."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"?")," Applies to the immediately preceding character(s) and\nindicates to match zero or one time."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"??")," Applies to the immediately preceding character(s) and\nindicates to match zero or one time in \u201cnon-greedy mode\u201d."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[aeiou]")," Matches a single character as long as that\ncharacter is in the specified set. In this example, it would match \u201ca\u201d,\n\u201ce\u201d, \u201ci\u201d, \u201co\u201d, or \u201cu\u201d, but no other characters."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[a-z0-9]")," You can specify ranges of characters using the\nminus sign. This example is a single character that must be a lowercase\nletter or a digit."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[^A-Za-z]")," When the first character in the set notation\nis a caret, it inverts the logic. This example matches a single\ncharacter that is anything ",(0,a.kt)("em",{parentName:"p"},"other than")," an uppercase or lowercase\nletter."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"( )")," When parentheses are added to a regular expression,\nthey are ignored for the purpose of matching, but allow you to extract a\nparticular subset of the matched string rather than the whole string\nwhen using ",(0,a.kt)("inlineCode",{parentName:"p"},"findall()"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\\b")," Matches the empty string, but only at the start or\nend of a word."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\\B")," Matches the empty string, but not at the start or end\nof a word."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\\d")," Matches any decimal digit; equivalent to the set\n","[","0-9","]","."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"\\D")," Matches any non-digit character; equivalent to the\nset ","[","^0-9","]","."),(0,a.kt)("h2",{id:"bonus-section-for-unix--linux-users"},"Bonus section for Unix / Linux users"),(0,a.kt)("p",null,"Support for searching files using regular expressions was built into\nthe Unix operating system since the 1960s and it is available in nearly\nall programming languages in one form or another."),(0,a.kt)("p",null,"As a matter of fact, there is a command-line program built into Unix\ncalled ",(0,a.kt)("em",{parentName:"p"},"grep")," (Generalized Regular Expression Parser) that does\npretty much the same as the ",(0,a.kt)("inlineCode",{parentName:"p"},"search()")," examples in this\nchapter. So if you have a Macintosh or Linux system, you can try the\nfollowing commands in your command-line window."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ grep '^From:' mbox-short.txt\nFrom: stephen.marquard@uct.ac.za\nFrom: louis@media.berkeley.edu\nFrom: zqian@umich.edu\nFrom: rjlowe@iupui.edu\n")),(0,a.kt)("p",null,"This tells ",(0,a.kt)("inlineCode",{parentName:"p"},"grep")," to show you lines that start with the\nstring \u201cFrom:\u201d in the file ",(0,a.kt)("em",{parentName:"p"},"mbox-short.txt"),". If you experiment\nwith the ",(0,a.kt)("inlineCode",{parentName:"p"},"grep")," command a bit and read the documentation for\n",(0,a.kt)("inlineCode",{parentName:"p"},"grep"),", you will find some subtle differences between the\nregular expression support in Python and the regular expression support\nin ",(0,a.kt)("inlineCode",{parentName:"p"},"grep"),". As an example, ",(0,a.kt)("inlineCode",{parentName:"p"},"grep")," does not support\nthe non-blank character ",(0,a.kt)("inlineCode",{parentName:"p"},"\\S")," so you will need to use the\nslightly more complex set notation ",(0,a.kt)("inlineCode",{parentName:"p"},"[^ ]"),", which simply means\nmatch a character that is anything other than a space."),(0,a.kt)("h2",{id:"debugging"},"Debugging"),(0,a.kt)("p",null,"Python has some simple and rudimentary built-in documentation that\ncan be quite helpful if you need a quick refresher to trigger your\nmemory about the exact name of a particular method. This documentation\ncan be viewed in the Python interpreter in interactive mode."),(0,a.kt)("p",null,"You can bring up an interactive help system using\n",(0,a.kt)("inlineCode",{parentName:"p"},"help()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> help()\n\nhelp> modules\n")),(0,a.kt)("p",null,"If you know what module you want to use, you can use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"dir()")," command to find the methods in the module as\nfollows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> import re\n>>> dir(re)\n[.. 'compile', 'copy_reg', 'error', 'escape', 'findall',\\\n'finditer', 'match', 'purge', 'search', 'split', 'sre_compile',\\\n'sre_parse', 'sub', 'subn', 'sys', 'template']\n")),(0,a.kt)("p",null,"You can also get a small amount of documentation on a particular\nmethod using the help command combined with the desired method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> help (re.search)\nHelp on function search in module re:\n\nsearch(pattern, string, flags=0)\n    Scan through string looking for a match to the pattern, returning\n    a match object, or None if no match was found.\n>>>\n")),(0,a.kt)("p",null,"The built-in documentation is not very extensive, but it can be\nhelpful when you are in a hurry or don\u2019t have access to a web browser or\nsearch engine."),(0,a.kt)("h2",{id:"glossary"},"Glossary"),(0,a.kt)("p",null,"brittle code\nCode that works when the input data is in a particular format but is\nprone to breakage if there is some deviation from the correct format. We\ncall this \u201cbrittle code\u201d because it is easily broken.\ngreedy matching\nThe notion that the ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," characters in a\nregular expression expand outward to match the largest possible string.\ngrep\nA command available in most Unix systems that searches through text\nfiles looking for lines that match regular expressions. The command name\nstands for \u201cGeneralized Regular Expression Parser\u201d.\nregular expression\nA language for expressing more complex search strings. A regular\nexpression may contain special characters that indicate that a search\nonly matches at the beginning or end of a line or many other similar\ncapabilities.\nwild card\nA special character that matches any character. In regular expressions\nthe wild-card character is the period."),(0,a.kt)("h2",{id:"exercises"},"Exercises"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Exercise 1:")," Write a simple program to simulate the\noperation of the ",(0,a.kt)("inlineCode",{parentName:"p"},"grep")," command on Unix. Ask the user to\nenter a regular expression and count the number of lines that matched\nthe regular expression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ python grep.py\nEnter a regular expression: ^Author\nmbox.txt had 1798 lines that matched ^Author\n\n$ python grep.py\nEnter a regular expression: ^X-\nmbox.txt had 14368 lines that matched ^X-\n\n$ python grep.py\nEnter a regular expression: java$\nmbox.txt had 4175 lines that matched java$\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Exercise 2:")," Write a program to look for lines of the\nform:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"New Revision: 39772\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Extract the number from each of the lines using a regular"),"\n",(0,a.kt)("strong",{parentName:"p"},"expression and the ",(0,a.kt)("inlineCode",{parentName:"strong"},"findall()")," method. Compute the average of"),"\n",(0,a.kt)("strong",{parentName:"p"},"the numbers and print out the average as an integer.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Enter file:mbox.txt\n38549\n\nEnter file:mbox-short.txt\n39756\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"If you find a mistake in this book, feel free to send me a fix using\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/csev/py4e/tree/master/book3"},"Github"),"."))}u.isMDXComponent=!0}}]);