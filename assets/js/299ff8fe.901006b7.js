"use strict";(self.webpackChunklearncs_set=self.webpackChunklearncs_set||[]).push([[1376],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=a,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||r;return n?i.createElement(k,o(o({ref:t},d),{},{components:n})):i.createElement(k,o({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},63123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={},o="Discussion 12 | CS 61A Spring 2024",l={unversionedId:"curriculum-resource/cs61a/dis/disc12",id:"curriculum-resource/cs61a/dis/disc12",title:"Discussion 12 | CS 61A Spring 2024",description:"Discussion 12: Final Review",source:"@site/docs/curriculum-resource/cs61a/dis/disc12.md",sourceDirName:"curriculum-resource/cs61a/dis",slug:"/curriculum-resource/cs61a/dis/disc12",permalink:"/docs/curriculum-resource/cs61a/dis/disc12",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Discussion 11 | CS 61A Spring 2024",permalink:"/docs/curriculum-resource/cs61a/dis/disc11"},next:{title:"Discussion 0 | CS 61A Spring 2024",permalink:"/docs/curriculum-resource/cs61a/dis/sol-disc00"}},s={},p=[{value:"Discussion 12: Final Review",id:"discussion-12-final-review",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Lists",id:"lists",level:2},{value:"Q1: Word Rope",id:"q1-word-rope",level:3},{value:"Linked Lists",id:"linked-lists",level:2},{value:"Q2: Linear Sublists",id:"q2-linear-sublists",level:3},{value:"Scheme",id:"scheme",level:2},{value:"Q3: Increasing Rope",id:"q3-increasing-rope",level:3},{value:"SQL",id:"sql",level:2},{value:"Q4: A Secret Message",id:"q4-a-secret-message",level:3},{value:"Document the Occasion",id:"document-the-occasion",level:2}],d={toc:p},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,i.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"discussion-12--cs-61a-spring-2024"},"Discussion 12 | CS 61A Spring 2024"),(0,a.kt)("h2",{id:"discussion-12-final-review"},"Discussion 12: Final Review"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{target:"_blank",href:n(99792).Z},"disc12.pdf"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Reminder:")," Use Discord for voice chat with the course staff. Write to ",(0,a.kt)("inlineCode",{parentName:"p"},"@discuss")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"#discuss-queue")," channel on Discord at any time, and a member of the course staff will join your group's voice channel."),(0,a.kt)("p",null,"Pick someone in your group to ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/discord"},"join Discord"),". It's fine if multiple people join, but one is enough."),(0,a.kt)("p",null,"Now switch to Pensieve:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Everyone"),": Go to ",(0,a.kt)("a",{parentName:"li",href:"http://discuss.pensieve.co/"},"discuss.pensieve.co")," and log in with your @berkeley.edu email, then enter your group number. (Your group number is the number of your Discord channel.)")),(0,a.kt)("p",null,"Once you're on Pensieve, you don't need to return to this page; Pensieve has all the same content (but more features). If for some reason Penseive doesn't work, return to this page and continue with the discussion."),(0,a.kt)("p",null,"Post in the ",(0,a.kt)("inlineCode",{parentName:"p"},"#help")," channel on ",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/discord/"},"Discord")," if you have trouble."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Pro tip:")," Any of you can type a question into your group's Discord ",(0,a.kt)("a",{parentName:"p",href:"https://support.discord.com/hc/en-us/articles/4412085582359-Text-Channels-Text-Chat-In-Voice-Channels#h_01FMJT412WBX1MR4HDYNR8E95X"},"channel's text chat")," with the ",(0,a.kt)("inlineCode",{parentName:"p"},"@discuss")," tag, and a member of the course staff will respond."),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"If you have only 1 or 2 people in your group, you can join the other group in the room with you."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ice breaker:")," Everybody say your name and the non-CS/EECS course that you're most excited about taking next semester."),(0,a.kt)("h2",{id:"lists"},"Lists"),(0,a.kt)("p",null,"The two most common mutation operations for lists are item assignment and the ",(0,a.kt)("inlineCode",{parentName:"p"},"append")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">>> s = [1, 3, 4]\n>>> t = s  # A second name for the same list\n>>> t[0] = 2  # this changes the first element of the list to 2, affecting both s and t\n>>> s\n[2, 3, 4]\n>>> s.append(5)  # this adds 5 to the end of the list, affecting both s and t\n>>> t\n[2, 3, 4, 5]\n")),(0,a.kt)("p",null,"There are many other list mutation methods:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"append(elem)"),": Add ",(0,a.kt)("inlineCode",{parentName:"li"},"elem")," to the end of the list. Return ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"extend(s)"),": Add all elements of iterable ",(0,a.kt)("inlineCode",{parentName:"li"},"s")," to the end of the list. Return ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"insert(i, elem)"),": Insert ",(0,a.kt)("inlineCode",{parentName:"li"},"elem")," at index ",(0,a.kt)("inlineCode",{parentName:"li"},"i"),". If ",(0,a.kt)("inlineCode",{parentName:"li"},"i")," is greater than or equal to the length of the list, then ",(0,a.kt)("inlineCode",{parentName:"li"},"elem")," is inserted at the end. This does not replace any existing elements, but only adds the new element ",(0,a.kt)("inlineCode",{parentName:"li"},"elem"),". Return ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"remove(elem)"),": Remove the first occurrence of ",(0,a.kt)("inlineCode",{parentName:"li"},"elem")," in list. Return ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),". Errors if ",(0,a.kt)("inlineCode",{parentName:"li"},"elem")," is not in the list."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pop(i)"),": Remove and return the element at index ",(0,a.kt)("inlineCode",{parentName:"li"},"i"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pop()"),": Remove and return the last element.")),(0,a.kt)("h3",{id:"q1-word-rope"},"Q1: Word Rope"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition:")," A ",(0,a.kt)("em",{parentName:"p"},"rope")," in Python is a list containing only one-letter strings except for the last element, which may either be a one-letter string or a rope."),(0,a.kt)("p",null,"Implement ",(0,a.kt)("inlineCode",{parentName:"p"},"word_rope"),", a Python function that takes a non-empty string ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," containing only letters and spaces that does not start or end with a space. It returns a ",(0,a.kt)("em",{parentName:"p"},"rope")," containing the letters of ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," in which each word is in a separate list."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important:")," You may not use slicing or the ",(0,a.kt)("inlineCode",{parentName:"p"},"split"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"find"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," methods of a string. Solve the problem using list operations."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Reminder:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"s[-1]")," evaluates to the last element of a sequence ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,a.kt)("p",null,"Run in 61A Code"),(0,a.kt)("p",null,"In this implementation, ",(0,a.kt)("inlineCode",{parentName:"p"},"result")," is a rope and ",(0,a.kt)("inlineCode",{parentName:"p"},"word")," is a list within that rope which is still being constructed. When ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," is a space, add an empty list to the end of ",(0,a.kt)("inlineCode",{parentName:"p"},"word")," and assign ",(0,a.kt)("inlineCode",{parentName:"p"},"word")," to this empty list. Otherwise, add ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," to the end of ",(0,a.kt)("inlineCode",{parentName:"p"},"word"),"."),(0,a.kt)("h2",{id:"linked-lists"},"Linked Lists"),(0,a.kt)("p",null,"A linked list is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," object or ",(0,a.kt)("inlineCode",{parentName:"p"},"Link.empty"),"."),(0,a.kt)("p",null,"You can mutate a ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," object ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," in two ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Change the first element with ",(0,a.kt)("inlineCode",{parentName:"li"},"s.first = ...")),(0,a.kt)("li",{parentName:"ul"},"Change the rest of the elements with ",(0,a.kt)("inlineCode",{parentName:"li"},"s.rest = ..."))),(0,a.kt)("p",null,"You can make a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," object by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"Link"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Link(4)")," makes a linked list of length 1 containing 4."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Link(4, s)")," makes a linked list that starts with 4 followed by the elements of linked list ",(0,a.kt)("inlineCode",{parentName:"li"},"s"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class Link:\n    \"\"\"A linked list is either a Link object or Link.empty\n\n    >>> s = Link(3, Link(4, Link(5)))\n    >>> s.rest\n    Link(4, Link(5))\n    >>> s.rest.rest.rest is Link.empty\n    True\n    >>> s.rest.first * 2\n    8\n    >>> print(s)\n    <3 4 5>\n    \"\"\"\n    empty = ()\n\n    def __init__(self, first, rest=empty):\n        assert rest is Link.empty or isinstance(rest, Link)\n        self.first = first\n        self.rest = rest\n\n    def __repr__(self):\n        if self.rest:\n            rest_repr = ', ' + repr(self.rest)\n        else:\n            rest_repr = ''\n        return 'Link(' + repr(self.first) + rest_repr + ')'\n\n    def __str__(self):\n        string = '<'\n        while self.rest is not Link.empty:\n            string += str(self.first) + ' '\n            self = self.rest\n        return string + str(self.first) + '>'\n")),(0,a.kt)("h3",{id:"q2-linear-sublists"},"Q2: Linear Sublists"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition:")," A ",(0,a.kt)("em",{parentName:"p"},"sublist")," of linked list ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," is a linked list of some of the elements of ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," in order. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"<3 6 2 5 1 7>")," has sublists ",(0,a.kt)("inlineCode",{parentName:"p"},"<3 2 1>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<6 2 7>")," but not ",(0,a.kt)("inlineCode",{parentName:"p"},"<5 6 7>"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition:")," A ",(0,a.kt)("em",{parentName:"p"},"linear sublist")," of a linked list of numbers ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," is a sublist in which the difference between adjacent numbers is always the same. For example ",(0,a.kt)("inlineCode",{parentName:"p"},"<2 4 6 8>")," is a linear sublist of ",(0,a.kt)("inlineCode",{parentName:"p"},"<1 2 3 4 6 9 1 8 5>")," because the difference between each pair of adjacent elements is 2."),(0,a.kt)("p",null,"Implement ",(0,a.kt)("inlineCode",{parentName:"p"},"linear")," which takes a linked list of numbers ",(0,a.kt)("inlineCode",{parentName:"p"},"s")," (either a ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," instance or ",(0,a.kt)("inlineCode",{parentName:"p"},"Link.empty"),"). It returns the longest linear sublist of ",(0,a.kt)("inlineCode",{parentName:"p"},"s"),". If two linear sublists are tied for the longest, return either one."),(0,a.kt)("p",null,"Run in 61A Code"),(0,a.kt)("p",null,"There are three cases:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"rest")," is empty, return a one-element list containing just ",(0,a.kt)("inlineCode",{parentName:"li"},"first"),"."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"rest.first")," is in the linear sublist that starts with ",(0,a.kt)("inlineCode",{parentName:"li"},"first"),", then build a list that contains ",(0,a.kt)("inlineCode",{parentName:"li"},"first"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"rest.first"),"."),(0,a.kt)("li",{parentName:"ul"},"Otherwise, ",(0,a.kt)("inlineCode",{parentName:"li"},"complete(first, rest.rest)"),".")),(0,a.kt)("p",null,"This while loop is creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"candidate")," linear sublist for every two possible starting values: ",(0,a.kt)("inlineCode",{parentName:"p"},"s.first")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"t.first"),". The rest of the linear sublist must be in ",(0,a.kt)("inlineCode",{parentName:"p"},"t.rest"),"."),(0,a.kt)("h2",{id:"scheme"},"Scheme"),(0,a.kt)("h3",{id:"q3-increasing-rope"},"Q3: Increasing Rope"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition:")," A ",(0,a.kt)("em",{parentName:"p"},"rope")," in Scheme is a non-empty list containing only numbers except for the last element, which may either be a number or a rope."),(0,a.kt)("p",null,"Implement ",(0,a.kt)("inlineCode",{parentName:"p"},"up"),", a Scheme procedure that takes a positive integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),". It returns a rope containing the digits of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," that is the shortest rope in which each pair of adjacent numbers in the same list are in increasing order."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Reminder"),": the ",(0,a.kt)("inlineCode",{parentName:"p"},"quotient")," procedure performs floor division, like ",(0,a.kt)("inlineCode",{parentName:"p"},"//")," in Python. The ",(0,a.kt)("inlineCode",{parentName:"p"},"remainder")," procedure is like ",(0,a.kt)("inlineCode",{parentName:"p"},"%")," in Python."),(0,a.kt)("p",null,"Run in 61A Code"),(0,a.kt)("p",null,"Compare ",(0,a.kt)("inlineCode",{parentName:"p"},"first")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"(car result)")," to decide whether to ",(0,a.kt)("inlineCode",{parentName:"p"},"cons")," the value ",(0,a.kt)("inlineCode",{parentName:"p"},"first")," onto the ",(0,a.kt)("inlineCode",{parentName:"p"},"result")," or whether to form a new list that contains ",(0,a.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"result")," as elements."),(0,a.kt)("p",null,"To correctly call ",(0,a.kt)("inlineCode",{parentName:"p"},"helper")," from within ",(0,a.kt)("inlineCode",{parentName:"p"},"up"),", build a rope that only contains the last digit of ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"(remainder n 10)"),"."),(0,a.kt)("h2",{id:"sql"},"SQL"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"SELECT")," statement describes an output table based on input rows. To write one:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Describe the ",(0,a.kt)("strong",{parentName:"li"},"input rows")," using ",(0,a.kt)("inlineCode",{parentName:"li"},"FROM")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"WHERE")," clauses."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Group")," those rows and determine which groups should appear as output rows using ",(0,a.kt)("inlineCode",{parentName:"li"},"GROUP BY")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"HAVING")," clauses."),(0,a.kt)("li",{parentName:"ol"},"Format and order the ",(0,a.kt)("strong",{parentName:"li"},"output rows")," and columns using ",(0,a.kt)("inlineCode",{parentName:"li"},"SELECT")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"ORDER BY")," clauses.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SELECT")," ",(0,a.kt)("em",{parentName:"p"},"(Step 3)")," ",(0,a.kt)("inlineCode",{parentName:"p"},"FROM")," ",(0,a.kt)("em",{parentName:"p"},"(Step 1)")," ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," ",(0,a.kt)("em",{parentName:"p"},"(Step 1)")," ",(0,a.kt)("inlineCode",{parentName:"p"},"GROUP BY")," ",(0,a.kt)("em",{parentName:"p"},"(Step 2)")," ",(0,a.kt)("inlineCode",{parentName:"p"},"HAVING")," ",(0,a.kt)("em",{parentName:"p"},"(Step 2)")," ",(0,a.kt)("inlineCode",{parentName:"p"},"ORDER BY")," ",(0,a.kt)("em",{parentName:"p"},"(Step 3)"),";"),(0,a.kt)("p",null,"Step 1 may involve joining tables (using commas) to form input rows that consist of two or more rows from existing tables."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"GROUP BY"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"HAVING"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clauses are optional."),(0,a.kt)("h3",{id:"q4-a-secret-message"},"Q4: A Secret Message"),(0,a.kt)("p",null,"A substitution cipher replaces each word with another word in a table in order to encrypt a message. To decode an encrypted message, replace each word ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," with its corresponding ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," in a code table."),(0,a.kt)("p",null,"Write a select statement to decode the ",(0,a.kt)("inlineCode",{parentName:"p"},"original")," message ",(0,a.kt)("em",{parentName:"p"},"It's The End")," using the ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," table."),(0,a.kt)("p",null,"Run in 61A Code"),(0,a.kt)("p",null,"Join the ",(0,a.kt)("inlineCode",{parentName:"p"},"original")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," tables and make sure that the joined roles have the same ",(0,a.kt)("inlineCode",{parentName:"p"},"word")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,a.kt)("p",null,"What happens now? Write another select statement to decode this encrypted message using the same ",(0,a.kt)("inlineCode",{parentName:"p"},"code")," table."),(0,a.kt)("p",null,"Run in 61A Code"),(0,a.kt)("p",null,"Join ",(0,a.kt)("inlineCode",{parentName:"p"},"original")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"code AS a")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"code AS b")," to create six-column rows like: ",(0,a.kt)("inlineCode",{parentName:"p"},"2|The|The|Happens|Happens|Go"),", The ",(0,a.kt)("em",{parentName:"p"},"Go")," at the end is part of the decoded message."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Scheduling time:")," This is the last discussion, but you could schedule a meeting with your group next week to study for the exam. Your regular discussion room and time should be available during RRR week if you want to use it."),(0,a.kt)("h2",{id:"document-the-occasion"},"Document the Occasion"),(0,a.kt)("p",null,"Please all fill out the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.google.com/forms/d/e/1FAIpQLSeqlK8l6WkScGr-RHR-kM4p5bnR9cllYrG95fDqPJspSlll7A/viewform"},"attendance form")," (one submission per person per week)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important:")," Please help put the furniture in the room back where you found it before you leave. Thanks!"))}u.isMDXComponent=!0},99792:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/files/disc12-60dd80ec62b0e565d4a3721800d350b8.pdf"}}]);